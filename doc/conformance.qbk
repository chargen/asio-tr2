[section Conformance]
[xrefid conformance]

Conformance is specified in terms of behavior. Ideal behavior is not always
implementable, so the conformance sub-clauses take that into account.

[section POSIX conformance]
[xrefid conformance.9945]

Some behavior is specified by reference to __POSIX__. How such behavior is
actually implemented is unspecified.

[std_note This constitutes an "as if" rule allowing implementations to call
native operating system or other APIs.]

Implementations are encouraged to provide such behavior as it is defined by
__POSIX__. Implementations shall document any behavior that differs from the
behavior defined by __POSIX__. Implementations that do not support exact
__POSIX__ behavior are encouraged to provide behavior as close to __POSIX__
behavior as is reasonable given the limitations of actual operating systems and
file systems. If an implementation cannot provide any reasonable behavior, the
implementation shall report an error as specified in [link
error_reporting.error_reporting Error Reporting].

[std_note This allows users to rely on an exception being thrown or an error
code being set when an implementation cannot provide any reasonable behavior.]

Implementations are not required to provide behavior that is not supported by a
particular operating system.

[endsect]

[section Conditionally-supported features]
[xrefid conformance.conditional]

This Technical Specification defines conditially-supported features, in the
form of additional member functions on types that satisfy [link
requirements.protocol `Protocol`], [link requirements.endpoint `Endpoint`],
[link requirements.settable_socket_option `SettableSocketOption`], [link
requirements.gettable_socket_option `GettableSocketOption`] or [link
requirements.io_control_command `IoControlCommand`] requirements.

[std_note This is so that, when the additional member functions are available,
C++ programs may extend the library to add support for other protocols and
socket options.]

For the purposes of this Technical Specification, implementations that provide
all of the additional member functions are known as /extensible
implementations/. [std_note Implementations are encouraged to provide the
additional member functions, where possible. It is intended that __POSIX__ and
__Windows__ implementations will provide them.]

[endsect]

[endsect]
