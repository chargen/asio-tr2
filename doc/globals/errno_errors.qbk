[section:errno_errors [^errno] errors]

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace error {

          extern const error_code access_denied;
          extern const error_code address_family_not_supported;
          extern const error_code address_in_use;
          extern const error_code address_not_available;
          extern const error_code already_connected;
          extern const error_code already_started;
          extern const error_code broken_pipe;
          extern const error_code bad_descriptor;
          extern const error_code connection_aborted;
          extern const error_code connection_refused;
          extern const error_code connection_reset;
          extern const error_code destination_address_required;
          extern const error_code host_unreachable;
          extern const error_code interrupted;
          extern const error_code invalid_argument;
          extern const error_code invalid_protocol_type;
          extern const error_code message_size;
          extern const error_code network_down;
          extern const error_code network_reset;
          extern const error_code network_unreachable;
          extern const error_code no_buffer_space;
          extern const error_code no_descriptors;
          extern const error_code no_protocol_option;
          extern const error_code no_system_descriptors;
          extern const error_code not_connected;
          extern const error_code not_socket;
          extern const error_code operation_aborted;
          extern const error_code operation_not_supported;
          extern const error_code protocol_not_supported;
          extern const error_code timed_out;
          
        } // namespace error
      } // namespace sys
    } // namespace tr2
  } // namespace std

The meaning of each `error_code` value declared above shall correspond to the
__POSIX__ equivalent, as defined in the table below. The method of
initialisation of each value is implementation-defined.

[table Table--errno errors
  [[name][__POSIX__ equivalent]]
  [[`access_denied`][`EACCES`]]
  [[`address_family_not_supported`][`EAFNOSUPPORT`]]
  [[`address_in_use`][`EADDRINUSE`]]
  [[`address_not_available`][`EADDRNOTAVAIL`]]
  [[`already_connected`][`EISCONN`]]
  [[`already_started`][`EALREADY`]]
  [[`broken_pipe`][`EPIPE`]]
  [[`bad_descriptor`][`EBADF`]]
  [[`connection_aborted`][`ECONNABORTED`]]
  [[`connection_refused`][`ECONNREFUSED`]]
  [[`connection_reset`][`ECONNRESET`]]
  [[`destination_address_required`][`EDESTADDRREQ`]]
  [[`host_unreachable`][`EHOSTUNREACH`]]
  [[`interrupted`][`EINTR`]]
  [[`invalid_argument`][`EINVAL`]]
  [[`invalid_protocol_type`][`EPROTOTYPE`]]
  [[`message_size`][`EMSGSIZE`]]
  [[`network_down`][`ENETDOWN`]]
  [[`network_reset`][`ENETRESET`]]
  [[`network_unreachable`][`ENETUNREACH`]]
  [[`no_buffer_space`][`ENOBUFS`]]
  [[`no_descriptors`][`EMFILE`]]
  [[`no_protocol_option`][`ENOPROTOOPT`]]
  [[`no_system_descriptors`][`ENFILE`]]
  [[`not_connected`][`ENOTCONN`]]
  [[`not_socket`][`ENOTSOCK`]]
  [[`operation_aborted`][`ECANCELED`]]
  [[`operation_not_supported`][`EOPNOTSUPP`]]
  [[`protocol_not_supported`][`EPROTONOSUPPORT`]]
  [[`timed_out`][`ETIMEDOUT`]]
]

[std_note The __POSIX__ equivalent constants used above are defined in the
__POSIX__ header file __errno_h__.]

[endsect]
