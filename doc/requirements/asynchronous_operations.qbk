[section:asynchronous_operations Requirements on asynchronous operations]
[xrefid async.reqmts.async]

In this clause, an asynchronous operation is initiated by a function that is
named with the prefix `async_`. These functions shall be known as ['initiating
functions].

[section:completion_token Completion tokens and handlers]
[xrefid async.reqmts.async.token]

All initiating functions in this clause:

[mdash] are function templates with template parameter `CompletionToken`;

[mdash] accept, as the final parameter, a ['completion token] object `token`
of type `CompletionToken`;

[mdash] specify a ['Completion signature] element that defines a call signature
`Signature` (C++ Std [func.def]).

A ['completion handler] is a function object that will be invoked, at most
once, with the result of an asynchronous operation.

An initiating function determines the type `Handler` of its handler function
object by performing `handler_type_t<CompletionToken, Signature>`. The handler
object `handler` is initialized with
`handler(forward<CompletionToken>(token))`. [inline_note No other requirements
are placed on the type `CompletionToken`.]

The type `Handler` must satisfy the `MoveConstructible` requirements (C++ Std,
[moveconstructible]) and be callable with the specified completion signature.
The ['Completion signature] elements in this clause have named parameters, and
the result of an asynchronous operation is specified in terms of these names.

[endsect]

[section Automatic deduction of initiating function return type]
[xrefid async.reqmts.async.return.type]

All initiating functions in this clause are specified using automatic return
type deduction. The function return type shall be determined as if by `typename
async_result<Handler>::type`.

[endsect]

[section Production of initiating function return value]
[xrefid async.reqmts.async.return.value]

All initiating functions in this clause produce their return type as follows:

[mdash] constructing an object `result` of type `async_result<Handler>`,
initializing the object as `result(handler)`; and

[mdash] using `result.get()` as the return expression.

\[['Example:] Given an asynchronous operation with ['Completion signature]
`void(R1 r1, R2 r2)`, an initiating function meeting these requirements may be
implemented as follows:

  template<class CompletionToken>
  auto async_xyz(T1 t1, T2 t2, CompletionToken&& token)
  {
    handler_type_t<CompletionToken, void(R1 r1, R2 r2)>
      handler(forward<CompletionToken>(token));

    async_result<decltype(handler)> result(handler);

    // initiate the operation and cause handler to be invoked with the result

    return result.get();
  }

For convenience, initiating functions may be implemented using the
`async_completion` template:

  template<class CompletionToken>
  auto async_xyz(T1 t1, T2 t2, CompletionToken&& token)
  {
    async_completion<CompletionToken, void(R1 r1, R2 r2)> init(token);

    // initiate the operation and cause init.handler to be invoked with the result

    return init.result.get();
  }

'''&mdash;'''['end example]\]

[endsect]

[section Lifetime of initiating function arguments]
[xrefid async.reqmts.async.lifetime]

Unless otherwise specified, the lifetime of arguments to initiating functions
shall be treated as follows:

[mdash] If the parameter is declared as a const reference, rvalue reference, or
by-value, the implementation must not assume the validity of the argument after
the initiating function completes. [inline_note In other words, the program is
not required to guarantee the validity of the argument after the initiating
function completes.] The implementation may make copies of the argument, and
all copies shall be destroyed no later than immediately after invocation of the
handler.

[mdash] If the parameter is declared as a non-const reference, const pointer or
non-const pointer, the implementation may assume the validity of the argument
until the handler is invoked. [inline_note In other words, the program must
guarantee the validity of the argument until the handler is invoked.]

[endsect]

[section I/O executor]
[xrefid async.reqmts.async.io.exec]

All asynchronous operations in this clause have an associated executor object
satisfying [link requirements.executor Executor requirements]. Where the
initiating function is a member function, the associated executor is that
returned by the `get_executor` member function on the same object. Where the
initiating function is not a member function, the associated executor is that
returned by the `get_executor` member function of the first argument to the
initiating function. Let `Executor1` be the type of the associated executor,
and `ex1` be the associated executor object obtained as described above.

[endsect]

[section Handler executor]
[xrefid async.reqmts.async.handler.exec]

All handler objects have an associated executor object satisfying [link
requirements.executor Executor requirements]. The type `Executor2` of the
handler's associated executor shall be determined by
`associated_executor_t<Handler, Executor1>`. The handler's associated executor
object `ex2` shall be obtained by performing `associated_executor<Handler,
Executor1>::get(handler, ex1)`.

[endsect]

[section Outstanding work]
[xrefid async.reqmts.async.work]

The implementation of an asynchronous operation shall maintain an object
`work1` of type `executor_work<Executor1>`, initialized with `work1(ex1)` and
with `work1.owns_work() == true`, until the effects of the asynchronous
operation have been realized.

The implementation of an asynchronous operation shall maintain an object
`work2` of type `executor_work<Executor2>`, initialized with `work2(ex2)` and
with `work2.owns_work() == true`, until `handler` has been submitted for
execution.

[endsect]

[section Allocation of intermediate storage]
[xrefid async.reqmts.async.alloc]

Asynchronous operations may allocate memory. [inline_note Such as a data
structure to store copies of the `handler` object and the initiating function's
arguments.]

Let `Alloc1` be a type, satisfying `Allocator` requirements (C++ Std,
[allocator.requirements]), that represents the asynchronous operation's default
allocation strategy. [inline_note Typically `std::allocator<void>`.] Let
`alloc1` be an object of type `Alloc1`.

All handlers have an associated allocator object satisfying `Allocator`
requirements. The type `Alloc2` of the handler's associated allocator shall be
determined by `associated_allocator_t<Handler, Alloc1>`. The handler's
associated allocator object `alloc2` shall be obtained by performing
`associated_allocator<Handler, Executor1>::get(handler, alloc1)`.

The asynchronous operations defined in this clause:

[mdash] May allocate memory using the handler's associated allocator.

[mdash] Shall deallocate all memory allocated using the handler's associated
allocator prior to handler execution.

[mdash] Shall ensure that calls to the handler's associated allocator, or to
copies of the handler's associated allocator, are not performed concurrently in
a way that would introduce a data race.

[endsect]

[section Execution of handler on completion of asynchronous operation]
[xrefid async.reqmts.async.completion]

When an asynchronous operation completes, the implementation constructs a
zero-argument function object `bound_handler` to invoke `handler` with results
of the operation.

If an asynchonous operation completes immediately (that is, within the thread
calling the initiating function, and before the initiating function returns),
the handler shall be submitted for execution as if by performing
`ex2.post(bound_handler, alloc2)`. Otherwise, the handler shall be submitted
for execution as if by performing `ex2.dispatch(bound_handler, alloc2)`.

[endsect]

[section Handlers and exceptions]
[xrefid async.reqmts.async.exceptions]

Handlers are permitted to throw exceptions. The effect of any exception
propagated from the execution of a handler is determined by the executor which
is executing the handler.

[endsect]

[endsect]
