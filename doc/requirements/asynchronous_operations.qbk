[section:asynchronous_operations Requirements on asynchronous operations]
[xrefid async.reqmts.async]

In this clause, an asynchronous operation is initiated by a function that is
named with the prefix `async_`. These functions shall be known as ['initiating
functions].

[section:completion_token Completion tokens and handlers]
[xrefid async.reqmts.async.token]

All initiating functions in this clause:

[mdash] are function templates with template parameter `CompletionToken`;

[mdash] accept, as the final parameter, a ['completion token] object `token`
of type `CompletionToken`;

[mdash] specify a ['Completion signature] element that defines a call signature
`Signature` (C++ Std [func.def]).

A ['completion handler] is a function object that will be invoked, at most
once, with the result of an asynchronous operation.

An initiating function determines the type `Handler` of its completion handler
function object by performing `handler_type_t<CompletionToken, Signature>`. The
handler object `handler` is initialized with
`handler(forward<CompletionToken>(token))`. [inline_note No other requirements
are placed on the type `CompletionToken`.]

The type `Handler` must satisfy the `MoveConstructible` requirements (C++ Std,
[moveconstructible]) and be callable with the specified completion signature.
The ['Completion signature] elements in this clause have named parameters, and
the result of an asynchronous operation is specified in terms of these names.

[endsect]

[section Automatic deduction of initiating function return type]
[xrefid async.reqmts.async.return.type]

The return type of initiating functions is `typename
async_result<Handler>::type`. For presentation convenience, this clause
abbreviates this using `auto`.

[endsect]

[section Production of initiating function return value]
[xrefid async.reqmts.async.return.value]

An initiating function in this clause produces its return type as follows:

[mdash] constructing an object `result` of type `async_result<Handler>`,
initialized as `result(handler)`; and

[mdash] using `result.get()` as the operand of the return statement.

\[['Example:] Given an asynchronous operation with ['Completion signature]
`void(R1 r1, R2 r2)`, an initiating function meeting these requirements may be
implemented as follows:

  template<class CompletionToken>
  auto async_xyz(T1 t1, T2 t2, CompletionToken&& token)
  {
    handler_type_t<decay_t<CompletionToken>, void(R1 r1, R2 r2)>
      handler(forward<CompletionToken>(token));

    async_result<decltype(handler)> result(handler);

    // initiate the operation and cause handler to be invoked with the result

    return result.get();
  }

For convenience, initiating functions may be implemented using the
`async_completion` template:

  template<class CompletionToken>
  auto async_xyz(T1 t1, T2 t2, CompletionToken&& token)
  {
    async_completion<CompletionToken, void(R1 r1, R2 r2)> init(token);

    // initiate the operation and cause init.handler to be invoked with the result

    return init.result.get();
  }

'''&mdash;'''['end example]\]

[endsect]

[section Lifetime of initiating function arguments]
[xrefid async.reqmts.async.lifetime]

Unless otherwise specified, the lifetime of arguments to initiating functions
shall be treated as follows:

[mdash] If the parameter has a pointer type or has a type of lvalue reference
to non-const, the implementation may assume the validity of the pointee or
referent, respectively, until the completion handler is invoked. [inline_note
In other words, the program must guarantee the validity of the argument until
the completion handler is invoked.]

[mdash] Otherwise, the implementation must not assume the validity of the
argument after the initiating function completes. [inline_note In other words,
the program is not required to guarantee the validity of the argument after the
initiating function completes.] The implementation may make copies of the
argument, and all copies shall be destroyed no later than immediately after
invocation of the completion handler.

[endsect]

[section Associated executor]
[xrefid async.reqmts.async.assoc.exec]

Certain objects that participate in asynchronous operations have an
['associated executor]. These are obtained as specified below.

[endsect]

[section I/O executor]
[xrefid async.reqmts.async.io.exec]

All asynchronous operations in this clause have an associated executor object
satisfying the [link requirements.executor Executor requirements]. If the
initiating function is a member function, the associated executor is that
returned by the `get_executor` member function on the same object. If the
initiating function is not a member function, the associated executor is that
returned by the `get_executor` member function of the first argument to the
initiating function.

Let `Executor1` be the type of the associated executor, and `ex1` be the
associated executor object obtained as described above.

[endsect]

[section Completion handler executor]
[xrefid async.reqmts.async.handler.exec]

A completion handler object of type `Handler` has an associated executor object
`ex2` of type `Executor2` satisfying the [link requirements.executor Executor
requirements]. The type `Executor2` is `associated_executor_t<Handler,
Executor1>`. The object `ex2` is obtained by performing
`associated_executor<Handler, Executor1>::get(handler, ex1)`.

[endsect]

[section Outstanding work]
[xrefid async.reqmts.async.work]

The implementation of an asynchronous operation shall maintain an object
`work1` of type `executor_work<Executor1>`, initialized with `work1(ex1)` and
with `work1.owns_work() == true`, until the effects of the asynchronous
operation have been realized.

The implementation of an asynchronous operation shall maintain an object
`work2` of type `executor_work<Executor2>`, initialized with `work2(ex2)` and
with `work2.owns_work() == true`, until `handler` has been submitted for
execution.

[endsect]

[section Allocation of intermediate storage]
[xrefid async.reqmts.async.alloc]

Asynchronous operations may allocate memory. [inline_note Such as a data
structure to store copies of the `handler` object and the initiating function's
arguments.]

Let `Alloc1` be a type, satisfying the [link requirements.proto_allocator
`ProtoAllocator`] requirements, that represents the asynchronous operation's
default allocation strategy. [inline_note Typically `std::allocator<void>`.]
Let `alloc1` be an object of type `Alloc1`.

All handlers have an associated allocator object satisfying the [link
requirements.proto_allocator `ProtoAllocator`] requirements. The type `Alloc2`
of the handler's associated allocator shall be determined by
`associated_allocator_t<Handler, Alloc1>`. The handler's associated allocator
object `alloc2` shall be obtained by performing `associated_allocator<Handler,
Executor1>::get(handler, alloc1)`.

The asynchronous operations defined in this clause:

[mdash] If required, allocate memory using only the completion handler's
associated allocator.

[mdash] Prior to completion handler execution, deallocates any memory allocated.

[std_note The implementation may perform operating system or underlying API
calls that perform memory allocations not using the associated allocator.
Invocations of the allocator functions may not introduce data races (See C++
Std, \[res.on.data.races\]).]

[endsect]

[section Execution of handler on completion of asynchronous operation]
[xrefid async.reqmts.async.completion]

When an asynchronous operation completes, the implementation constructs a
zero-argument function object `f` to invoke `handler` with the results of the
operation.

If an asynchonous operation completes immediately (that is, within the thread
of execution calling the initiating function, and before the initiating
function returns), the handler shall be submitted for execution as if by
performing `ex2.post(std::move(f), alloc2)`. Otherwise, the handler shall be
submitted for execution as if by performing `ex2.dispatch(std::move(f),
alloc2)`.

[endsect]

[section Handlers and exceptions]
[xrefid async.reqmts.async.exceptions]

Handlers are permitted to throw exceptions. The effect of any exception
propagated from the execution of a handler is determined by the executor which
is executing the handler.

[endsect]

[endsect]
