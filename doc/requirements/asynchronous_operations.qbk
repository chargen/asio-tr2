[section:asynchronous_operations Requirements on asynchronous operations]

By convention, all functions that initiate [link
definitions.asynchronous_operation asynchronous operations] are named with the
prefix `async_`. These functions shall be known as /initiating functions/.

All initiating functions shall include a release memory barrier (/TODO/) prior
to any effect that may be visible to a different thread.

All initiating functions take an object meeting [link requirements.handler
handler] requirements as the last argument.

An implementation is permitted to make copies of a handler argument. All copies
of the handler argument shall be considered equivalent. All copies of the
handler will be destroyed immediately after the handler is dispatched.

When an asynchronous operation is complete, the handler for the operation will
be invoked as if by:

# Constructing an object `bch` meeting [link
  requirements.bound_completion_handler bound completion handler]
  requirements from the handler.

# Calling `ios.post(bch)` to schedule the handler for deferred invocation,
  where `ios` is the `io_service` associated with the I/O object on which the
  asynchronous operation is being performed.

# Dispatching the handler from within a call to an overload of `run()`,
  `run_one()`, `poll()` or `poll_one()` on the `io_service`, by performing
  `io_handler_invoke(bch, &h)` where `h` is a copy of the handler.

[std_note This implies that the handler must not be called directly from within
the initiating function, even if the asynchronous operation completes
immediately.]

If the implementation needs to allocate storage for an asynchronous operation,
the implementation shall perform `io_handler_allocate(size, &h)`, where `size`
is the required size in bytes, and `h` is the handler associated with the
asynchronous operation. The implementation shall perform
`io_handler_deallocate(p, size, &h)`, where `p` is a pointer to the storage, to
deallocate the storage prior to the invocation of the handler via
`io_handler_invoke`. Multiple storage blocks may be allocated for a single
asynchronous operation.

The implementation shall not make concurrent calls to `io_handler_allocate`,
`io_handler_deallocate` or `io_handler_invoke` for a single handler.

The call to `io_handler_invoke` shall be preceded by an acquire memory barrier
(/TODO/) and succeeded by a release memory barrier (/TODO/).

Calls to `io_handler_allocate` or `io_handler_deallocate` from the initiating
function shall occur prior to the release memory barrier (/TODO/).

Calls to `io_handler_allocate` or `io_handler_deallocate` that occur
immediately before `io_handler_invoke` shall occur after the acquire memory
barrier.

Calls to `io_handler_allocate` and `io_handler_deallocate` not from the
initiating function and not immediately before `io_handler_invoke` shall be
preceded by an acquire memory barrier (/TODO/) and succeeded by a release
memory barrier (/TODO/).

If the thread that initiates an asynchronous operation terminates before the
associated handler is dispatched, the behaviour is implementation-defined.

Asynchronous operations shall not fail with any error condition listed in the
table below.

[table Table--disallowed failure conditions for asynchronous operations
  [[failure condition][error code]]
  [
    [Operation interrupted by signal.]
    [`error::interrupted`]
  ]
  [
    [The operation would block.]
    [`error::would_block`]
  ]
]

[endsect]
