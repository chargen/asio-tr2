[section:timer_service Timer service requirements]

A timer service must meet the requirements for an [link
requirements.io_object_service I/O object service], as well as the additional
requirements listed below.

In the table below, `X` denotes a timer service class for time type `Time` and
traits type `TimeTraits`, `a` denotes a value of type `X`, `b` denotes a value
of type `X::implementation_type`, `t` denotes a value of type `Time`, `d`
denotes a value of type `TimeTraits::duration_type`, `h` denotes a value
meeting [link requirements.wait_handler `WaitHandler`] requirements, and `u`
denotes an identifier.

[table Table--TimerService requirements
  [[expression] [return type] [assertion/note\npre/post-condition]]
  [
    [`a.destroy(b);`]
    []
    [
      From [link requirements.io_object_service IoObjectService] requirements.
      Implicitly cancels asynchronous wait operations, as if by calling
      `a.cancel(b)`.
    ]
  ]
  [
    [``
      error_code u;
      a.cancel(b, u);
    ``]
    [`size_t`]
    [
      Causes any outstanding asynchronous wait operations to complete as soon as
      possible. Handlers for cancelled operations shall be passed the error code
      `error::operation_aborted`. Returns the number of operations that were
      cancelled.
    ]
  ]
  [
    [`a.expires_at(b);`]
    [`Time`]
    []
  ]
  [
    [``
      error_code u;
      a.expires_at(b, t, u);
    ``]
    [`size_t`]
    [
      Implicitly cancels asynchronous wait operations, as if by calling
      `a.cancel(b, u)`. Returns the number of operations that were cancelled.\n
      post: `a.expires_at(b) == t`.
    ]
  ]
  [
    [`a.expires_from_now(b);`]
    [`TimeTraits::duration_type`]
    [
      Returns a value equivalent to `TimeTraits::subtract(a.expires_at(b),
      TimeTraits::now())`.
    ]
  ]
  [
    [``
      error_code u;
      a.expires_from_now(b, d, u);
    ``]
    [`size_t`]
    [
      Equivalent to `a.expires_at(b, TimeTraits::add(TimeTraits::now(), d), u)`.
    ]
  ]
  [
    [``
      error_code u;
      a.wait(b, u);
    ``]
    [`error_code`]
    [
      Sets `u` to indicate success or failure. Returns `u`.\n
      post: `!!u || !TimeTraits::lt(TimeTraits::now(), a.expires_at(b))`.
    ]
  ]
  [
    [``
      a.async_wait(b, h);
    ``]
    []
    [
      Initiates an asynchronous wait operation that is performed via the
      `io_service` object `a.io_service()` and behaves according to [link
      requirements.asynchronous_operations asynchronous operation]
      requirements.\n
      \n
      The handler shall be posted for execution only if the condition
      `!!ec || !TimeTraits::lt(TimeTraits::now(), a.expires_at(b))`
      holds, where `ec` is the error code to be passed to the handler.
    ]
  ]
]

[endsect]
