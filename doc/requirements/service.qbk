[section:service Service requirements]
[xrefid async.reqmts.service]

A class is a ['service] if it is publicly and unambiguously derived from
`execution_context::service`, or if it is publicly and unambiguously derived
from another service. For a service `S`, `S::key_type` is valid and denotes a
type (C++Std, [temp.deduct]), and `is_base_of_v<typename S::key_type, S>` is
`true`.

A service defines an explicit constructor that can be invoked with a single
lvalue argument referring to the `execution_context` object that will own the
service. Any additional constructors shall take a first lvalue argument
referring to the `execution_context` object that will own the service.
[inline_note These constructors may be called by the `make_service` function.]

[std_example \n..
``
  class my_service : public execution_context::service
  {
  public:
    typedef my_service key_type;
    explicit my_service(execution_context& ctx);
    my_service(execution_context& ctx, int some_value);
  private:
    virtual void shutdown() override;
    __dotdotdot__
  };
``]

A service's `shutdown` member function shall destroy all copies of user-defined
function objects that are held by the service.

[endsect]
