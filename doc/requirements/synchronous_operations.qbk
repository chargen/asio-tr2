[section:synchronous_operations Requirements on synchronous operations]

In this clause, a synchronous operation is any function that has a final
parameter `error_code& ec`.

Implementations of synchronous operations described in this clause are
permitted to call the application programming interface (API) provided by the
operating system. If such an operating system API call results in an error,
`ec` shall be set to an `error_code` value such that `ec` evaluates to true.
Otherwise `ec` shall be set such that `ec` evaluates to false.

Unless otherwise noted, when the behaviour of a synchronous operation is
defined "as if" implemented by a __POSIX__ function, `ec` shall be set to the
[link globals.errno_errors `errno` error] or [link globals.getaddrinfo_errors
`getaddrinfo` error] value of type `error_code` that corresponds to the failure
condition described by __POSIX__ for that function, if any. Otherwise `ec`
shall be set to an implementation-defined `error_code` value that reflects the
operating system error.

Except for `io_service::run()` and `io_service::run_one()`, synchronous
operations shall not fail with an error condition that indicates interruption
by a signal (__POSIX__ `EINTR`). [inline_note Implementations may meet this
requirement by automatically restarting the operation if a signal occurs.]

Synchronous operations shall not fail with any error condition associated with
non-blocking operations (__POSIX__ `EWOULDBLOCK`, `EAGAIN` or `EINPROGRESS`;
__Windows__ `WSAEWOULDBLOCK` or `WSAEINPROGRESS`).

Synchronous operations shall be cancellation points if the operation is defined
"as if" implemented by a __POSIX__ function, and __POSIX__ specifies that a
cancellation point shall occur when a thread executes the function. Synchronous
operations may be cancellation points if the operation is defined "as if"
implemented by a __POSIX__ function, and __POSIX__ specifies that a
cancellation point may occur when a thread executes the function. The
`io_service::run()`, `io_service::run_one()` and
`deadline_timer_service<>::wait()` synchronous operations shall be cancellation
points. An implementation shall not introduce cancellation points into any
other functions specified in this clause.

[commentary Synchronous operations in this proposal should participate in
whatever cooperative thread cancellation is chosen by the committee. It is
expected that the semantics of cancellation will be documented elsewhere.
However, as far as this proposal is concerned, it is suggested that a
synchronous operation that completes successfully (i.e. has the externally
visible side effects associated with successful completion) will not process
the cancellation and the cancellation shall remain pending. Furthermore, no
requirement should be placed on implementations as to how long after
cancellation is initiated that a concurrent synchronous operation will detect
the cancellation.]

A synchronous operation may have an overload with parameters that differ only
by the absence of `error_code& ec`. If the overload returns `void`, the
overload shall behave as if implemented in terms of the synchronous operation
as follows:

  void ``[*['f]]``(``['[*A1]]`` a1, ``['[*A2]]`` a2, ..., ``['[*AN]]`` aN)
  {
    error_code ec;
    ``['[*f]]``(a1, a2, ..., aN, ec);
    if (ec) throw system_error(ec);
  }

If the overload returns non-`void`, the overload shall behave as if implemented
in terms of the synchronous operation as follows:

  ``['[*R f]]``(``['[*A1]]`` a1, ``['[*A2]]`` a2, ..., ``['[*AN]]`` aN)
  {
    error_code ec;
    ``['[*R]]`` r = ``['[*f]]``(a1, a2, ..., aN, ec);
    if (ec) throw system_error(ec);
    return r;
  }

In this clause, when a synchronous operation has an overload as described
above, only the behaviour of the synchronous operation is specified, for
brevity.

[endsect]
