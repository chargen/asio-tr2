[section:executor Executor requirements]

The library describes a standard set of requirements for ['executors], which
are class-type objects that encapsulate the information about an execution
policy.

An executor type `X` shall satisfy the requirements of `CopyConstructible` (C++
Std, [copyconstructible]) types. No constructor, comparison operator, copy
operation, move operation, or swap operation on these types shall exit via an
exception.

The executor copy constructor, comparison operators, and member functions
defined in these requirements shall not introduce data races as a result of
concurrent calls to those functions from different threads.

In the table below, `X` denotes an executor class, `x` denotes a value of type
`X&`, `x1` and `x2` denote values of type `const X&`, `x3` denotes a value of
type `X&&`, `f` denotes a `MoveConstructible` (C++ Std, [moveconstructible])
function object callable with zero arguments, `a` denotes a value of type `A`
meeting `Allocator` requirements (C++ Std, [allocator.requirements]), `t`
denotes an object of type `T`, and `u` denotes an identifier.

[table Executor requirements
  [[expression] [type] [assertion/note\npre/post-conditions]]
  [
    [`X u(x1);`]
    []
    [Shall not exit via an exception.\n
     post: `u == x1`]
  ]
  [
    [`X u(x3);`]
    []
    [Shall not exit via an exception.\n
     post: `u` equals the prior value of `x3`.]
  ]
  [
    [`x1 == x2`]
    [`bool`]
    [Returns `true` only if `x1` and `x2` represent the same execution policy.
     `operator==` shall be reflexive, symmetric, and transitive, and shall not
     exit via an exception.]
  ]
  [
    [`x1 != x2`]
    [`bool`]
    [Same as `!(x1 == x2)`.]
  ]
  [
    [`x.work_started()`]
    []
    []
  ]
  [
    [`x.work_finished()`]
    []
    [Requires: A preceding call `x1.work_started()` where `x == x1`.]
  ]
  [
    [`x.dispatch(std::move(f),a)`]
    []
    [Effects: Calls [^['DECAY_COPY]]`(forward<Func>(f))()` at most once. The
     executor may invoke `f` in the current thread, prior to returning from
     `dispatch`. The call to `DECAY_COPY()` is evaluated in the thread that
     called `dispatch`.\n
     \n
     Executor implementations are encouraged to use the supplied allocator to
     allocate any memory required to store the function object. The executor
     shall deallocate all memory prior to invoking the function object.\n
     \n
     Synchronization: The invocation of `dispatch` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f`.]
  ]
  [
    [`x.post(std::move(f),a)`]
    []
    [Effects: Calls [^['DECAY_COPY]]`(forward<Func>(f))()` at most once. The
     executor may not invoke `f` in the current thread, prior to returning from
     `post`. The call to `DECAY_COPY()` is evaluated in the thread that called
     `post`.\n
     \n
     Executor implementations are encouraged to use the supplied allocator to
     allocate any memory required to store the function object. The executor
     shall deallocate all memory prior to invoking the function object.\n
     \n
     Synchronization: The invocation of `post` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f`.]
  ]
  [
    [`x.defer(std::move(f),a)`]
    []
    [Effects: Calls [^['DECAY_COPY]]`(forward<Func>(f))()` at most once. The
     executor may not invoke `f` in the current thread, prior to returning from
     `defer`. The call to `DECAY_COPY()` is evaluated in the thread that called
     `defer`.\n
     \n
     Executor implementations are encouraged to use the supplied allocator to
     allocate any memory required to store the function object. The executor
     shall deallocate all memory prior to invoking the function object.\n
     \n
     Synchronization: The invocation of `defer` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f`.]
  ]
  [
    [`x1.wrap(std::move(t))`]
    [`executor_wrapper<T,X>`]
    []
  ]
]

[endsect]
