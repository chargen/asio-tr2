[section:executor Executor requirements]
[xrefid async.reqmts.executor]

The library describes a standard set of requirements for ['executors]. A type
meeting the Executor requirements embodies a set of rules for determining how
submitted function objects are to be executed.

An executor type `X` shall satisfy the requirements of `CopyConstructible` (C++
Std, [copyconstructible]) and `Destructible` (C++ Std, [destructible]) types.
No constructor, comparison operator, copy operation, move operation, swap
operation, or member functions `context`, `on_work_started`, and
`on_work_finished` on these types shall exit via an exception.

The executor copy constructor, comparison operators, and other member functions
defined in these requirements shall not introduce data races as a result of
concurrent calls to those functions from different threads.

In the table below, `X` denotes an executor class, `x` denotes an lvalue of
type `X`, `x1` and `x2` denote values of type (possibly const) `X`, `x3`
denotes an xvalue of type `X`, `f` denotes a `MoveConstructible` (C++ Std,
[moveconstructible]) function object callable with zero arguments, `a` denotes
a value of type `A` meeting the `Allocator` requirements (C++ Std,
[allocator.requirements]), and `u` denotes an identifier.

[table Executor requirements
  [[expression] [type] [assertion/note\npre/post-conditions]]
  [
    [`X u(x1);`]
    []
    [Shall not exit via an exception.\n
     \n
     post: `u == x1`]
  ]
  [
    [`X u(x3);`]
    []
    [Shall not exit via an exception.\n
     \n
     post: `u` equals the prior value of `x3`.]
  ]
  [
    [`x1 == x2`]
    [`bool`]
    [ Returns `true` only if `x1` and `x2` can be interchanged with identical
     effects in any of the expressions defined in these type requirements.
     [inline_note Returning `false` does not necessarily imply that the effects
     are not identical.]\n
     \n
     `operator==` shall be reflexive, symmetric, and transitive, and shall not
     exit via an exception.]
  ]
  [
    [`x1 != x2`]
    [`bool`]
    [Same as `!(x1 == x2)`.]
  ]
  [
    [`x.context()`]
    [`execution_context&`, or a type that is convertible to `execution_context&`.]
    [Shall not exit via an exception.]
  ]
  [
    [`x.on_work_started()`]
    []
    [Shall not exit via an exception.]
  ]
  [
    [`x.on_work_finished()`]
    []
    [Shall not exit via an exception.\n
     \n
     Precondition: A preceding call `x1.on_work_started()` where `x == x1`.]
  ]
  [
    [`x.dispatch(std::move(f),a)`]
    []
    [Effects: Creates an object `f1` initialized with
     [^['DECAY_COPY]]`(forward<Func>(f))` in the current thread of execution.
     Calls `f1()` at most once. The executor may invoke `f1` prior to returning
     from `dispatch`.\n
     \n
     Executor implementations should use the supplied allocator to allocate any
     memory required to store the function object. Prior to invoking the
     function object, the executor shall deallocate any memory allocated.
     [inline_note Executors defined in this Technical Specification always use
     the supplied allocator.]\n
     \n
     Synchronization: The invocation of `dispatch` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f1`.]
  ]
  [
    [`x.post(std::move(f),a)`]
    []
    [Effects: Creates an object `f1` initialized with
     [^['DECAY_COPY]]`(forward<Func>(f))` in the current thread of execution.
     Calls `f1()` at most once. The executor shall not invoke `f1` in the
     current thread of execution prior to returning from `post`.\n
     \n
     Executor implementations should use the supplied allocator to allocate any
     memory required to store the function object. Prior to invoking the
     function object, the executor shall deallocate any memory allocated.
     [inline_note Executors defined in this Technical Specification always use
     the supplied allocator.]\n
     \n
     Synchronization: The invocation of `post` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f1`.]
  ]
  [
    [`x.defer(std::move(f),a)`]
    []
    [Effects: Creates an object `f1` initialized with
     [^['DECAY_COPY]]`(forward<Func>(f))` in the current thread of execution.
     Calls `f1()` at most once. The executor shall not invoke `f1` in the
     current thread of execution prior to returning from `defer`.\n
     \n
     Executor implementations should use the supplied allocator to allocate any
     memory required to store the function object. Prior to invoking the
     function object, the executor shall deallocate any memory allocated.
     [inline_note Executors defined in this Technical Specification always use
     the supplied allocator.]\n
     \n
     Synchronization: The invocation of `defer` synchronizes with (C++ Std,
     \[intro.multithread\]) the invocation of `f1`.]
  ]
]

Although the requirements placed on `defer` are identical to `post`, `defer` is
used to convey the intention of the caller that the submitted function is a
continuation of the current call context. The executor may use this information
to optimize or otherwise adjust the way in which `f` is invoked.

[endsect]
