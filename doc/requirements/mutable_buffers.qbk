[section:mutable_buffers Mutable buffer sequence requirements]
[xrefid buffer.reqmts.mutablebuffersequence]

A ['mutable buffer sequence] represents a set of memory regions that may be
used to receive the output of an operation, such as the `receive` operation of
a socket.

A type `X` meets the `MutableBufferSequence` requirements if it satisfies the
requirements of `Destructible` (C++ Std, [destructible]) and
`CopyConstructible` (C++ Std, [copyconstructible]), as well as the additional
requirements listed below.

In the table below, `x` denotes a (possibly const) value of type `X`, and `u`
denotes an identifier.

[table MutableBufferSequence requirements
  [[expression] [return type] [assertion/note\npre/post-condition]]
  [
    [`std::experimental::__ns__::buffer_sequence_begin(x)`\n
     `std::experimental::__ns__::buffer_sequence_end(x)`]
    [An iterator type meeting the requirements for bidirectional iterators (C++
     Std, \[bidirectional.iterators\]) whose value type is convertible to
     `mutable_buffer`.]
    []
  ]
  [
    [``
      X u(x);
    ``]
    []
    [post:\n
     ``
       equal(
         std::experimental::__ns__::buffer_sequence_begin(x),
         std::experimental::__ns__::buffer_sequence_end(x),
         std::experimental::__ns__::buffer_sequence_begin(u),
         std::experimental::__ns__::buffer_sequence_end(u),
         [](const typename X::value_type& v1,
            const typename X::value_type& v2)
          {
            mutable_buffer b1(v1);
            mutable_buffer b2(v2);
            return b1.data() == b2.data()
                && b1.size() == b2.size();
          })
     ``]
  ]
]

[endsect]
