[section:dynamic_buffers Dynamic buffer requirements]
[xrefid buffer.reqmts.dynamicbuffer]

A dynamic buffer encapsulates memory storage that may be automatically resized
as required, where the memory is divided into two regions: readable bytes
followed by writable bytes. These memory regions are internal to the dynamic
buffer, but direct access to the elements is provided to permit them to be
efficiently used with I/O operations. [inline_note Such as the `send` or
`receive` operations of a socket. The readable bytes would be used as the
constant buffer sequence for `send`, and the writable bytes used as the mutable
buffer sequence for `receive`.] Data written to the writable bytes of a dynamic
buffer object is appended to the readable bytes of the same object.

A type `X` meets the `DynamicBuffer` requirements if it satisfies the
requirements of `Destructible` (C++ Std, [destructible]) and
`MoveConstructible` (C++ Std, [moveconstructible]), as well as the additional
requirements listed below.

In the table below, `x` denotes a value of type `X`, `x1` denotes a (possibly
const) value of type `X`, and `n` denotes a (possibly const) value of type
`size_t`.

[table DynamicBuffer requirements
  [[expression] [type] [assertion/note\npre/post-conditions]]
  [
    [`X::const_buffers_type`]
    [type meeting [link requirements.const_buffers ConstBufferSequence]
     requirements.]
    [This type represents the memory associated with the readable bytes.]
  ]
  [
    [`X::mutable_buffers_type`]
    [type meeting [link requirements.const_buffers MutableBufferSequence]
     requirements.]
    [This type represents the memory associated with the writable bytes.]
  ]
  [
    [`x1.size()`]
    [`size_t`]
    [Returns the number of readable bytes.]
  ]
  [
    [`x1.max_size()`]
    [`size_t`]
    [Returns the maximum number of bytes, both readable and writable, that
     can be held by `x1`.]
  ]
  [
    [`x1.capacity()`]
    [`size_t`]
    [Returns the maximum number of bytes, both readable and writeable, that
     can be held by `x1` without requiring reallocation.]
  ]
  [
    [`x1.data()`]
    [`X::const_buffers_type`]
    [Returns a constant buffer sequence `u` that represents the readable bytes,
     and where `buffer_size(u) == size()`.]
  ]
  [
    [`x.prepare(n)`]
    [`X::mutable_buffers_type`]
    [Returns a mutable buffer sequence `u` representing the writable bytes, and
     where `buffer_size(u) == n`. The dynamic buffer reallocates memory as
     required. All constant or mutable buffer sequences previously obtained
     using `data()` or `prepare()` are invalidated.\n
     \n
     Throws: `length_error` if `size() + n` exceeds `max_size()`.]
  ]
  [
    [`x.commit(n)`]
    []
    [Appends `n` bytes from the start of the writable bytes to the end of the
     readable bytes. The remainder of the writable bytes are discarded. If `n`
     is greater than the number of writable bytes, all writable bytes are
     appended to the readable bytes. All constant or mutable buffer sequences
     previously obtained using `data()` or `prepare()` are invalidated.]
  ]
  [
    [`x.consume(n)`]
    []
    [Removes `n` bytes from beginning of the readable bytes. If `n` is greater
     than the number of readable bytes, all readable bytes are removed. All
     constant or mutable buffer sequences previously obtained using `data()` or
     `prepare()` are invalidated.]
  ]
]

[endsect]
