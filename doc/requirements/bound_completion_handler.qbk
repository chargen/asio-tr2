[section:bound_completion_handler Bound completion handlers]

A bound completion handler is a handler object that contains a copy of a
user-supplied hander, where the user-supplied handler accepts one or more
arguments. The bound completion handler does not accept any arguments, and
contains values to be passed as arguments to the user-supplied handler. The
bound completion handler forwards the `io_handler_allocate()`,
`io_handler_deallocate()`, and `io_handler_dispatch()` calls to the
corresponding functions for the user-supplied handler. A bound completion
handler meets the requirements for a [link requirements.completion_handler
completion handler].

[std_example A bound completion handler for a [link requirements.read_handler
`ReadHandler`]:..
``
  template<class ReadHandler>
  struct bound_read_handler
  {
    bound_read_handler(ReadHandler handler, const error_code& ec, size_t s)
      : handler_(handler), ec_(ec), s_(s)
    {
    }

    void operator()()
    {
      handler_(ec_, s_);
    }

    ReadHandler handler_;
    const error_code ec_;
    const size_t s_;
  };

  template<class ReadHandler>
  void* io_handler_allocate(size_t size,
                            bound_read_handler<ReadHandler>* this_handler)
  {
    using namespace std::tr2::sys;
    return io_handler_allocate(size, &this_handler->handler_);
  }

  template<class ReadHandler>
  void io_handler_deallocate(void* pointer, std::size_t size,
                             bound_read_handler<ReadHandler>* this_handler)
  {
    using namespace std::tr2::sys;
    io_handler_deallocate(pointer, size, &this_handler->handler_);
  }

  template<class F, class ReadHandler>
  void io_handler_dispatch(const F& f,
                           bound_read_handler<ReadHandler>* this_handler)
  {
    using namespace std::tr2::sys;
    io_handler_dispatch(f, &this_handler->handler_);
  }
``
]

[endsect]
