[section:multicast_group_socket_options Multicast group socket options]
[xrefid internet.reqmts.opt.mcast]

A type `X` meets the `MulticastGroupSocketOption` requirements if it satisfies
the requirements of `Destructible` (C++Std [destructible]), `CopyConstructible`
(C++Std [copyconstructible]), `CopyAssignable` (C++Std [copyassignable]), and
[link requirements.settable_socket_option `SettableSocketOption`], as well as
the additional requirements listed below.

In the table below, `a` denotes a (possibly const) value of type `X`, `b`
denotes a (possibly const) value of type `address`, `c` and `d` denote
(possibly const) values of type `address_v4`, `e` denotes a (possibly const)
value of type `address_v6`, `f` denotes a (possibly const) value of type
`unsigned int`, and `u` denotes an identifier.

[table MulticastGroupSocketOption requirements
  [[expression] [type] [assertion/note\npre/post-conditions]]
  [
    [`X u(b);`]
    []
    [Constructs a multicast group socket option to join the group with the
     specified version-independent address.]
  ]
  [
    [`X u(c, d);`]
    []
    [Constructs a multicast group socket option to join the specified IPv4
     address on a specified network interface.]
  ]
  [
    [`X u(e, f);`]
    []
    [Constructs a multicast group socket option to join the specified IPv6
     address on a specified network interface.]
  ]
]

In this Technical Specification, types that satisfy the
`MulticastGroupSocketOption` requirements are defined as follows.

  class ``['[*C]]``
  {
  public:
    // constructors:
    explicit ``['[*C]]``(const address& multicast_group) noexcept;
    explicit ``['[*C]]``(const address_v4& multicast_group,
               const address_v4& network_interface = address_v4::any()) noexcept;
    explicit ``['[*C]]``(const address_v6& multicast_group,
               unsigned int network_interface = 0) noexcept;
  };

Extensible implementations provide the following member functions:

  class ``['[*C]]``
  {
  public:
    template<class Protocol> int level(const Protocol& p) const noexcept;
    template<class Protocol> int name(const Protocol& p) const noexcept;
    template<class Protocol> const void* data(const Protocol& p) const noexcept;
    template<class Protocol> size_t size(const Protocol& p) const noexcept;
    // ``['remainder unchanged]``
  private:
    ip_mreq v4_value_; // ``['exposition only]``
    ipv6_mreq v6_value_; // ``['exposition only]``
  };

Let [^['L]] and [^['N]] identify the __POSIX__ macros to be passed as the
/level/ and /option_name/ arguments, respectively, to __POSIX__ __setsockopt__
and __getsockopt__.

  explicit ``['[*C]]``(const address& multicast_group) noexcept;

[function_effects If `multicast_group.is_v6()` is `true`, calls
[^['[*C]]]`(multicast_group.to_v6())`; otherwise, calls
[^['[*C]]]`(multicast_group.to_v4())`.]

  explicit ``['[*C]]``(const address_v4& multicast_group,
             const address_v4& network_interface = address_v4::any()) noexcept;

[function_effects For extensible implementations, `v4_value_.imr_multiaddr` is
initialized to correspond to the address `multicast_group`,
`v4_value_.imr_interface` is initialized to correspond to address
`network_interface`, and `v6_value_` is zero-initialized.]

  explicit ``['[*C]]``(const address_v6& multicast_group,
             unsigned int network_interface = 0) noexcept;

[function_effects For extensible implementations, `v6_value_.ipv6mr_multiaddr`
is initialized to correspond to the address `multicast_group`,
`v6_value_.ipv6mr_interface` is initialized to `network_interface`, and
`v4_value_` is zero-initialized.]

  template<class Protocol> int level(const Protocol& p) const noexcept;

[function_returns ['[*`L`]].]

  template<class Protocol> int name(const Protocol& p) const noexcept;

[function_returns ['[*`N`]].]

  template<class Protocol> const void* data(const Protocol& p) const noexcept;

[function_returns `std::addressof(v6_value_)` if `p.family() == AF_INET6`,
otherwise `std::addressof(v4_value_)`.]

  template<class Protocol> size_t size(const Protocol& p) const noexcept;

[function_returns `sizeof(v6_value_)` if `p.family() == AF_INET6`, otherwise
`sizeof(v4_value_)`.]

[endsect]
