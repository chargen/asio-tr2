[section:bool_socket_option Boolean socket options]
[xrefid socket.reqmts.opt.bool]

A type `X` meets the `BooleanSocketOption` requirements if it satisfies the
requirements of `Destructible` (C++Std [destructible]), `DefaultConstructible`
(C++Std [defaultconstructible]), `CopyConstructible` (C++Std
[copyconstructible]), `CopyAssignable` (C++Std [copyassignable]), [link
requirements.gettable_socket_option `GettableSocketOption`], and [link
requirements.settable_socket_option `SettableSocketOption`], `X` is
contextually convertible to bool, and `X` satisfies the additional requirements
listed below.

In the table below, `a` denotes a (possibly const) value of type `X`, `b`
denotes a (possibly const) value of type `bool`, and `u` denotes an identifier.

[table BooleanSocketOption requirements
  [[expression] [type] [assertion/note\npre/post-conditions]]
  [
    [`X u;`]
    []
    [post: `!u.value()`.]
  ]
  [
    [`X u(b);`]
    []
    [post: `u.value() == b`.]
  ]
  [
    [`a.value()`]
    [`bool`]
    [Returns the current boolean value of the socket option object.]
  ]
  [
    [`static_cast<bool>(a)`]
    [`bool`]
    [Returns `a.value()`.]
  ]
  [
    [`!a`]
    [`bool`]
    [Returns `!a.value()`.]
  ]
]

In this Technical Specification, types that satisfy the `BooleanSocketOption`
requirements are defined as follows.

  class ``['[*C]]``
  {
  public:
    // constructors:
    ``['[*C]]``() noexcept;
    explicit ``['[*C]]``(bool v) noexcept;

    // members:
    ``['[*C]]``& operator=(bool v) noexcept;

    bool value() const noexcept;

    explicit operator bool() const noexcept;
    bool operator!() const noexcept;
  };

Extensible implementations provide the following member functions:

  class ``['[*C]]``
  {
  public:
    template<class Protocol> int level(const Protocol& p) const noexcept;
    template<class Protocol> int name(const Protocol& p) const noexcept;
    template<class Protocol> void* data(const Protocol& p) noexcept;
    template<class Protocol> const void* data(const Protocol& p) const noexcept;
    template<class Protocol> size_t size(const Protocol& p) const noexcept;
    template<class Protocol> void resize(const Protocol& p, size_t s);
    // ``['remainder unchanged]``
  private:
    int value_; // ``['exposition only]``
  };

Let [^['L]] and [^['N]] identify the __POSIX__ macros to be passed as the
/level/ and /option_name/ arguments, respectively, to __POSIX__ __setsockopt__
and __getsockopt__.

  ``['[*C]]``() noexcept;

[function_postconditions `!value()`.]

  explicit ``['[*C]]``(bool v) noexcept;

[function_postconditions `value() == v`.]

  ``['[*C]]``& operator=(bool v) noexcept;

[function_returns `*this`.]

[function_postconditions `value() == v`.]

  bool value() const noexcept;

[function_returns The stored socket option value. For extensible
implementations, returns `value_ != 0`.]

  explicit operator bool() const noexcept;

[function_returns `value()`.]

  bool operator!() const noexcept;

[function_returns `!value()`.]

  template<class Protocol> int level(const Protocol& p) const noexcept;

[function_returns ['[*`L`]].]

  template<class Protocol> int name(const Protocol& p) const noexcept;

[function_returns ['[*`N`]].]

  template<class Protocol> void* data(const Protocol& p) noexcept;

[function_returns `std::addressof(value_)`.]

  template<class Protocol> const void* data(const Protocol& p) const noexcept;

[function_returns `std::addressof(value_)`.]

  template<class Protocol> size_t size(const Protocol& p) const noexcept;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s` is not a valid data size for the
protocol specified by `p`.]
  
[endsect]
