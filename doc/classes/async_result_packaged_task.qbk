[section:async_result_packaged_task Partial class template specialization [^async_result] for [^packaged_task]]
[xrefid async.packaged.task.specializations]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Result, class... Args, class Signature>
    class async_result<packaged_task<Result(Args...)>, Signature>
    {
    public:
      typedef packaged_task<Result(Args...)> completion_handler_type;
      typedef future<Result> return_type;

      explicit async_result(completion_handler_type& h);
      async_result(const async_result&) = delete;
      async_result& operator=(const async_result&) = delete;

      return_type get();

    private:
      return_type future_; // ``['exposition only]``
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

  explicit async_result(completion_handler_type& h);

[function_effects Initializes `future_` with `h.get_future()`.]

  return_type get();

[function_returns `std::move(future_)`.]

[endsect]
