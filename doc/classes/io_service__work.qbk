[section:io_service__work Class [^io_service::work]]

  namespace std {
    namespace experimental {
      namespace network {

        class io_service::work
        {
        public:
          // constructors/destructor:
          explicit work(io_service& ios);
          work(const work& other);
          ~work();

          // members:
          io_service& get_io_service();

        private:
          void operator=(const work&); // not defined
        };

      } // namespace network
    } // namespace experimental
  } // namespace std

An object of class `io_service::work` represents a unit of unfinished work for
an `io_service`.

[section [^io_service::work] constructors/destructor]

  explicit work(io_service& ios);

[function_effects Constructs an object of class `work`.]

[function_postconditions `&get_io_service() == &ios`.]

  work(const work& other);

[function_effects Constructs an object of class `work`.]

[function_postconditions `&get_io_service() == &other.get_io_service()`.]

  ~work();

[function_effects If no other `work` object `w` exists such that
`&get_io_service() == &w.get_io_service()`, stops the `io_service` as if by
calling `get_io_service().stop()`.]

[endsect]

[section [^io_service::work] members]

  io_service& get_io_service();

[function_returns The `io_service` associated with the work.]

[endsect]

[endsect]
