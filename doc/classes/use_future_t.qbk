[section:use_future_t Class template [^use_future_t]]
[xrefid async.use.future]

The class template `use_future_t` defines a set of types that, when passed as a
[link requirements.completion_token completion token] to an asynchronous
operation's initiating function, cause the result of the asynchronous operation
to be delivered via a future (C++Std [futures.unique_future]).

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class ProtoAllocator = allocator<void>>
    class use_future_t
    {
    public:
      // use_future_t types:
      typedef ProtoAllocator allocator_type;

      // use_future_t members:
      constexpr use_future_t() noexcept;
      explicit use_future_t(const allocator_type& a) noexcept;
      template<class OtherProtoAllocator> use_future_t<OtherProtoAllocator>
        rebind(const OtherProtoAllocator& a) const noexcept;
      allocator_type get_allocator() const noexcept;
      template <class F> ``['unspecified]`` operator()(F&& f) const;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^use_future_t] constructors]
[xrefid async.use.future.cons]

  constexpr use_future_t() noexcept;

[function_effects Constructs a `use_future_t` with a default-constructed
allocator.]

  explicit use_future_t(const allocator_type& a) noexcept;

[function_postconditions `get_allocator() == a`.]

[endsect]

[section [^use_future_t] members]
[xrefid async.use.future.members]

  template<class OtherProtoAllocator> use_future_t<OtherProtoAllocator>
    rebind(const OtherProtoAllocator& a) const noexcept;

[function_returns A `use_future_t` object where `get_allocator() == a`.]

  allocator_type get_allocator() const noexcept;

[function_returns The associated allocator object.]

  template <class F> ``['unspecified]`` operator()(F&& f) const;

[function_block Let [^T] be a completion token type. Let [^H] be a completion
handler type and let [^h] be an object of type [^H]. Let [^FD] be the type
`decay_t<F>` and let [^fd] be an lvalue of type [^FD] constructed with
`forward<F>(f)`. Let [^Args][^__dotdotdot__] by the completion signature of
[^H] and let [^N] be [^sizeof][^__dotdotdot__(Args)]. Let [^['i]] be in the
range [half_open_range `0`,`N`] and let [^A[sub ['i]]] be the [^['i]]th type in
`Args`. Let [^a[sub ['i]]] be the [^['i]]th argument associated with [^A[sub
['i]]].]

[function_returns A completion token `t` of type `T`.]

[function_remarks The return type `T` satisfies the `Destructible` (C++Std
\[destructible\]) and `MoveConstructible` (C++Std \[moveconstructible\])
requirements.]

[function_block The object `h` of type `H` is an asynchronous provider with an
associated shared state (C++Std \[futures.state\]). The effect of [^h([^a[sub
['0]]], __dotdotdot__, [^a[sub ['N-1]]])] is to atomically store the result of
[^INVOKE(fd, forward<[^A[sub ['0]]]>([^a[sub ['0]]]), __dotdotdot__,
forward<[^A[sub ['N-1]]]>([^a[sub ['N-1]]]))] (C++Std \[func.require\]) in the
shared state and make the shared state ready. If `fd` exits via an exception
then that exception is atomically stored in the shared state and the shared
state is made ready.]

[function_block The implementation provides a partial specialization [^template
<class Result, class][^__dotdotdot__ Args> async_result<T,
Result(Args][^__dotdotdot__)>] such that:\n
[mdash] the nested typedef `completion_handler_type` is a type `H`;\n
[mdash] the nested typedef `return_type` is
[^future<result_of_t<FD(decay_t<Args>][^__dotdotdot__)>>]; and\n
[mdash] when an object `r1` of type [^async_result<T,
Result(Args][^__dotdotdot__)>] is constructed from `h`, the expression `r1.get()`
returns a future with the same shared state as `h`.]

[function_block For any executor type `E`, the associated object for the
associator `associated_executor<H, E>` is an executor where, for function
objects executed using the executor's `dispatch()`, `post()` or `defer()`
functions, any exception thrown is caught by a function object and stored in
the associated shared state.]

[endsect]

[section:use_future_t_result Partial class template specialization [^async_result] for [^use_future_t]]
[xrefid async.use.future.result]

  template<class ProtoAllocator, class Result, class... Args>
  class async_result<use_future_t<ProtoAllocator>, Result(Args...)>
  {
    typedef ``['see below]`` completion_handler_type;
    typedef ``['see below]`` return_type;

    explicit async_result(completion_handler_type& h);
    async_result(const async_result&) = delete;
    async_result& operator=(const async_result&) = delete;

    return_type get();
  };

Let `R` be the type `async_result<use_future_t<ProtoAllocator>, Result(Args...)>`.
Let `F` be the nested function object type `R::completion_handler_type`.

An object `t1` of type `F` is an asynchronous provider with an associated
shared state (C++Std [futures.state]). The type `F` provides `F::operator()`
such that the expression `t1(declval<Args>()...)` is well formed.

The implementation specializes `associated_executor` for `F`. For function
objects executed using the associated executor's `dispatch()`, `post()` or
`defer()` functions, any exception thrown is caught by the executor and stored
in the associated shared state.

For any executor type `E`, the associated object for the associator
`associated_executor<F, E>` is an executor where, for function objects executed
using the executor's `dispatch()`, `post()` or `defer()` functions, any
exception thrown by a function object is caught by the executor and stored in
the associated shared state.

When an object `r1` of type `R` is constructed from `t1`, the expression
`r1.get()` returns a future with the same shared state as `t1`.

The type of `R::return_type` and the effects of `F::operator()` are defined in
the table below. After establishing these effects, `F::operator()` makes the
shared state ready. In this table, [^N] is the value of `sizeof...(Args)`; let
[^['i]] be in the range [half_open_range `0`,`N`] and let [^T[sub ['i]]] be the
[^['i]]th type in `Args`; let [^U[sub ['i]]] be [^decay_t<T[sub ['i]]>] for
each type [^T[sub ['i]]] in `Args`; let [^A[sub ['i]]] be the deduced type of
the [^['i]]th argument to `F::operator()`; and let [^a[sub ['i]]] be the
[^['i]]th argument to `F::operator()`.

[table async_result<use_future_t<ProtoAllocator>, Result(Args...)> semantics
  [
    [[^N]]
    [[^U[sub ['0]]]]
    [`R::return_type`]
    [`F::operator()` effects]
  ]
  [
    [0]
    []
    [[^future<void>]]
    [None.]
  ]
  [
    [1]
    [`error_code`]
    [[^future<void>]]
    [If [^a[sub ['0]]] evaluates to `true`, atomically stores the exception
     pointer produced by [^make_exception_ptr(system_error(a[sub ['0]]))] in the
     shared state.]
  ]
  [
    [1]
    [`exception_ptr`]
    [[^future<void>]]
    [If [^a[sub ['0]]] is non-null, atomically stores the exception pointer
     [^a[sub ['0]]] in the shared state.]
  ]
  [
    [1]
    [all other types]
    [[^future<U[sub ['0]]>]]
    [Atomically stores [^forward<A[sub ['0]]>(a[sub ['0]])] in the shared
     state.]
  ]
  [
    [2]
    [`error_code`]
    [[^future<U[sub ['1]]>]]
    [If [^a[sub ['0]]] evaluates to `true`, atomically stores the exception
     pointer produced by [^make_exception_ptr(system_error(a[sub ['0]]))] in the
     shared state; otherwise, atomically stores [^forward<A[sub ['1]]>(a[sub
     ['1]])] in the shared state.]
  ]
  [
    [2]
    [`exception_ptr`]
    [[^future<U[sub ['1]]>]]
    [If [^a[sub ['0]]] is non-null, atomically stores the exception pointer in
     the shared state; otherwise, atomically stores [^forward<A[sub ['1]]>(a[sub
     ['1]])] in the shared state.]
  ]
  [
    [2]
    [all other types]
    [[^future<tuple<U[sub ['0]],U[sub ['1]]>>]]
    [Atomically stores [^forward_as_tuple<A[sub ['0]],A[sub ['1]]>(a[sub
     ['0]],a[sub ['1]])] in the shared state.]
  ]
  [
    [>2]
    [`error_code`]
    [[^future<tuple<U[sub ['1]],...,U[sub ['N-1]]>>]]
    [If [^a[sub ['0]]] evaluates to `true`, atomically stores the exception
     pointer produced by [^make_exception_ptr(system_error(a[sub ['0]]))] in the
     shared state; otherwise, atomically stores [^forward_as_tuple<A[sub
     ['1]],...,A[sub ['N-1]])>(a[sub ['1]],...,a[sub ['N-1]])] in the shared
     state.]
  ]
  [
    [>2]
    [`exception_ptr`]
    [[^future<tuple<U[sub ['1]],...,U[sub ['N-1]]>>]]
    [If [^a[sub ['0]]] is non-null, atomically stores the exception pointer in
     the shared state; otherwise, atomically stores [^forward_as_tuple<A[sub
     ['1]],...,A[sub ['N-1]]>(a[sub ['1]],...,a[sub ['N-1]])] in the shared
     state.]
  ]
  [
    [>2]
    [all other types]
    [[^future<tuple<U[sub ['0]],...,U[sub ['N-1]]>>]]
    [Atomically stores [^forward_as_tuple<A[sub ['0]],...,A[sub ['N-1]]>(a[sub
     ['0]],...,a[sub ['N-1]])] in the shared state.]
  ]
]

[endsect]

[endsect]
