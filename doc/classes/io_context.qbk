[section:io_context Class [^io_context]]
[xrefid io_context.io_context]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class io_context : public execution_context
    {
    public:
      // types:

      class ``[link classes.io_context__executor_type executor_type]``;

      // construct / copy / destroy:

      io_context();
      explicit io_context(int concurrency_hint);
      io_context(const io_context&) = delete;
      io_context& operator=(const io_context&) = delete;

      // io_context operations:

      executor_type get_executor() noexcept;

      size_t run();
      template<class Rep, class Period>
        size_t run_for(const chrono::duration<Rep, Period>& rel_time);
      template<class Clock, class Duration>
        size_t run_until(const chrono::time_point<Clock, Duration>& abs_time);

      size_t run_one();
      template<class Rep, class Period>
        size_t run_one_for(const chrono::duration<Rep, Period>& rel_time);
      template<class Clock, class Duration>
        size_t run_one_until(const chrono::time_point<Clock, Duration>& abs_time);

      size_t poll();

      size_t poll_one();

      void stop();

      bool stopped() const noexcept;

      void restart();
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

The class `io_context` satisfies the [link requirements.execution_context
ExecutionContext type requirements].

The `io_context` functions `run`, `run_for`, `run_until`, `run_one`,
`run_one_for`, `run_one_until`, `poll`, or `poll_one` must be called for the
`io_context` to perform [link definitions.asynchronous_operation asynchronous
operations] on behalf of a C++ program. Notification that an asynchronous
operation has completed is delivered by execution of the associated handler
function object, as determined by the requirements for [link
requirements.asynchronous_operations asynchronous operations].

For an object of type `io_context`, ['outstanding work] is defined as the sum
of:

[mdash] the total number of calls to the `on_work_started` function, less the
total number of calls to the `on_work_finished` function, to any executor of
the `io_context`.

[mdash] the number of function objects that have been added to the `io_context`
via any executor of the `io_context`, but not yet executed; and

[mdash] the number of function objects that are currently being executed by the
`io_context`.

If at any time the outstanding work falls to `0`, the `io_context` is stopped
as if by `stop()`.

The `io_context` member functions `get_executor`, `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll`, `poll_one`,
`stop`, and `stopped`, and the `io_context::executor_type` copy constructors,
member functions and comparison operators, shall not introduce data races as a
result of concurrent calls to those functions from different threads of
execution. [inline_note The `restart` member function is excluded from these
thread safety requirements.]

[section [^io_context] members]
[xrefid io_context.io_context.members]

  io_context();
  explicit io_context(int concurrency_hint);

[function_effects Creates an object of class `io_context`.]

[function_remarks The `concurrency_hint` parameter is a suggestion to the
implementation on the number of threads that should process asynchronous
operations and execute function objects.]

  executor_type get_executor() noexcept;

[function_returns An executor that may be used for submitting function objects
to the `io_context`.]

  size_t run();

[function_requires Must not be called from a thread that is currently calling
one of `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll`, or `poll_one`.]

[function_effects Equivalent to:
``
  size_t n = 0;
  while (run_one())
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  template<class Rep, class Period>
    size_t run_for(const chrono::duration<Rep, Period>& rel_time);

[function_effects Equivalent to:
``
  return run_until(chrono::steady_clock::now() + rel_time);
``]

  template<class Clock, class Duration>
    size_t run_until(const chrono::time_point<Clock, Duration>& abs_time);

[function_effects Equivalent to:
``
  size_t n = 0;
  while (run_one_until(abs_time))
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  size_t run_one();

[function_requires Must not be called from a thread that is currently calling
one of `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll`, or `poll_one`.]

[function_effects If the `io_context` object has no outstanding work, performs
`stop()`. Otherwise, blocks while the io_context has outstanding work, or until
the `io_context` is stopped, or until one function object has been executed.]

[function_block If an executed function object throws an exception, the
exception propagates to the caller of `run_one()`. The `io_context` state is as
if the function object had returned normally.]

[function_returns `1` if a function object was executed, otherwise `0`.]

[function_notes This function may invoke additional function objects through
nested calls to the `io_context` executor's `dispatch` member function. These
do not count towards the return value.]

  template<class Rep, class Period>
    size_t run_one_for(const chrono::duration<Rep, Period>& rel_time);

[function_effects Equivalent to:
``
  return run_one_until(chrono::steady_clock::now() + rel_time);
``]

  template<class Clock, class Duration>
    size_t run_one_until(const chrono::time_point<Clock, Duration>& abs_time);

[function_effects If the `io_context` object has no outstanding work, performs
`stop()`. Otherwise, blocks while the io_context has outstanding work, or until
the expiration of the absolute timeout (C++ Std, \[thread.req.timing\])
specified by `abs_time`, or until the `io_context` is stopped, or until one
function object has been executed.]

[function_block If an executed function object throws an exception, the
exception propagates to the caller of `run_one()`. The `io_context` state is as
if the function object had returned normally.]

[function_returns `1` if a function object was executed, otherwise `0`.]

[function_notes This function may invoke additional function objects through
nested calls to the `io_context` executor's `dispatch` member function. These
do not count towards the return value.]

  size_t poll();

[function_effects Equivalent to:
``
  size_t n = 0;
  while (poll_one())
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  size_t poll_one();

[function_effects If the `io_context` object has no outstanding work, performs
`stop()`. Otherwise, if there is a function object ready for immediate
execution, executes it.]

[function_block If an executed function object throws an exception, the
exception propagates to the caller of `poll_one()`. The `io_context` state is
as if the function object had returned normally.]

[function_returns `1` if a function object was invoked, otherwise `0`.]

[function_notes This function may invoke additional function objects through
nested calls to the `io_context` executor's `dispatch` member function. These
do not count towards the return value.]

  void stop();

[function_effects Stops the `io_context`. Concurrent calls to `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one`
will end as soon as possible. If a call to `run`, `run_for`, `run_until`,
`run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one` is currently
executing a function object, the call will end only after completion of that
function object. The call to `stop()` returns without waiting for concurrent
calls to `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll` or `poll_one` to complete.]

[function_postconditions `stopped() == true`.]

[function_note When `stopped() == true`, subsequent calls to `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one`
will exit immediately with a return value of `0`, without executing any
function objects. An `io_context` remains in the stopped state until a call to
`restart()`.]

  bool stopped() const noexcept;

[function_returns `true` if the `io_context` is stopped.]

  void restart();

[function_postconditions `stopped() == false`.]

[endsect]

[endsect]
