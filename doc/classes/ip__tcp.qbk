[section:ip__tcp Class [^ip::tcp]]
[xrefid internet.tcp]

The `tcp` class meets the requirements for an [link
requirements.internet_protocol `InternetProtocol`].

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class tcp
          {
          public:
            // types:
            typedef basic_endpoint<tcp> endpoint;
            typedef basic_resolver<tcp> resolver;
            typedef basic_stream_socket<tcp> socket;
            typedef basic_socket_acceptor<tcp> acceptor;
            typedef basic_socket_iostream<tcp> iostream;
            class ``[link classes.ip__tcp__no_delay no\_delay]``;

            // static members:
            static constexpr tcp v4() noexcept;
            static constexpr tcp v6() noexcept;

            tcp() = delete;
          };

          // tcp comparisons:
          constexpr bool operator==(const tcp& a, const tcp& b) noexcept;
          constexpr bool operator!=(const tcp& a, const tcp& b) noexcept;

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Extensible implementations provide the following member functions:

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class tcp
          {
          public:
            constexpr int family() const noexcept;
            constexpr int type() const noexcept;
            constexpr int protocol() const noexcept;
            ``['// remainder unchanged]``
          };

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The return values for these member functions are listed in the table below.

[table Behavior of extensible implementations
  [[value] [`family()`] [`type()`] [`protocol()`]]
  [
    [`tcp::v4()`]
    [`AF_INET`]
    [`SOCK_DGRAM`]
    [`IPPROTO_UDP`]
  ]
  [
    [`tcp::v6()`]
    [`AF_INET6`]
    [`SOCK_DGRAM`]
    [`IPPROTO_UDP`]
  ]
]

[std_note The constants `AF_INET`, `AF_INET6` and `SOCK_STREAM` are defined in
the __POSIX__ header file __sys_socket_h__. The constant `IPPROTO_TCP` is
defined in the __POSIX__ header file __netinet_in_h__.]

[section [^ip::tcp] comparisons]
[xrefid internet.tcp.comparisons]

  constexpr bool operator==(const tcp& a, const tcp& b) noexcept;

[function_returns A boolean indicating whether two objects of class `tcp` are
equal, such that the expression `tcp::v4() == tcp::v4()` is `true`, the
expression `tcp::v6() == tcp::v6()` is `true`, and the expression `tcp::v4() ==
tcp::v6()` is `false`.]

  constexpr bool operator!=(const tcp& a, const tcp& b) noexcept;

[function_returns `!(a == b)`.]

[endsect]

[endsect]
