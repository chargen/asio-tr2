[section:socket_base__linger Class [^socket_base::linger]]
[xrefid socket.opt.linger]

The `linger` class represents a socket option for controlling the behavior
when a socket is closed and unsent data is present.

`linger` satisfies the requirements for `CopyConstructible`, `Assignable`,
[link requirements.gettable_socket_option `GettableSocketOption`], and [link
requirements.settable_socket_option `SettableSocketOption`].

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class socket_base::linger
        {
        public:
          // constructors:
          linger();
          linger(bool e, int t);

          // members:
          bool enabled() const;
          void enabled(bool e);

          int timeout() const;
          void timeout(int t);
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Extensible implementations shall provide the following member functions:

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class socket_base::linger
        {
        public:
          template<class Protocol> int level(const Protocol& p) const;
          template<class Protocol> int name(const Protocol& p) const;
          template<class Protocol> ``['unspecified]``* data(const Protocol& p);
          template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;
          template<class Protocol> size_t size(const Protocol& p) const;
          template<class Protocol> void resize(const Protocol& p, size_t s);
          ``['[*// remainder unchanged]]``
        private:
  ``//      ::linger value_;  ['[*exposition only]]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^socket_base::linger] constructors]
[xrefid socket.opt.linger.cons]

  linger();

[function_postconditions `!enabled() && timeout() == 0`.]

  linger(bool e, int t);

[function_postconditions `enabled() == e && timeout() == t`.]

[endsect]

[section [^socket_base::linger] members]
[xrefid socket.opt.linger.members]

  bool enabled() const;

[function_returns The stored socket option value for whether linger on close is
enabled. For extensible implementations, returns `value_.l_onoff != 0`.]

  void enabled(bool e);

[function_postconditions `enabled() == e`.]

  int timeout() const;

[function_returns The stored socket option value for the linger timeout, in
seconds. For extensible implementations, returns `value_.l_linger`.]

  void timeout(int t);

[function_postconditions `timeout() == t`.]

[endsect]

[section [^socket_base::linger] members (extensible implementations)]
[xrefid socket.opt.linger.extensible]

  template<class Protocol> int level(const Protocol& p) const;

[function_returns `SOL_SOCKET`.]

[function_note The constant `SOL_SOCKET` is defined in the __POSIX__ header
file __sys_socket_h__.]

  template<class Protocol> int name(const Protocol& p) const;

[function_returns `SO_LINGER`.]

[function_note The constant `SO_LINGER` is defined in the __POSIX__ header file
__sys_socket_h__.]

  template<class Protocol> ``['unspecified]``* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> size_t size(const Protocol& p) const;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s != sizeof(value_)`.]
  
[endsect]

[endsect]
