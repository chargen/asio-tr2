[section:socket_base__linger Class [^socket_base::linger]]
[xrefid socket.opt.linger]

The `linger` class represents a socket option for controlling the behavior
when a socket is closed and unsent data is present.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class socket_base::linger
    {
    public:
      // constructors:
      linger() noexcept;
      linger(bool e, chrono::seconds t) noexcept;

      // members:
      bool enabled() const noexcept;
      void enabled(bool e) noexcept;

      chrono::seconds timeout() const noexcept;
      void timeout(chrono::seconds t) noexcept;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

`linger` satisfies the requirements of `Destructible` (C++Std [destructible]),
`DefaultConstructible` (C++Std [defaultconstructible]), `CopyConstructible`
(C++Std [copyconstructible]), `CopyAssignable` (C++Std [copyassignable]), [link
requirements.gettable_socket_option `GettableSocketOption`], and [link
requirements.settable_socket_option `SettableSocketOption`].

Extensible implementations provide the following member functions:

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class socket_base::linger
    {
    public:
      template<class Protocol> int level(const Protocol& p) const noexcept;
      template<class Protocol> int name(const Protocol& p) const noexcept;
      template<class Protocol> void data(const Protocol& p) noexcept;
      template<class Protocol> const void* data(const Protocol& p) const noexcept;
      template<class Protocol> size_t size(const Protocol& p) const noexcept;
      template<class Protocol> void resize(const Protocol& p, size_t s);
      // ``['remainder unchanged]``
    private:
      ::linger value_;  // ``['exposition only]``
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

  linger() noexcept;

[function_postconditions `!enabled() && timeout() == chrono::seconds(0)`.]

  linger(bool e, chrono::seconds t) noexcept;

[function_postconditions `enabled() == e && timeout() == t`.]

  bool enabled() const noexcept;

[function_returns `value_.l_onoff != 0`.]

  void enabled(bool e) noexcept;

[function_postconditions `enabled() == e`.]

  chrono::seconds timeout() const noexcept;

[function_returns `chrono::seconds(value_.l_linger)`.]

  void timeout(chrono::seconds t) noexcept;

[function_postconditions `timeout() == t`.]

  template<class Protocol> int level(const Protocol& p) const noexcept;

[function_returns `SOL_SOCKET`.]

  template<class Protocol> int name(const Protocol& p) const noexcept;

[function_returns `SO_LINGER`.]

  template<class Protocol> void* data(const Protocol& p) const noexcept;

[function_returns `std::addressof(value_)`.]

  template<class Protocol> const void* data(const Protocol& p) const noexcept;

[function_returns `std::addressof(value_)`.]

  template<class Protocol> size_t size(const Protocol& p) const noexcept;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s != sizeof(value_)`.]
  
[endsect]
