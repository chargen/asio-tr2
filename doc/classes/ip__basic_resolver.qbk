[section:ip__basic_resolver Class template [^ip::basic_resolver]]
[xrefid internet.resolver]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          template<class InternetProtocol>
          class basic_resolver
          {
          public:
            // types:

            typedef io_service::executor_type executor_type;
            typedef InternetProtocol protocol_type;
            typedef typename InternetProtocol::endpoint endpoint_type;
            typedef basic_resolver_query<InternetProtocol> query;
            typedef basic_resolver_iterator<InternetProtocol> iterator;

            // construct / copy / destroy:

            explicit basic_resolver(io_service& ios);
            basic_resolver(const basic_resolver&) = delete;
            basic_resolver(basic_resolver&& rhs) noexcept;

            ~basic_resolver();

            basic_resolver& operator=(const basic_resolver&) = delete;
            basic_resolver& operator=(basic_resolver&& rhs);

            // basic_resolver operations:

            executor_type get_executor() noexcept;

            void cancel();

            iterator resolve(const query& q);
            iterator resolve(const query& q, error_code& ec);

            template<class CompletionToken>
              __initfn_result_type__ async_resolve(const query& q, CompletionToken&& token);

            iterator resolve(const endpoint_type& e);
            iterator resolve(const endpoint_type& e, error_code& ec);

            template<class CompletionToken>
              __initfn_result_type__ async_resolve(const endpoint_type& e,
                                 CompletionToken&& token);
          };

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^ip::basic_resolver] constructors]
[xrefid internet.resolver.cons]

  explicit basic_resolver(io_service& ios);

[function_postconditions `get_executor() == ios.get_executor()`.]

  basic_resolver(basic_resolver&& rhs) noexcept;

[function_effects Move constructs an object of class
`basic_resolver<InternetProtocol>` that refers to the state originally
represented by `rhs`.]

[function_postconditions `get_executor() == rhs.get_executor()`.]

[endsect]

[section [^ip::basic_resolver] destructor]
[xrefid internet.resolver.dtor]

  ~basic_resolver();

[function_effects Destroys the resolver, cancelling any asynchronous operations
associated with the resolver as if by calling `cancel()`.]

[endsect]

[section [^ip::basic_resolver] assignment]
[xrefid internet.resolver.assign]

  basic_resolver& operator=(basic_resolver&& rhs);

[function_effects Cancels any outstanding asynchronous operations associated
with `*this` as if by calling `cancel()`, then moves into `*this` the state
originally represented by `rhs`.]

[function_postconditions `get_executor() == ios.get_executor()`.]

[function_returns `*this`.]

[endsect]

[section [^ip::basic_resolver] operations]
[xrefid internet.resolver.ops]

  executor_type& get_executor() noexcept;

[function_returns The associated executor.]

  void cancel();

[function_effects Causes any outstanding asynchronous resolve operations to
complete as soon as possible. Completion handlers for cancelled operations
shall be passed an error code `ec` such that `ec == errc::operation_canceled`
yields `true`.]

  iterator resolve(const query& q);
  iterator resolve(const query& q, error_code& ec);

[function_effects Translates a query into a sequence of
`basic_resolver_entry<InternetProtocol>` objects, as if by __POSIX__
__getaddrinfo__.]

[function_returns On success, an iterator object `i` such that the condition `i
!= iterator()` yields `true`. Otherwise `iterator()`.]

  template<class CompletionToken>
    __initfn_result_type__ async_resolve(const query& q, CompletionToken&& token);

[function_completion_signature `void(error_code ec, iterator i)`.]

[function_effects Initiates an asynchronous operation to translate a query into
a sequence of `basic_resolver_entry<InternetProtocol>` objects, as if by
__POSIX__ __getaddrinfo__. If the operation completes successfully, the handler
is passed an iterator object `i` such that the condition `i != iterator()`
yields `true`. Otherwise, `i` is `iterator()`.]

  iterator resolve(const endpoint_type& e);
  iterator resolve(const endpoint_type& e, error_code& ec);

[function_effects Translates an endpoint into a sequence of zero or one
`basic_resolver_entry<InternetProtocol>` objects, as if by __POSIX__
__getnameinfo__.]

[function_returns On success, an iterator object `i` such that the condition `i
!= iterator()` yields `true`. Otherwise `iterator()`.]

  template<class CompletionToken>
    __initfn_result_type__ async_resolve(const endpoint_type& e,
                       CompletionToken&& token);

[function_completion_signature `void(error_code ec, iterator i)`.]

[function_effects Initiates an asynchronous operation to translate an endpoint
into a sequence of zero or one `basic_resolver_entry<InternetProtocol>`
objects, as if by __POSIX__ __getnameinfo__. If the operation completes
successfully, the handler is passed an iterator object `i` such that the
condition `i != iterator()` yields `true`. Otherwise, `i` is `iterator()`.]

[endsect]

[endsect]
