[section:execution_context__service Class [^execution_context::service]]
[xrefid async.exec.ctx.svc]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class execution_context::service
    {
    protected:
      // construct / copy / destroy:

      explicit service(execution_context& owner);
      service(const service&) = delete;
      service& operator=(const service&) = delete;
      virtual ~service();

      // service observers:

      execution_context& context() noexcept;

    private:
      // service operations:

      virtual void shutdown() = 0;
      virtual void notify_fork(fork_event e) {}

      execution_context& context_; // ``['exposition only]``
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^execution_context::service] members]
[xrefid async.exec.ctx.svc.members]

  explicit service(execution_context& owner);

[function_postconditions `std::addressof(context_) == std::addressof(owner)`.]

  execution_context& context() noexcept;

[function_returns `context_`.]

[endsect]

[endsect]
