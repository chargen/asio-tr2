[section:executor_work Class template [^executor_work]]
[xrefid async.exec.work]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Executor>
        class executor_work
        {
        public:
          // types:

          typedef Executor executor_type;

          // construct / copy / destroy:

          explicit executor_work(const executor_type& ex) noexcept;
          executor_work(const executor_work& other) noexcept;
          executor_work(executor_work&& other) noexcept;

          executor_work& operator=(const executor_work&) = delete;

          ~executor_work();

          // executor work observers:

          executor_type get_executor() const noexcept;
          bool owns_work() const noexcept;

          // executor work modifiers:

          void reset() noexcept;

        private:
          Executor ex_; // ``['exposition only]``
          bool owns_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^executor_work] members]
[xrefid async.exec.work.members]

  explicit executor_work(const executor_type& ex) noexcept;

[function_effects Constructs an object of class `executor_work`, initializing
`ex_` with `ex`, and then performing `ex_.on_work_started()`.]

[function_postconditions `ex == ex_` and `owns_ == true`.]

  executor_work(const executor_work& other) noexcept;

[function_effects Constructs an object of class `executor_work`, initializing
`ex_` with `other.ex_`. If `other.owns_ == true`, performs
`ex_.on_work_started()`.]

[function_postconditions `ex_ == other.ex_` and `owns_ == other.owns_`.]

  executor_work(executor_work&& other) noexcept;

[function_effects Constructs an object of class `executor_work`, initializing
`ex_` with `std::move(other.ex_)` and `owns_` with `other.owns_`, and sets
`other.owns_` to false.]

  ~executor_work();

[function_effects If `owns_` is true, performs `ex_.on_work_finished()`.]

  executor_type get_executor() const noexcept;

[function_returns `ex_`.]

  bool owns_work() const noexcept;

[function_returns `owns_`.]

  void reset() noexcept;

[function_effects If `owns_` is true, performs `ex_.on_work_finished()`.]

[function_postconditions `owns_ == false`.]

[endsect]

[endsect]
