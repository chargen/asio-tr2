[section:execution_context Class [^execution_context]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class execution_context
        {
        public:
          class ``[link classes.execution_context__service service]``;

          // construct / copy / destroy:

          execution_context();
          execution_context(const execution_context&) = delete;
          execution_context& operator=(const execution_context&) = delete;
          virtual ~execution_context();

          // execution context operations:

          void notify_fork(fork_event e);

        protected:

          // execution context protected operations:

          void shutdown_context();
          void destroy_context();
        };

        // service access:
        template<class Service> Service& use_service(execution_context& ctx);
        template<class Service, class... Args> Service&
          make_service(execution_context& ctx, Args&&... args);
        template<class Service> bool has_service(execution_context& ctx) noexcept;
        class service_already_exists : public logic_error { ... };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Class `execution_context` implements an extensible, type-safe, polymorphic set of
services, indexed by service /type/.

Access to the services of an `execution_context` is via three function
templates, `use_service<>`, `make_service<>` and `has_service<>`.

In a call to `use_service<Service>()`, the type argument chooses a service,
making available all members of the named type. If the service is not present
in an `execution_context`, an object of type `Service` is created and added to
the `execution_context`. A C++ program can check if an `execution_context`
implements a particular service with the function template
`has_service<Service>()`.

Service objects may be explicitly added to an `execution_context` using the
function template `make_service<Service>()`. If the service is already present,
the `service_already_exists` exception is thrown.

Once a service reference is obtained from an `execution_context` object by
calling `use_service<>`, that reference remains usable until a call to
`destroy_context()`.

[section [^execution_context] constructor]

  execution_context();

[function_effects Creates an object of class `execution_context`.]

[endsect]

[section [^execution_context] destructor]

  ~execution_context();

[function_effects Destroys an object of class `execution_context`. Performs
`shutdown_context()` followed by `destroy_context()`.]

[endsect]

[section [^execution_context] operations]

  void notify_fork(fork_event e);

[function_effects For each service object `svc` in the set:\n
[mdash] If `e == fork_event::prepare`, performs `svc->notify_fork(e)` in
reverse order of the beginning of service object lifetime (C++ Std,
\[basic.life\]).\n
[mdash] Otherwise, performs `svc->notify_fork(e)` in order of the beginning of
service object lifetime.]

[endsect]

[section [^execution_context] protected operations]

  void shutdown_context();

[function_effects For each service object `svc` in the `execution_context` set,
in reverse order of the beginning of service object lifetime (C++ Std,
\[basic.life\]), performs `svc->shutdown_service()`.]

[function_note `shutdown_context` is an idempotent operation.]

  void destroy_context();

[function_effects Destroys each service object in the `execution_context` set,
in reverse order of the beginning of service object lifetime (C++ Std,
\[basic.life\]).]

[function_note `destroy_context` is an idempotent operation.]

[endsect]

[section [^execution_context] globals]

The functions `use_service`, `make_service` and `has_service` shall not
introduce data races as a result of concurrent calls to those functions from
different threads.

  template<class Service> Service& use_service(execution_context& ctx);

[function_block Let `Key` be `Service::key_type` if the nested typedef
`Service::key_type` exists; otherwise, let `Key` be `Service`.]

[function_requires `Service` is a service class that is publicly and
unambiguously derived from [link classes.execution_context__service
`execution_context::service`]. If the nested typedef `Service::key_type`
exists, `Service` is the same type as `Service::key_type`, or `Service` is
publicly and unambiguously derived from `Service::key_type`, and
`Service::key_type` is publicly and unambiguously derived from
`execution_context::service`.]

[function_effects If an object of type `Key` does not already exist in the
`execution_context` set identified by `ctx`, creates an object of type
`Service`, initializing it with `Service(ctx)`, and adds it to the set.]

[function_returns A reference to the corresponding service of `ctx`.]

[function_notes The reference returned remains valid until a call to
`destroy_context`.]

  template<class Service, class... Args> Service&
    make_service(execution_context& ctx, Args&&... args);

[function_block Let `Key` be `Service::key_type` if the nested typedef
`Service::key_type` exists; otherwise, let `Key` be `Service`.]

[function_requires `Service` is a service class that is publicly and
unambiguously derived from [link classes.execution_context__service
`execution_context::service`]. If the nested typedef `Service::key_type`
exists, `Service` is the same type as `Service::key_type`, or `Service` is
publicly and unambiguously derived from `Service::key_type`, and
`Service::key_type` is publicly and unambiguously derived from
`execution_context::service`. A service object of type `Key` does not already
exist in the `execution_context` set identified by `ctx`.]

[function_effects Creates an object of type `Service`, initializing it with
`Service(ctx, forward<Args>(args)__dotdotdot__)`, and adds it to the
`execution_context` set identified by `ctx`.]

[function_throws `service_already_exists` if a corresponding service object of
type `Key` is already present in the set.]

[function_notes The reference returned remains valid until a call to
`destroy_context`.]

  template<class Service> bool has_service(execution_context& ctx) noexcept;

[function_block Let `Key` be `Service::key_type` if the nested typedef
`Service::key_type` exists; otherwise, let `Key` be `Service`.]

[function_requires `Service` is a service class that is publicly and
unambiguously derived from [link classes.execution_context__service
`execution_context::service`]. If the nested typedef `Service::key_type`
exists, `Service` is the same type as `Service::key_type`, or `Service` is
publicly and unambiguously derived from `Service::key_type`, and
`Service::key_type` is publicly and unambiguously derived from
`execution_context::service`.]

[function_returns If an object of type `Key` is present in `ctx`, `true`;
otherwise, `false`.]

[endsect]

[endsect]
