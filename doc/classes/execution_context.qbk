[section:execution_context Class [^execution_context]]
[xrefid async.exec.ctx]

Class `execution_context` implements an extensible, type-safe, polymorphic set of
services, indexed by service type.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class execution_context
    {
    public:
      class ``[link classes.execution_context__service service]``;

      // construct / copy / destroy:

      execution_context();
      execution_context(const execution_context&) = delete;
      execution_context& operator=(const execution_context&) = delete;
      virtual ~execution_context();

      // execution context operations:

      void notify_fork(fork_event e);

    protected:

      // execution context protected operations:

      void shutdown();
      void destroy();
    };

    // service access:
    template<class Service> typename Service::key_type&
      use_service(execution_context& ctx);
    template<class Service, class... Args> Service&
      make_service(execution_context& ctx, Args&&... args);
    template<class Service> bool has_service(const execution_context& ctx) noexcept;
    class service_already_exists : public logic_error { };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Access to the services of an `execution_context` is via three function
templates, `use_service<>`, `make_service<>` and `has_service<>`.

In a call to `use_service<Service>()`, the type argument chooses a service. If
the service is not present in an `execution_context`, an object of type
`Service` is created and added to the `execution_context`. A program can check
if an `execution_context` implements a particular service with the function
template `has_service<Service>()`.

Service objects may be explicitly added to an `execution_context` using the
function template `make_service<Service>()`. If the service is already present,
`make_service` exits via an exception of type `service_already_exists`.

Once a service reference is obtained from an `execution_context` object by
calling `use_service<>`, that reference remains usable until a call to
`destroy()`.

[section [^execution_context] constructor]
[xrefid async.exec.ctx.cons]

  execution_context();

[function_effects Creates an object of class `execution_context` which contains
no services. [inline_note An implementation might preload service of internal
service types for its own use.]]

[endsect]

[section [^execution_context] destructor]
[xrefid async.exec.ctx.dtor]

  ~execution_context();

[function_effects Destroys an object of class `execution_context`. Performs
`shutdown()` followed by `destroy()`.]

[endsect]

[section [^execution_context] operations]
[xrefid async.exec.ctx.ops]

  void notify_fork(fork_event e);

[function_effects For each service object `svc` in the set:\n
[mdash] If `e == fork_event::prepare`, performs `svc->notify_fork(e)` in
reverse order of addition to the set.\n
[mdash] Otherwise, performs `svc->notify_fork(e)` in order of addition to the
set.]

[endsect]

[section [^execution_context] protected operations]
[xrefid async.exec.ctx.protected]

  void shutdown();

[function_effects For each service object `svc` in the `execution_context` set,
in reverse order of addition to the set, performs `svc->shutdown()`. For each
service in the set, `svc->shutdown()` is called only once irrespective of the
number of calls to `shutdown` on the `execution_context`.]

  void destroy();

[function_effects Destroys each service object in the `execution_context` set,
and removes it from the set, in reverse order of addition to the set.

[endsect]

[section [^execution_context] globals]
[xrefid async.exec.ctx.globals]

The functions `use_service`, `make_service`, and `has_service` shall not
introduce data races as a result of concurrent calls to those functions from
different threads.

  template<class Service> typename Service::key_type&
    use_service(execution_context& ctx);

[function_effects If an object of type `Service::key_type` does not already
exist in the `execution_context` set identified by `ctx`, creates an object of
type `Service`, initialized as `Service(ctx)`, and adds it to the set.]

[function_returns A reference to the corresponding service of `ctx`.]

[function_notes The reference returned remains valid until a call to
`destroy`.]

  template<class Service, class... Args> Service&
    make_service(execution_context& ctx, Args&&... args);

[function_requires A service object of type `Service::key_type` does not
already exist in the `execution_context` set identified by `ctx`.]

[function_effects Creates an object of type `Service`, initialized as
`Service(ctx, forward<Args>(args)__dotdotdot__)`, and adds it to the
`execution_context` set identified by `ctx`.]

[function_throws `service_already_exists` if a corresponding service object of
type `Key` is already present in the set.]

[function_notes The reference returned remains valid until a call to
`destroy`.]

  template<class Service> bool has_service(const execution_context& ctx) noexcept;

[function_returns `true` if an object of type `Service::key_type` is present in
`ctx`, otherwise `false`.]

[endsect]

[endsect]
