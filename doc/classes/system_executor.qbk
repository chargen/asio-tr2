[section:system_executor Class [^system_executor]]
[xrefid async.system.exec]

Class `system_executor` represents a set of rules where function objects are
permitted to execute on any thread.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class system_executor
    {
    public:
      // constructors:

      system_executor() {}

      // executor operations:

      system_context& context() noexcept;

      void on_work_started() noexcept {}
      void on_work_finished() noexcept {}

      template<class Func, class ProtoAllocator>
        void dispatch(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void post(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void defer(Func&& f, const ProtoAllocator& a);
    };

    bool operator==(const system_executor&, const system_executor&) noexcept;
    bool operator!=(const system_executor&, const system_executor&) noexcept;

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Class `system_executor` satisfies the `Destructible` (C++Std [destructible]),
`DefaultConstructible` (C++Std [defaultconstructible]), and [link
requirements.executor `Executor`] type requirements.

To satisfy the `Executor` requirements for the `post` and `defer` member
functions, the system executor may create `thread` objects to run the submitted
function objects. These `thread` objects are collectively referred to as
['system threads].

[section [^system_executor] operations]
[xrefid async.system.exec.ops]

  system_context& context() noexcept;

[function_returns A reference to an object with static storage duration. All
calls to this function return references to the same object.]

  template<class Func, class ProtoAllocator>
    void dispatch(Func&& f, const ProtoAllocator& a);

[function_effects Equivalent to [^['DECAY_COPY]]`(forward<Func>(f))()` (C++Std
\[thread.decaycopy\]).]

  template<class Func, class ProtoAllocator>
    void post(Func&& f, const ProtoAllocator& a);
  template<class Func, class ProtoAllocator>
    void defer(Func&& f, const ProtoAllocator& a);

[function_effects If `context().stopped() == false`, creates an object `f1`
initialized with [^['DECAY_COPY]]`(forward<Func>(f))`, and calls `f1` as if in
a thread of execution represented by a `thread` object. Any exception
propagated from the execution of [^['DECAY_COPY]]`(forward<Func>(f))()` results
in a call to `std::terminate`.]

[endsect]

[section [^system_executor] comparisons]
[xrefid async.system.exec.comparisons]

  bool operator==(const system_executor&, const system_executor&) noexcept;

[function_returns `true`.]

  bool operator!=(const system_executor&, const system_executor&) noexcept;

[function_returns `false`.]

[endsect]

[endsect]
