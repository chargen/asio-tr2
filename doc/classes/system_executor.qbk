[section:system_executor Class [^system_executor]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class system_executor
        {
        public:

          // executor operations:

          execution_context& context() noexcept;

          void on_work_started() noexcept;
          void on_work_finished() noexcept;

          template<class Func, class Alloc>
            void dispatch(Func&& f, const Alloc& a);
          template<class Func, class Alloc>
            void post(Func&& f, const Alloc& a);
          template<class Func, class Alloc>
            void defer(Func&& f, const Alloc& a);
        };

        bool operator==(const system_executor&, const system_executor&) noexcept;
        bool operator!=(const system_executor&, const system_executor&) noexcept;

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Class `system_executor` is a `DefaultConstructible` type (C++ Std,
[defaultconstructible]) satisfying [link requirements.executor Executor
requirements]. It represents a set of rules where function objects are
permitted to execute on any thread.

To satisfy the executor requirements for the `post` and `defer` member
functions, the system executor may allocate `thread` objects to run the
submitted function objects. If `std::exit` is called, and there remain
unexecuted functions objects that have been submitted using `post` or `defer`,
the implementation shall discard these function objects without calling them.

[section [^system_executor] operations]

  execution_context& context() noexcept;

[function_returns A reference to a static-duration object of a type derived
from `execution_context`.]

  void on_work_started() noexcept;

[function_effects Does nothing.]

  void on_work_finished() noexcept;

[function_effects Does nothing.]

  template<class Func, class Alloc>
    void dispatch(Func&& f, const Alloc& a);

[function_effects Calls [^['DECAY_COPY]]`(forward<Func>(f))()`.]

  template<class Func, class Alloc>
    void post(Func&& f, const Alloc& a);

[function_effects Calls [^['DECAY_COPY]]`(forward<Func>(f))()` as if in a
thread of execution represented by a `thread` object, with the call to
`DECAY_COPY()` being evaluated in the thread that called `post`. Any exception
propagated from the execution of [^['DECAY_COPY]]`(forward<Func>(f))()` shall
result in a call to `std::terminate`.]

  template<class Func, class Alloc>
    void defer(Func&& f, const Alloc& a);

[function_effects Calls [^['DECAY_COPY]]`(forward<Func>(f))()` as if in a
thread of execution represented by a `thread` object, with the call to
`DECAY_COPY()` being evaluated in the thread that called `defer`. Any exception
propagated from the execution of [^['DECAY_COPY]]`(forward<Func>(f))()` shall
result in a call to `std::terminate`.]

[endsect]

[section [^system_executor] comparisons]

  bool operator==(const system_executor&, const system_executor&) noexcept;

[function_returns `true`.]

  bool operator!=(const system_executor&, const system_executor&) noexcept;

[function_returns `false`.]

[endsect]

[endsect]
