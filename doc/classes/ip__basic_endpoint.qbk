[section:ip__basic_endpoint Class template [^ip::basic_endpoint]]
[xrefid internet.endpoint]

An object of type `basic_endpoint<InternetProtocol>` represents a
protocol-specific endpoint, where an endpoint consists of an IP address and
port number. Endpoints may be used to identify sources and destinations for
socket connections and datagrams.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__
  namespace ip {

    template<class InternetProtocol>
    class basic_endpoint
    {
    public:
      // types:
      typedef InternetProtocol protocol_type;

      // constructors:
      constexpr basic_endpoint() noexcept;
      constexpr basic_endpoint(const protocol_type& proto,
                               port_type port_num) noexcept;
      constexpr basic_endpoint(const ip::address& addr,
                               port_type port_num) noexcept;

      // members:
      constexpr protocol_type protocol() const noexcept;
      constexpr ip::address address() const noexcept;
      void address(const ip::address& addr) noexcept;
      constexpr port_type port() const noexcept;
      void port(port_type port_num) noexcept;
    };

    // basic_endpoint comparisons:
    template<class InternetProtocol>
      constexpr bool operator==(const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;
    template<class InternetProtocol>
      constexpr bool operator!=(const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;
    template<class InternetProtocol>
      constexpr bool operator< (const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;
    template<class InternetProtocol>
      constexpr bool operator> (const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;
    template<class InternetProtocol>
      constexpr bool operator<=(const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;
    template<class InternetProtocol>
      constexpr bool operator>=(const basic_endpoint<InternetProtocol>& a,
                                const basic_endpoint<InternetProtocol>& b) noexcept;

    // basic_endpoint I/O:
    template<class CharT, class Traits, class InternetProtocol>
      basic_ostream<CharT, Traits>& operator<<(
        basic_ostream<CharT, Traits>& os,
        const basic_endpoint<InternetProtocol>& ep);

  } // namespace ip
  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Instances of the `basic_endpoint` class template meet the requirements
for an [link requirements.endpoint `Endpoint`].

Extensible implementations provide the following member functions:

  namespace std {
  namespace experimental {
  __begin_versioned_ns__
  namespace ip {

    template<class InternetProtocol>
    class basic_endpoint
    {
    public:
      void* data() noexcept;
      const void* data() const noexcept;
      constexpr size_t size() const noexcept;
      void resize(size_t s);
      constexpr size_t capacity() const noexcept;
      ``['// remainder unchanged]``
    private:
      union
      {
        sockaddr_in v4_;
        sockaddr_in6 v6_;
      } data_; // ``['exposition only]``
    };

  } // namespace ip
  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^ip::basic_endpoint] constructors]
[xrefid internet.endpoint.cons]

  constexpr basic_endpoint() noexcept;

[function_postconditions `this->address() == ip::address()` and `port() == 0`.]

  constexpr basic_endpoint(const protocol_type& proto,
                           port_type port_num) noexcept;

[function_requires `proto == protocol_type::v4() || proto ==
protocol_type::v6()`.]

[function_postconditions\n
[mdash] If `proto == protocol_type::v6()`, `this->address() ==
ip::address_v6()`; otherwise, `this->address() == ip::address_v4()`.\n
[mdash] `port() == port_num`.]

  constexpr basic_endpoint(const ip::address& addr,
                           port_type port_num) noexcept;

[function_postconditions `this->address() == addr` and `port() == port_num`.]

[endsect]

[section [^ip::basic_endpoint] members]
[xrefid internet.endpoint.members]

  constexpr protocol_type protocol() const noexcept;

[function_returns `protocol_type::v6()` if the expression
`this->address().is_v6()` is `true`, otherwise `protocol_type::v4()`.]

  constexpr ip::address address() const noexcept;

[function_returns The address associated with the endpoint.]

  void address(const ip::address& addr) noexcept;

[function_postconditions `this->address() == addr`.]

  constexpr port_type port() const noexcept;

[function_returns The port number associated with the endpoint.]

  void port(port_type port_num) noexcept;

[function_postconditions `port() == port_num`.]

[endsect]

[section [^ip::basic_endpoint] comparisons]
[xrefid internet.endpoint.comparisons]

  template<class InternetProtocol>
    constexpr bool operator==(const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `a.address() == b.address() && a.port() == b.port())`.]

  template<class InternetProtocol>
    constexpr bool operator!=(const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `!(a == b)`.]

  template<class InternetProtocol>
    constexpr bool operator< (const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `a.address() < b.address() || (!(b.address() < a.address())
&& a.port() < b.port())`.]

  template<class InternetProtocol>
    constexpr bool operator> (const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `b < a`.]

  template<class InternetProtocol>
    constexpr bool operator<=(const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `!(b < a)`.]

  template<class InternetProtocol>
    constexpr bool operator>=(const basic_endpoint<InternetProtocol>& a,
                              const basic_endpoint<InternetProtocol>& b) noexcept;

[function_returns `!(a < b)`.]

[endsect]

[section [^ip::basic_endpoint] I/O]
[xrefid internet.endpoint.io]

  template<class CharT, class Traits, class InternetProtocol>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os,
      const basic_endpoint<InternetProtocol>& ep);

[function_effects Outputs a representation of the endpoint to the stream, as if
it were implemented as follows:
``
  basic_ostringstream<CharT, Traits> ss;
  if (ep.protocol() == protocol_type::v6())
    ss << "[" << ep.address() << "]";
  else
    ss << ep.address();
  ss << ":" << ep.port();
  os << ss.str();
``]

[function_returns `os`.]

[std_note The representation of the endpoint when it contains an IP version 6
address is based on [RFC2732].]

[endsect]

[section [^ip::basic_endpoint] members (extensible implementations)]
[xrefid internet.endpoint.extensible]

  void* data() noexcept;

[function_returns `std::addressof(data_)`.]

  const void* data() const noexcept;

[function_returns `std::addressof(data_)`.]

  constexpr size_t size() const noexcept;

[function_returns `sizeof(sockaddr_in6)` if `protocol().family() == AF_INET6`,
otherwise `sizeof(sockaddr_in)`.]

  void resize(size_t s);

[function_throws `length_error` if the condition
`protocol().family() == AF_INET6 && s != sizeof(sockaddr_in6)` `||`
`protocol().family() == AF_INET4 && s != sizeof(sockaddr_in)` is `true`.]

  constexpr size_t capacity() const noexcept;

[function_returns `sizeof(data_)`.]

[endsect]

[endsect]
