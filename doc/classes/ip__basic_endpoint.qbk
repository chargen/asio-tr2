[section:ip__basic_endpoint Class template [^ip::basic_endpoint]]

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {

          template<class Protocol>
          class basic_endpoint
          {
          public:
            // types:
            typedef Protocol protocol_type;

            // constructors:
            basic_endpoint();
            basic_endpoint(const Protocol& proto, unsigned short port_num);
            basic_endpoint(const ip::address& addr, unsigned short port_num);

            // observers:
            Protocol protocol() const;
            ip::address address() const;
            unsigned short port() const;

            // modifiers:
            void address(const ip::address& addr);
            void port(unsigned short port_num);
          };

          // basic_endpoint comparisons:
          template<class Protocol>
            bool operator==(const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);
          template<class Protocol>
            bool operator!=(const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);
          template<class Protocol>
            bool operator< (const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);
          template<class Protocol>
            bool operator> (const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);
          template<class Protocol>
            bool operator<=(const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);
          template<class Protocol>
            bool operator>=(const basic_endpoint<Protocol>& a,
                            const basic_endpoint<Protocol>& b);

          // basic_endpoint I/O:
          template<class CharT, class Traits, class Protocol>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>& os,
              const basic_endpoint<Protocol>& ep);

        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

A __POSIX__ implementation must provide the following member functions:

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {

          template<class Protocol>
          class basic_endpoint
          {
          public:
            sockaddr* data();
            const sockaddr* data() const;
            size_t size() const;
            void resize(size_t size);
            size_t capacity() const;
            ``['[*// remainder unchanged]]``
          };

        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

[endsect]
