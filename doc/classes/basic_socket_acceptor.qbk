[section:basic_socket_acceptor Class template [^basic_socket_acceptor]]

  namespace std {
    namespace experimental {
      namespace network {

        template<class Protocol, class SocketAcceptorService>
        class basic_socket_acceptor :
          public basic_io_object<SocketAcceptorService>,
          public socket_base
        {
        public:
          // types:
          typedef typename SocketAcceptorService::native_type native_type;
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // constructors:
          explicit basic_socket_acceptor(io_service& ios);
          basic_socket_acceptor(io_service& ios, const protocol_type& protocol);
          basic_socket_acceptor(io_service& ios, const endpoint_type& endpoint,
                                bool reuse_addr = true);
          basic_socket_acceptor(io_service& ios, const protocol_type& protocol,
                                const native_type& native_acceptor);

          // members:
          native_type native();

          void open(const protocol_type& protocol = protocol_type());
          void open(const protocol_type& protocol, error_code& ec);

          void assign(const protocol_type& protocol,
                      const native_type& native_acceptor);
          void assign(const protocol_type& protocol,
                      const native_type& native_acceptor, error_code& ec);

          bool is_open() const;

          void close();
          void close(error_code& ec);

          void cancel();
          void cancel(error_code& ec);

          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option);
          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option,
                            error_code& ec);

          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option) const;
          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option,
                            error_code& ec) const;

          template<class IoControlCommand>
            void io_control(IoControlCommand& command);
          template<class IoControlCommand>
            void io_control(IoControlCommand& command, error_code& ec);

          void bind(const endpoint_type& endpoint);
          void bind(const endpoint_type& endpoint, error_code& ec);

          void listen(int backlog = max_connections);
          void listen(int backlog, error_code& ec);

          endpoint_type local_endpoint() const;
          endpoint_type local_endpoint(error_code& ec) const;

          template<class SocketService>
            void accept(basic_socket<Protocol, SocketService>& socket);
          template<class SocketService>
            void accept(basic_socket<Protocol, SocketService>& socket,
                        error_code& ec);

          template<class SocketService, class AcceptHandler>
            void async_accept(basic_socket<Protocol, SocketService>& socket,
                              AcceptHandler handler);

          template<class SocketService>
            void accept(basic_socket<Protocol, SocketService>& socket,
                        endpoint_type& endpoint);
          template<class SocketService>
            void accept(basic_socket<Protocol, SocketService>& socket,
                        endpoint_type& endpoint, error_code& ec);

          template<class SocketService, class AcceptHandler>
            void async_accept(basic_socket<Protocol, SocketService>& socket,
                              endpoint_type& endpoint, AcceptHandler handler);
        };

      } // namespace network
    } // namespace experimental
  } // namespace std

[section [^basic_socket_acceptor] constructors]

  explicit basic_socket_acceptor(io_service& ios);

[function_effects Constructs an object of class `basic_socket_acceptor<Protocol,
SocketAcceptorService>`, initialising the base class with
`basic_io_object(ios)`.]

  basic_socket_acceptor(io_service& ios, const protocol_type& protocol);

[function_effects Constructs an object of class `basic_socket_acceptor<Protocol,
SocketAcceptorService>`, initialising the base class with
`basic_io_object(ios)`, then opening the socket as if by calling:
``
  error_code ec;
  this->service.open(this->implementation, protocol, ec);
  if (ec) throw system_error(ec);
``]

  basic_socket_acceptor(io_service& ios, const endpoint_type& endpoint,
                        bool reuse_addr = true);

[function_effects Constructs an object of class `basic_socket_acceptor<Protocol,
SocketAcceptorService>`, initialising the base class with
`basic_io_object(ios)`, then opening and binding the socket and marking
it as ready to accept connections as if by calling:
``
  error_code ec;
  this->service.open(this->implementation, endpoint.protocol(), ec);
  if (ec) throw system_error(ec);
  if (reuse_addr)
  {
    this->service.set_option(this->implementation, reuse_address(true), ec);
    if (ec) throw system_error(ec);
  }
  this->service.bind(this->implementation, endpoint, ec);
  if (ec) throw system_error(ec);
  this->service.listen(this->implementation, max_connections, ec);
  if (ec) throw system_error(ec);
``]

[commentary [UNPV1] recommends setting `SO_REUSEADDR` by default in all TCP
servers, although there are some security implications in doing so.]

  basic_socket_acceptor(io_service& ios, const protocol_type& protocol,
                        const native_type& native_acceptor);

[function_effects Constructs an object of class `basic_socket_acceptor<Protocol,
SocketAcceptorService>`, initialising the base class with
`basic_io_object(ios)`, then assigning the existing native acceptor into
the object as if by calling:
``
  error_code ec;
  this->service.assign(this->implementation, protocol, native_acceptor, ec);
  if (ec) throw system_error(ec);
``]

[endsect]

[section [^basic_socket_acceptor] members]

  native_type native();

[function_returns `this->service.native(this->implementation)`.]

  void open(const protocol_type& protocol);
  void open(const protocol_type& protocol, error_code& ec);

[function_effects Calls `this->service.open(this->implementation, protocol,
ec)`.]

  void assign(const protocol_type& protocol,
              const native_type& native_acceptor);
  void assign(const protocol_type& protocol,
              const native_type& native_acceptor, error_code& ec);

[function_effects Calls `this->service.assign(this->implementation, protocol,
native_acceptor, ec)`.]

  bool is_open() const;

[function_returns `this->service.is_open(this->implementation)`.]

  void close();
  void close(error_code& ec);

[function_effects Calls `this->service.close(this->implementation, ec)`.]

  void cancel();
  void cancel(error_code& ec);

[function_effects Calls `this->service.cancel(this->implementation, ec)`.]

  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option);
  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option, error_code& ec);

[function_effects Calls `this->service.set_option(this->implementation, option,
ec)`.]

  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option);
  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option, error_code& ec);

[function_effects Calls `this->service.get_option(this->implementation, option,
ec)`.]

  template<class IoControlCommand>
    void io_control(IoControlCommand& command);
  template<class IoControlCommand>
    void io_control(IoControlCommand& command, error_code& ec);

[function_effects Calls `this->service.io_control(this->implementation,
command, ec)`.]

  void bind(const endpoint_type& endpoint);
  void bind(const endpoint_type& endpoint, error_code& ec);

[function_effects Calls `this->service.bind(this->implementation, endpoint,
ec)`.]

  void listen(int backlog = max_connections);
  void listen(int backlog, error_code& ec);

[function_effects Calls `this->service.listen(this->implementation, backlog,
ec)`.]

  endpoint_type local_endpoint() const;
  endpoint_type local_endpoint(error_code& ec) const;

[function_returns `this->service.local_endpoint(this->implementation, ec)`.]

  template<class SocketService>
    void accept(basic_socket<Protocol, SocketService>& socket);
  template<class SocketService>
    void accept(basic_socket<Protocol, SocketService>& socket, error_code& ec);

[function_effects Calls `this->service.accept(this->implementation, socket, 0,
ec)`.]

  template<class SocketService, class AcceptHandler>
    void async_accept(basic_socket<Protocol, SocketService>& socket,
                      AcceptHandler handler);

[function_effects Calls `this->service.async_accept(this->implementation,
socket, 0, handler)`.]

  template<class SocketService>
    void accept(basic_socket<Protocol, SocketService>& socket,
                endpoint_type& endpoint);
  template<class SocketService>
    void accept(basic_socket<Protocol, SocketService>& socket,
                endpoint_type& endpoint, error_code& ec);

[function_effects Calls `this->service.accept(this->implementation, socket,
&endpoint, ec)`.]

  template<class SocketService, class AcceptHandler>
    void async_accept(basic_socket<Protocol, SocketService>& socket,
                      endpoint_type& endpoint, AcceptHandler handler);

[function_effects Calls `this->service.async_accept(this->implementation,
socket, &endpoint, handler)`.]

[endsect]

[endsect]
