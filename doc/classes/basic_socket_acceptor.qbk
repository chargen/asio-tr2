[section:basic_socket_acceptor Class template [^basic_socket_acceptor]]
[xrefid socket.acceptor]

An object of class template `basic_socket_acceptor<AcceptableProtocol>` is used
to listen for, and queue, incoming socket connections. Socket objects that
represent the incoming connections are dequeued by calling `accept` or
`async_accept`.

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class AcceptableProtocol>
        class basic_socket_acceptor : public socket_base
        {
        public:
          // types:

          typedef io_service::executor_type executor_type;
          typedef ``['implementation defined]`` native_handle_type; // See ``[link requirements.native_handles native handles]``
          typedef AcceptableProtocol protocol_type;
          typedef typename protocol_type::endpoint endpoint_type;
          typedef typename protocol_type::socket socket_type;

          // construct / copy / destroy:

          explicit basic_socket_acceptor(io_service& ios);
          basic_socket_acceptor(io_service& ios, const protocol_type& protocol);
          basic_socket_acceptor(io_service& ios, const endpoint_type& endpoint,
                                bool reuse_addr = true);
          basic_socket_acceptor(io_service& ios, const protocol_type& protocol,
                                const native_handle_type& native_acceptor);
          basic_socket_acceptor(const basic_socket_acceptor&) = delete;
          basic_socket_acceptor(basic_socket_acceptor&& rhs);
          template<class OtherProtocol>
            basic_socket_acceptor(basic_socket_acceptor<OtherProtocol>&& rhs);

          ~basic_socket_acceptor();

          basic_socket_acceptor& operator=(const basic_socket_acceptor&) = delete;
          basic_socket_acceptor& operator=(basic_socket_acceptor&& rhs);
          template<class OtherProtocol>
            basic_socket_acceptor& operator=(basic_socket_acceptor<OtherProtocol>&& rhs);

          // basic_socket_acceptor operations:

          executor_type get_executor() noexcept;

          native_handle_type native_handle(); // See ``[link requirements.native_handles native handles]``

          void open(const protocol_type& protocol = protocol_type());
          void open(const protocol_type& protocol, error_code& ec);

          void assign(const protocol_type& protocol,
                      const native_handle_type& native_acceptor); // See ``[link requirements.native_handles native handles]``
          void assign(const protocol_type& protocol,
                      const native_handle_type& native_acceptor,
                      error_code& ec); // See ``[link requirements.native_handles native handles]``

          bool is_open() const;

          void close();
          void close(error_code& ec);

          void cancel();
          void cancel(error_code& ec);

          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option);
          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option, error_code& ec);

          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option) const;
          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option, error_code& ec) const;

          template<class IoControlCommand>
            void io_control(IoControlCommand& command);
          template<class IoControlCommand>
            void io_control(IoControlCommand& command, error_code& ec);

          void non_blocking(bool mode);
          void non_blocking(bool mode, error_code& ec);
          bool non_blocking() const;

          void native_non_blocking(bool mode);
          void native_non_blocking(bool mode, error_code& ec);
          bool native_non_blocking() const;

          void bind(const endpoint_type& endpoint);
          void bind(const endpoint_type& endpoint, error_code& ec);

          void listen(int backlog = max_listen_connections);
          void listen(int backlog, error_code& ec);

          endpoint_type local_endpoint() const;
          endpoint_type local_endpoint(error_code& ec) const;

          void enable_connection_aborted(bool mode);
          bool enable_connection_aborted() const;

          socket_type accept();
          socket_type accept(error_code& ec);
          socket_type accept(io_service& ios);
          socket_type accept(io_service& ios, error_code& ec);

          template<class CompletionToken>
            __ifr__ async_accept(CompletionToken&& token);
          template<class CompletionToken>
            __ifr__ async_accept(io_service& ios, CompletionToken&& token);

          socket_type accept(endpoint_type& endpoint);
          socket_type accept(endpoint_type& endpoint, error_code& ec);
          socket_type accept(io_service& ios, endpoint_type& endpoint);
          socket_type accept(io_service& ios, endpoint_type& endpoint,
                             error_code& ec);

          template<class CompletionToken>
            __ifr__ async_accept(endpoint_type& endpoint,
                                 CompletionToken&& token);
          template<class CompletionToken>
            __ifr__ async_accept(io_service& ios, endpoint_type& endpoint,
                                 CompletionToken&& token);

          void wait(wait_type w);
          void wait(wait_type w, error_code& ec);

          template<class CompletionToken>
            __ifr__ async_wait(wait_type w, CompletionToken&& token);

        private:
          protocol_type protocol_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

For a given acceptor, a program may initiate asynchronous accept or wait
operations such that there are multiple simultaneously outstanding asynchronous
operations.

When there are multiple outstanding asynchronous accept operations
the order in which the incoming connections are dequeued, and the order of
invocation of the completion handlers for these operations, is unspecified.

[section [^basic_socket_acceptor] constructors]
[xrefid socket.acceptor.cons]

  explicit basic_socket_acceptor(io_service& ios);

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == false`.]

  basic_socket_acceptor(io_service& ios, const protocol_type& protocol);

[function_effects Opens this acceptor as if by calling `open(protocol)`.]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.\n
[mdash] `enable_connection_aborted() == false`.\n
[mdash] `protocol_ == protocol`.]

  basic_socket_acceptor(io_service& ios, const endpoint_type& endpoint,
                        bool reuse_addr = true);

[function_effects Opens and binds this acceptor as if by calling:
``
  open(endpoint.protocol());
  if (reuse_addr)
    set_option(reuse_address(true));
  bind(endpoint);
  listen();
``]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.\n
[mdash] `enable_connection_aborted() == false`.\n
[mdash] `protocol_ == endpoint.protocol()`.]

[commentary [UNPV1] recommends setting `SO_REUSEADDR` by default in all TCP
servers, although there are some security implications in doing so.]

  basic_socket_acceptor(io_service& ios, const protocol_type& protocol,
                        const native_handle_type& native_acceptor);

[function_requires `native_acceptor` is a native handle to an open acceptor.]

[function_effects Assigns the existing native acceptor into this acceptor as if
by calling `assign(protocol, native_acceptor)`.]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.\n
[mdash] `enable_connection_aborted() == false`.\n
[mdash] `protocol_ == protocol`.]

  basic_socket_acceptor(basic_socket_acceptor&& rhs);

[function_effects Move constructs an object of class
`basic_socket_acceptor<AcceptableProtocol>` that refers to the state originally
represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
constructor invocation.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the constructor invocation.\n
[mdash] `enable_connection_aborted()` returns the same value as
`rhs.enable_connection_aborted()` prior to the constructor invocation.\n
[mdash] `protocol_` is equal to the prior value of `rhs.protocol_`.\n
[mdash] `rhs.is_open() == false`.]

  template<class OtherProtocol>
    basic_socket_acceptor(basic_socket_acceptor<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Move constructs an object of class
`basic_socket_acceptor<AcceptableProtocol>` that refers to the state originally
represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
constructor invocation.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the constructor invocation.\n
[mdash] `enable_connection_aborted()` returns the same value as
`rhs.enable_connection_aborted()` prior to the constructor invocation.\n
[mdash] `native_handle()` returns the prior value of `rhs.native_handle()`.\n
[mdash] `protocol_` is the result of converting the prior value of `rhs.protocol_`.\n
[mdash] `rhs.is_open() == false`.]

[function_remarks This constructor shall not participate in overload resolution
unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_socket_acceptor] destructor]
[xrefid socket.acceptor.dtor]

  ~basic_socket_acceptor();

[function_effects If `is_open()` is `true`, cancels all outstanding
asynchronous operations associated with this acceptor, and releases acceptor
resources as if by __POSIX__ `__close__(native_handle())`. Completion handlers
for canceled operations are passed an error code `ec` such that `ec ==
errc::operation_canceled` yields `true`.]

[endsect]

[section [^basic_socket_acceptor] assignment]
[xrefid socket.acceptor.assign]

  basic_socket_acceptor& operator=(basic_socket_acceptor&& rhs);

[function_effects If `is_open()` is `true`, cancels all outstanding
asynchronous operations associated with this acceptor, and releases acceptor
resources as if by __POSIX__ `__close__(native_handle())`. Then moves into
`*this` the state originally represented by `rhs`. Completion handlers for
canceled operations are passed an error code `ec` such that `ec ==
errc::operation_canceled` yields `true`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
assignment.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the assignment.\n
[mdash] `enable_connection_aborted()` returns the same value as
`rhs.enable_connection_aborted()` prior to the assignment.\n
[mdash] `native_handle()` returns the same value as `rhs.native_handle()` prior
to the assignment.\n
[mdash] `protocol_` is the same value as `rhs.protocol_` prior to the
assignment.\n
[mdash] `rhs.is_open() == false`.]

[function_returns `*this`.]

  template<class OtherProtocol>
    basic_socket_acceptor& operator=(basic_socket_acceptor<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects If `is_open()` is `true`, cancels all outstanding
asynchronous operations associated with this acceptor, and releases acceptor
resources as if by __POSIX__ `__close__(native_handle())`. Then moves into
`*this` the state originally represented by `rhs`. Completion handlers for
canceled operations are passed an error code `ec` such that `ec ==
errc::operation_canceled` yields `true`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
assignment.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the assignment.\n
[mdash] `enable_connection_aborted()` returns the same value as
`rhs.enable_connection_aborted()` prior to the assignment.\n
[mdash] `native_handle()` returns the same value as `rhs.native_handle()` prior
to the assignment.\n
[mdash] `protocol_` is the result of converting the value of `rhs.protocol_`
prior to the assignment.\n
[mdash] `rhs.is_open() == false`.]

[function_returns `*this`.]

[function_remarks This assignment operator shall not participate in overload
resolution unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_socket_acceptor] operations]
[xrefid socket.acceptor.ops]

  executor_type get_executor() noexcept;

[function_returns The associated executor.]

  native_handle_type native_handle();

[function_returns The native representation of this acceptor.]

  void open(const protocol_type& protocol);
  void open(const protocol_type& protocol, error_code& ec);

[function_effects Establishes the postcondition, as if by __POSIX__
`__socket__(protocol.family(), protocol.type(), protocol.protocol())`.]

[function_postconditions\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.\n
[mdash] `enable_connection_aborted() == false`.\n
[mdash] `protocol_ == protocol`.]

[function_error_conditions\n
[mdash] `socket_errc::already_open` [mdash] if `is_open()` is `true`.]

  void assign(const protocol_type& protocol,
              const native_handle_type& native_acceptor);
  void assign(const protocol_type& protocol,
              const native_handle_type& native_acceptor, error_code& ec);

[function_requires `native_acceptor` is a native handle to an open acceptor.]

[function_effects Assigns the native acceptor handle to this acceptor object.]

[function_postconditions\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.\n
[mdash] `enable_connection_aborted() == false`.\n
[mdash] `protocol_ == protocol`.]

[function_error_conditions\n
[mdash] `socket_errc::already_open` [mdash] if `is_open()` is `true`.]

[commentary The main source of errors for `assign` would be a call to register
the acceptor with an OS-specific event demultiplexer, such as a `kqueue`, an
`epoll` descriptor, a `/dev/poll` device, or a __Windows__ I/O completion port.
These errors may also be produced by `open`, since that function would perform
the same registration.]

  bool is_open() const;

[function_returns A `bool` indicating whether this acceptor was opened by a
previous call to `open` or `assign`.]

  void close();
  void close(error_code& ec);

[function_effects If `is_open()` is `true`, cancels all outstanding
asynchronous operations associated with this acceptor, and establishes the
postcondition as if by __POSIX__ `__close__(native_handle())`. Completion
handlers for canceled asynchronous operations are passed an error code `ec`
such that `ec == errc::operation_canceled` yields `true`.]

[function_postconditions `is_open() == false`.]

  void cancel();
  void cancel(error_code& ec);

[function_effects Cancels all outstanding asynchronous operations associated
with this acceptor. Completion handlers for canceled asynchronous operations
are passed an error code `ec` such that `ec == errc::operation_canceled` yields
`true`.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is `false`.\n
[mdash] `errc::operation_not_supported` [mdash] Current conditions do not
permit cancelation. The conditions under which cancelation of asynchronous
operations is permitted are implementation-defined.]

[commentary This flexibility is included to support implementations on
__Windows__ versions prior to Vista, where the `CancelIo` function will only
cancel asynchronous operations started from the same thread. Vista provides
`CancelIoEx` which may be used to cancel all asynchronous operations associated
with an acceptor.]

  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option);
  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option, error_code& ec);

[function_effects Sets an option on this acceptor, as if by __POSIX__
`__setsockopt__(native_handle(), option.level(protocol_),
option.name(protocol_), option.data(protocol_), option.size(protocol_))`.]

  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option);
  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option, error_code& ec);

[function_effects Gets an option from this acceptor, as if by __POSIX__:
``
  socklen_t option_len = option.size(protocol_);
  int result = __getsockopt__(native_handle(), option.level(protocol_),
                          option.name(protocol_), option.data(protocol_),
                          &option_len);
  if (result == 0)
    option.resize(option_len);
``]

  template<class IoControlCommand>
    void io_control(IoControlCommand& command);
  template<class IoControlCommand>
    void io_control(IoControlCommand& command, error_code& ec);

[function_effects Executes an I/O control command on this acceptor, as if by
__POSIX__ `__ioctl__(native_handle(), command.name(), command.data())`.]

[commentary This Technical Specification does not include any classes that
satisfy [link requirements.io_control_command `IoControlCommand`] requirements.
However, implementation-specific extensions such as QoS may be implemented
using `ioctl()`, and the `io_control()` operation is included to allow these
extensions to be supported.]

  void non_blocking(bool mode);
  void non_blocking(bool mode, error_code& ec);

[function_effects Sets the non-blocking mode of this acceptor. If `mode` is
`true`, subsequent synchronous operations may fail with error condition
`errc::operation_would_block` if they are unable to perform the requested
operation immediately. If `mode` is `false`, subsequent synchronous operations
shall block until complete.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is `false`.]

[function_note The non-blocking mode has no effect on the behavior of
asynchronous operations.]

  bool non_blocking() const;

[function_returns The non-blocking mode of this acceptor.]

  void native_non_blocking(bool mode);
  void native_non_blocking(bool mode, error_code& ec);

[function_effects Sets the non-blocking mode of the underlying native acceptor,
as if by __POSIX__:
``
  int flags = __fcntl__(native_handle(), F_GETFL, 0);
  if (flags >= 0)
  {
    if (mode)
      flags |= O_NONBLOCK;
    else
      flags &= ~O_NONBLOCK;
    __fcntl__(native_handle(), F_SETFL, flags);
  }
``]

[function_block The native non-blocking mode has no effect on the behavior of
the synchronous or asynchronous operations specified in this clause.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is `false`.\n
[mdash] `errc::invalid_argument` [mdash] if `mode == false` and `non_blocking()
== true`. [inline_note As the combination does not make sense.]]

  bool native_non_blocking() const;

[function_returns The non-blocking mode of the underlying native acceptor.]

[function_remarks Implementations are permitted and encouraged to cache the
native non-blocking mode that was applied through a prior call to
`native_non_blocking`. Implementations may return an incorrect value if a
program sets the non-blocking mode directly on the acceptor, by calling an
operating system-specific function on the result of `native_handle()`.]

  void bind(const endpoint_type& endpoint);
  void bind(const endpoint_type& endpoint, error_code& ec);

[function_effects Binds this acceptor to the specified local endpoint, as if by
__POSIX__ `__bind__(native_handle(), endpoint.data(), endpoint.size())`.]

  void listen(int backlog = socket_base::max_connections);
  void listen(int backlog, error_code& ec);

[function_effects Marks this acceptor as ready to accept connections, as if by
__POSIX__ `__listen__(native_handle(), backlog)`.]

  endpoint_type local_endpoint() const;
  endpoint_type local_endpoint(error_code& ec) const;

[function_effects Determines the locally-bound endpoint associated with this
acceptor, as if by __POSIX__:
``
  endpoint_type endpoint;
  socklen_t endpoint_len = endpoint.capacity();
  int result == __getsockname__(native_handle(), endpoint.data(), &endpoint_len);
  if (result == 0)
    endpoint.resize(endpoint_len);
``]

[function_returns On success, `endpoint`. Otherwise `endpoint_type()`.]

  void enable_connection_aborted(bool mode);

[function_effects If `mode` is true, subsequent synchronous or asynchronous
accept operations on this acceptor are permitted to fail with error condition
`errc::connection_aborted`. If `mode` is `false`, subsequent accept operations
will not fail with `errc::connection_aborted`. [inline_note If `mode` is
`false`, the implementation will restart the call to __POSIX__ __accept__ if it
fails with `ECONNABORTED`.]]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is `false`.]

[commentary The `ECONNABORTED` error is suppressed by default since it is a
transient error, is rarely useful, and handling it correctly adds complexity to
even very simple servers. However, one potential use is in the detection of
denial-of-service attacks, and for this reason we include the ability to
re-enable the error.]

  bool enable_connection_aborted() const;

[function_returns Whether accept operations on this acceptor are permitted to
fail with `errc::connection_aborted`.]

  socket_type accept();
  socket_type accept(error_code& ec);

[function_returns `accept(get_executor().context(), ec)`.]

  socket_type accept(io_service& ios);
  socket_type accept(io_service& ios, error_code& ec);

[function_effects Extracts a socket from the queue of pending connections of
the acceptor, as if by __POSIX__:
``
  native_handle_type h = __accept__(native_handle(), nullptr, 0);
``]

[function_returns If `h` is an open native socket, `socket_type(ios, s)`;
otherwise `socket_type(ios)`.]

  template<class CompletionToken>
    __ifr__ async_accept(CompletionToken&& token);

[function_returns `async_accept(get_executor().context(),
forward<CompletionToken>(token))`.]

  template<class CompletionToken>
    __ifr__ async_accept(io_service& ios, CompletionToken&& token);

[function_completion_signature `void(error_code ec, socket_type s)`.]

[function_effects Initiates an asynchronous operation to extract a socket from
the queue of pending connections of the acceptor, as if by __POSIX__:
``
  native_handle_type h = __accept__(native_handle(), nullptr, 0);
``
On success, `s` is `socket_type(ios, h). Otherwise, `s` is `socket_type(ios)`.]

  socket_type accept(endpoint_type& endpoint);
  socket_type accept(endpoint_type& endpoint, error_code& ec);

[function_returns `accept(get_executor().context(), endpoint, ec)`.]

  socket_type accept(io_service& ios, endpoint_type& endpoint);
  socket_type accept(io_service& ios, endpoint_type& endpoint,
                     error_code& ec);

[function_effects Extracts a socket from the queue of pending connections of
the acceptor, as if by __POSIX__:
``
  socklen_t endpoint_len = endpoint.capacity();
  native_handle_type h = __accept__(native_handle(),
                                endpoint.data(),
                                &endpoint_len);
  if (h >= 0)
    endpoint.resize(endpoint_len);
``]

[function_returns If `h` is an open native socket, `socket_type(ios, s)`;
otherwise `socket_type(ios)`.]

  template<class CompletionToken>
    __ifr__ async_accept(endpoint_type& endpoint,
                         CompletionToken&& token);

[function_returns `async_accept(get_executor().context(), endpoint,
forward<CompletionToken>(token))`.]

  template<class CompletionToken>
    __ifr__ async_accept(io_service& ios, endpoint_type& endpoint,
                         CompletionToken&& token);

[function_completion_signature `void(error_code ec, socket_type s)`.]

[function_effects Initiates an asynchronous operation to extract a socket from
the queue of pending connections of the acceptor, as if by __POSIX__:
``
  socklen_t endpoint_len = endpoint.capacity();
  native_handle_type h = __accept__(native_handle(),
                                endpoint.data(),
                                &endpoint_len);
  if (h >= 0)
    endpoint.resize(endpoint_len);
``
On success, `s` is `socket_type(ios, h). Otherwise, `s` is `socket_type(ios)`.]

  void wait(wait_type w);
  void wait(wait_type w, error_code& ec);

[function_effects Waits for the acceptor to have a queued incoming connection,
or to have error conditions pending, as if by __POSIX__ __poll__.]

  template<class CompletionToken>
    __ifr__ async_wait(wait_type w, CompletionToken&& token);

[function_completion_signature `void(error_code ec)`.]

[function_effects Initiates an asynchronous operation to wait for the acceptor
to have a queued incoming connection, or to have error conditions pending, as
if by __POSIX__ __poll__.]

[function_block When multiple asynchronous wait operations are initiated with
the same `wait_type` value, all operations shall complete when the acceptor
enters the corresponding ready state. The order of invocation of the
completions handlers for these operations is unspecified.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is `false`.]

[endsect]

[endsect]
