[section:socket_base__out_of_band_inline Class [^socket_base::out_of_band_inline]]

The `out_of_band_inline` class represents a socket option for determining
whether out-of-band data (also known as urgent data) is received inline.

`out_of_band_inline` satisfies the requirements for `CopyConstructible`, `Assignable`,
[link requirements.gettable_socket_option `GettableSocketOption`], and [link
requirements.settable_socket_option `SettableSocketOption`].

  namespace std {
    namespace tr2 {
      namespace sys {

        class socket_base::out_of_band_inline
        {
        public:
          out_of_band_inline();
          explicit out_of_band_inline(bool v);
          out_of_band_inline& operator=(bool v);

          bool value() const;

          operator bool() const;
          bool operator!() const;
        };

      } // namespace sys
    } // namespace tr2
  } // namespace std

__POSIX__ implementations must provide the following member functions:

  namespace std {
    namespace tr2 {
      namespace sys {

        class socket_base::out_of_band_inline
        {
        public:
          template<class Protocol> int level(const Protocol& p) const;
          template<class Protocol> int name(const Protocol& p) const;
          template<class Protocol> ``['unspecified]``* data(const Protocol& p);
          template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;
          template<class Protocol> size_t size(const Protocol& p) const;
          template<class Protocol> void resize(const Protocol& p, size_t s);
          ``['[*// remainder unchanged]]``
        private:
  ``//      int value_;  ['[*exposition only]]``
        };

      } // namespace sys
    } // namespace tr2
  } // namespace std

[section [^socket_base::out_of_band_inline] members]

  out_of_band_inline();

[function_postconditions `!value()`.]

  explicit out_of_band_inline(bool v);

[function_postconditions `value() == v`.]

  out_of_band_inline& operator=(bool v);

[function_returns `*this`.]

[function_postconditions `value() == v`.]

  bool value() const;

[function_returns The stored socket option value. For __POSIX__
implementations, returns `value_ != 0`.]

  operator bool() const;

[function_returns `value()`.]

  bool operator!() const;

[function_returns `!value()`.]

[endsect]

[section [^socket_base::out_of_band_inline] __POSIX__ members]

  template<class Protocol> int level(const Protocol& p) const;

[function_returns `SOL_SOCKET`.]

[function_note The constant `SOL_SOCKET` is defined in the __POSIX__ header
file __sys_socket_h__.]

  template<class Protocol> int name(const Protocol& p) const;

[function_returns `SO_OOBINLINE`.]

[function_note The constant `SO_OOBINLINE` is defined in the __POSIX__ header
file __sys_socket_h__.]

  template<class Protocol> int* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> const int* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> size_t size(const Protocol& p) const;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s != sizeof(value_)`.]
  
[endsect]

[endsect]
