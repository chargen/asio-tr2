[section:ip__address_v4 Class [^ip::address_v4]]

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {

          class address_v4
          {
          public:
            // types:
            typedef array<unsigned char, 4> bytes_type;

            ``// [link classes.ip__address_v4_constructors constructors]:``
            address_v4();
            explicit address_v4(const bytes_type& bytes);
            explicit address_v4(unsigned long val);

            ``// [link classes.ip__address_v4_observers observers]:``
            bool is_class_a() const;
            bool is_class_b() const;
            bool is_class_c() const;
            bool is_multicast() const;

            bytes_type to_bytes() const;
            unsigned long to_ulong() const;
            string to_string() const;
            string to_string(error_code& ec) const;
            static address_v4 from_string(const string& str);
            static address_v4 from_string(const string& str, error_code& ec);
            static address_v4 any();
            static address_v4 loopback();
            static address_v4 broadcast();
            static address_v4 broadcast(const address_v4& addr,
              const address_v4& mask);
            static address_v4 netmask(const address_v4& addr);
          };

        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

[section:ip__address_v4_constructors [^ip::address_v4] constructors]

  address_v4();

[table Postconditions:
  [[Expression][Value]]
  [[`to_bytes()`][`{0, 0, 0, 0}`]]
  [[`to_ulong()`][0]]
]

  address_v4(const bytes_type& bytes);

[*Requires:] Each element of the array `bytes` is in the range `[0, 0xFF]`.

[*Throws:] `out_of_range` if any element of the array `bytes` is not in the
range `[0, 0xFF]`.

[table Postconditions:
  [[Expression][Value]]
  [
    [`to_bytes()`]
    [``
       { bytes[0], bytes[1],
         bytes[2], bytes[3] }
     ``]
  ]
  [
    [`to_ulong()`]
    [``
       (bytes[0] << 24) | (bytes[1] << 16)
         | (bytes[2] << 8) | bytes[3]
     ``]
  ]
]

  address_v4(unsigned long val);

[*Requires:] `val` is in the range `[0, 0xFFFFFFFF]`.

[*Throws:] `out_of_range` if `val` is not in the range `[0, 0xFFFFFFFF]`.

[table Postconditions:
  [[Expression][Value]]
  [
    [`to_bytes()`]
    [``
       { (val >> 24) & 0xFF, (val >> 16) & 0xFF,
         (val >> 8)  & 0xFF, val & 0xFF }
     ``]
  ]
  [
    [`to_ulong()`]
    [`val`]
  ]
]

[endsect]

[section:ip__address_v4_observers [^ip::address_v4] observers]

  bool is_class_a() const;

[*Returns:] `(to_ulong() & 0x80000000) == 0`.

  bool is_class_b() const;

[*Returns:] `(to_ulong() & 0xC0000000) == 0x80000000`.

  bool is_class_c() const;

[*Returns:] `(to_ulong() & 0xE0000000) == 0xC0000000`.

  bool is_multicast() const;

[*Returns:] `(to_ulong() & 0xF0000000) == 0xE0000000`.

[endsect]

[section:ip__address_v4_members [^ip::address_v4] members]

  bytes_type to_bytes() const;

  unsigned long to_ulong() const;

  string to_string() const;

Returns a string representation of the address. The format is specified by the
__POSIX__ function __inet_ntop__ when invoked with address family `AF_INET`.

[*Throws:] `system_error` if the implementation is unable to convert the
address to a string. If conversion to string fails due to lack of support for
IP version 4, the implementation shall throw a `system_error` constructed with
the `error_code` value `error::address_family_not_supported`.

  string to_string(error_code& ec) const;

Returns a string representation of the address. The format is specified by the
__POSIX__ function __inet_ntop__ when invoked with address family `AF_INET`.

If conversion to string succeeds, `ec` shall be set to a value used to
represent not-an-error. If conversion to string fails due to lack of support
for IP version 4, `ec` shall be set to `error::address_family_not_supported`.

  static address_v4 from_string(const string& str);

See inet_pton.

  static address_v4 from_string(const string& str, error_code& ec);

See inet_pton.

  static address_v4 any();

[*Returns:] `address_v4()`.

  static address_v4 loopback();

[*Returns:] `address_v4(0x7F000001)`.

  static address_v4 broadcast();

[*Returns:] `address_v4(0xFFFFFFFF)`.

  static address_v4 broadcast(const address_v4& addr, const address_v4& mask);

[*Returns:] `address_v4(addr.to_ulong() | ~mask.to_ulong())`.

  static address_v4 netmask(const address_v4& addr);

If `addr.is_class_a()` is true, returns `address_v4(0xFF000000)`.
If `addr.is_class_b()` is true, returns `address_v4(0xFFFF0000)`.
If `addr.is_class_c()` is true, returns `address_v4(0xFFFFFF00)`.
Otherwise returns `address_v4(0xFFFFFFFF)`.

[endsect]

[endsect]
