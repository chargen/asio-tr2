[section:ip__address_v4 Class [^ip::address_v4]]
[xrefid internet.address.v4]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class address_v4
          {
          public:
            // types:
            struct bytes_type;

            // constructors:
            constexpr address_v4() noexcept;
            constexpr address_v4(const address_v4& a) noexcept;
            constexpr address_v4(const bytes_type& bytes);
            explicit constexpr address_v4(address_v4_uint_type val);

            // assignment:
            address_v4& operator=(const address_v4& a) noexcept;

            // members:
            constexpr bool is_unspecified() const noexcept;
            constexpr bool is_loopback() const noexcept;
            constexpr bool is_class_a() const noexcept;
            constexpr bool is_class_b() const noexcept;
            constexpr bool is_class_c() const noexcept;
            constexpr bool is_multicast() const noexcept;
            constexpr bytes_type to_bytes() const noexcept;
            constexpr address_v4_uint_type to_uint() const noexcept;
            string to_string() const;

            // static members:
            static constexpr address_v4 any() noexcept;
            static constexpr address_v4 loopback() noexcept;
            static constexpr address_v4 broadcast() noexcept;
            static constexpr address_v4 broadcast(const address_v4& addr,
              const address_v4& mask) noexcept;
          };

          // address_v4 comparisons:
          constexpr bool operator==(const address_v4& a, const address_v4& b) noexcept;
          constexpr bool operator!=(const address_v4& a, const address_v4& b) noexcept;
          constexpr bool operator< (const address_v4& a, const address_v4& b) noexcept;
          constexpr bool operator> (const address_v4& a, const address_v4& b) noexcept;
          constexpr bool operator<=(const address_v4& a, const address_v4& b) noexcept;
          constexpr bool operator>=(const address_v4& a, const address_v4& b) noexcept;

          // address_v4 creation:
          constexpr address_v4 make_address_v4(const address_v4::bytes_type& bytes);
          constexpr address_v4 make_address_v4(address_v4_uint_type val);
          constexpr address_v4 make_address_v4(v4_mapped_t, const address_v6& a);
          address_v4 make_address_v4(const char* str);
          address_v4 make_address_v4(const char* str, error_code& ec) noexcept;
          address_v4 make_address_v4(string_view str);
          address_v4 make_address_v4(string_view str, error_code& ec) noexcept;

          // address_v4 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>& os, const address_v4& addr);

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section Struct [^ip::address_v4::bytes_type]]
[xrefid internet.address.v4.bytes]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          struct address_v4::bytes_type : array<unsigned char, 4>
          {
            template<class... T> explicit constexpr bytes_type(T... t)
              : array<unsigned char, 4>{{static_cast<unsigned char>(t)...}} {}
          };

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The [^ip::address_v4::bytes_type] type is a standard-layout struct that provides a
byte-level representation of an IPv4 address in network byte order.

[endsect]

[section [^ip::address_v4] constructors]
[xrefid internet.address.v4.cons]

  constexpr address_v4() noexcept;

[function_effects Constructs an object of class `address_v4`.]

[function_postconditions `to_bytes()` yields `{0, 0, 0, 0}` and `to_uint() ==
0`.]

  constexpr address_v4(const address_v4& a) noexcept;

[function_effects Constructs an object of class `address_v4`.]

[function_postconditions `*this == a`]

  constexpr address_v4(const bytes_type& bytes);

[function_throws `out_of_range` if any element of `bytes` is not in the range
`[0, 0xFF]`. [inline_note For implementations where `numeric_limits<unsigned
char>::max() == 0xFF`, no out-of-range detection is needed.]]

[function_postconditions `to_bytes() == bytes` and `to_uint() == (bytes[0]
<< 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3]`.]

  explicit constexpr address_v4(address_v4_uint_type val);

[function_throws `out_of_range` if `val` is not in the range `[0, 0xFFFFFFFF]`.
[inline_note For implementations where
`numeric_limits<address_v4_uint_type>::max() == 0xFFFFFFFF`, no out-of-range
detection is needed.]]

[function_postconditions `to_uint() == val` and `to_bytes()` is `{ (val >> 24)
& 0xFF, (val >> 16) & 0xFF, (val >> 8) & 0xFF, val & 0xFF }`.]

[endsect]

[section [^ip::address_v4] assignment]
[xrefid internet.address.v4.assign]

  address_v4& operator=(const address_v4& a) noexcept;

[function_postconditions `*this == a`]

[function_returns `*this`]

[endsect]

[section [^ip::address_v4] members]
[xrefid internet.address.v4.members]

  constexpr bool is_unspecified() const noexcept;

[function_returns `to_uint() == 0`.]

  constexpr bool is_loopback() const noexcept;

[function_returns `(to_uint() & 0xFF000000) == 0x7F000000`.]

  constexpr bool is_class_a() const noexcept;

[function_returns `(to_uint() & 0x80000000) == 0`.]

  constexpr bool is_class_b() const noexcept;

[function_returns `(to_uint() & 0xC0000000) == 0x80000000`.]

  constexpr bool is_class_c() const noexcept;

[function_returns `(to_uint() & 0xE0000000) == 0xC0000000`.]

  constexpr bool is_multicast() const noexcept;

[function_returns `(to_uint() & 0xF0000000) == 0xE0000000`.]

  constexpr bytes_type to_bytes() const noexcept;

[function_returns A representation of the address in [link
definitions.network_byte_order network byte order].]

  constexpr address_v4_uint_type to_uint() const noexcept;

[function_returns A representation of the address in [link
definitions.host_byte_order host byte order].]

  string to_string() const;

[function_returns A textual representation of the address, as if by __POSIX__
__inet_ntop__ when invoked with address family `AF_INET`.]

[endsect]

[section [^ip::address_v4] static members]
[xrefid internet.address.v4.static]

  static constexpr address_v4 any() noexcept;

[function_returns `address_v4()`.]

  static constexpr address_v4 loopback() noexcept;

[function_returns `address_v4(0x7F000001)`.]

  static constexpr address_v4 broadcast() noexcept;

[function_returns `address_v4(0xFFFFFFFF)`.]

  static constexpr address_v4 broadcast(const address_v4& addr, const address_v4& mask) noexcept;

[function_returns `address_v4(addr.to_uint() | ~mask.to_uint())`.]

[endsect]

[section:ip__address_v4__comparisons [^ip::address_v4] comparisons]
[xrefid internet.address.v4.comparisons]

  constexpr bool operator==(const address_v4& a, const address_v4& b) noexcept;

[function_returns `a.to_uint() == b.to_uint()`.]

  constexpr bool operator!=(const address_v4& a, const address_v4& b) noexcept;

[function_returns `!(a == b)`.]

  constexpr bool operator< (const address_v4& a, const address_v4& b) noexcept;

[function_returns `a.to_uint() < b.to_uint()`.]

  constexpr bool operator> (const address_v4& a, const address_v4& b) noexcept;

[function_returns `b < a`.]

  constexpr bool operator<=(const address_v4& a, const address_v4& b) noexcept;

[function_returns `!(b < a)`.]

  constexpr bool operator>=(const address_v4& a, const address_v4& b) noexcept;

[function_returns `!(a < b)`.]

[endsect]

[section:ip__address_v4__creation [^ip::address_v4] creation]
[xrefid internet.address.v4.creation]

  constexpr address_v4 make_address_v4(const address_v4::bytes_type& bytes);

[function_returns `address_v4(bytes)`.]

  constexpr address_v4 make_address_v4(address_v4_uint_type val);

[function_returns `address_v4(val)`.]

  constexpr address_v4 make_address_v4(v4_mapped_t, const address_v6& a);

[function_returns An `address_v4` object corresponding to the IPv4-mapped IPv6
address, as if computed by the following method:
``
  bytes_type v6b = a.to_bytes();
  address_v4::bytes_type v4b(v6b[12], v6b[13], v6b[14], v6b[15]);
  return address_v4(v4b);
``]

[function_throws `bad_address_cast` if `a.is_v4_mapped()` is `false`.]

  address_v4 make_address_v4(const char* str);
  address_v4 make_address_v4(const char* str, error_code& ec) noexcept;
  address_v4 make_address_v4(string_view str);
  address_v4 make_address_v4(string_view str, error_code& ec) noexcept;

[function_effects Converts a textual representation of an address into a
corresponding `address_v4` value, as if by __POSIX__ __inet_pton__ when invoked
with address family `AF_INET`.]

[function_returns If successful, an `address_v4` value corresponding to the
string `str`. Otherwise `address_v4()`.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `str` is not a valid textual
representation of an IPv4 address.]

[endsect]

[section:ip__address_v4__io [^ip::address_v4] I/O]
[xrefid internet.address.v4.io]

  template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os, const address_v4& addr);

[function_effects Outputs the textual representation of the address to the
stream, as if it were implemented as follows:
``
  string s = addr.to_string();
  for (string::iterator i = s.begin(); i != s.end(); ++i)
    os << os.widen(*i);
``]

[function_returns `os`.]

[endsect]

[endsect]
