[section:const_buffer Class [^const_buffer]]
[xrefid buffer.const]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class const_buffer
    {
    public:
      // constructors:
      const_buffer() noexcept;
      const_buffer(const void* p, size_t n) noexcept;
      const_buffer(const mutable_buffer& b) noexcept;

      // members:
      const void* data() const noexcept;
      size_t size() const noexcept;

    private:
      const void* data_; // ``['exposition only]``
      size_t size_; // ``['exposition only]``
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

The `const_buffer` class satisfies requirements of [link
requirements.const_buffers `ConstBufferSequence`], `DefaultConstructible` (C++
Std, [defaultconstructible]), and `CopyAssignable` (C++ Std, [copyassignable]).

[section [^const_buffer] constructors]
[xrefid buffer.const.cons]

  const_buffer() noexcept;

[function_postconditions `data_ == nullptr` and `size_ == 0`.]

  const_buffer(const void* p, size_t n) noexcept;

[function_postconditions `data_ == p` and `size_ == n`.]

  const_buffer(const mutable_buffer& b);

[function_postconditions `data_ == b.data_` and `size_ == b.size_`.]

[endsect]

[section [^const_buffer] members]
[xrefid buffer.const.members]

  const void* data() const noexcept;

[function_returns `data_`.]

  size_t size() const noexcept;

[function_returns `size_`.]

[endsect]

[endsect]
