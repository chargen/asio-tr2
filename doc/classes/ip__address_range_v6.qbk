[section:ip__address_range_v6 Class template [^ip::address_range_v6]]
[xrefid internet.address.range.v6]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class address_range_v6
          {
          public:
            // types:
            typedef address_iterator_v6 iterator;

            // constructors:
            address_range_v6() noexcept;
            address_range_v6(const address_v6& first,
                             const address_v6& last) noexcept;

            // members:
            iterator begin() const noexcept;
            iterator end() const noexcept;
            bool empty() const noexcept;
            iterator find(const address_v6& addr) const noexcept;
          };

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^ip::address_range_v6] constructors]
[xrefid internet.address.range.v6.cons]

  address_range_v6() noexcept;

[function_effects Constructs an object of type `address_range_v6` representing
an empty range.]

  address_range_v6(const address_v6& first,
                   const address_v6& last) noexcept;

[function_effects Constructs an object of type `address_range_v6` representing
the half open range [half_open_range `first`,`last`].]

[endsect]

[section [^ip::address_range_v6] members]
[xrefid internet.address.range.v6.members]

  iterator begin() const noexcept;

[function_returns An iterator that points to the beginning of the range.]

  iterator end() const noexcept;

[function_returns An iterator that points to the end of the range.]

  bool empty() const noexcept;

[function_returns `true` if `*this` represents an empty range, otherwise
`false`.]

  iterator find(const address_v6& addr) const noexcept;

[function_returns If `addr` is in the range, an iterator that points to `addr`;
otherwise, `end()`.]

[endsect]

[endsect]
