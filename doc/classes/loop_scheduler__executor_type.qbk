[section:loop_scheduler__executor_type Class [^loop_scheduler::executor_type]]
[xrefid loop_scheduler.exec]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    class loop_scheduler::executor_type
    {
    public:
      // construct / copy / destroy:

      executor_type(const executor_type& other) noexcept;
      executor_type(executor_type&& other) noexcept;

      executor_type& operator=(const executor_type& other) noexcept;
      executor_type& operator=(executor_type&& other) noexcept;

      ~executor_type();

      // executor operations:

      bool running_in_this_thread() const noexcept;

      loop_scheduler& context() noexcept;

      void on_work_started() noexcept;
      void on_work_finished() noexcept;

      template<class Func, class ProtoAllocator>
        void dispatch(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void post(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void defer(Func&& f, const ProtoAllocator& a);
    };

    bool operator==(const loop_scheduler::executor_type& a,
                    const loop_scheduler::executor_type& b) noexcept;
    bool operator!=(const loop_scheduler::executor_type& a,
                    const loop_scheduler::executor_type& b) noexcept;

    template<> struct is_executor<loop_scheduler::executor_type> : true_type {};

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

`loop_scheduler::executor_type` is a type satisfying [link requirements.executor
Executor requirements]. Objects of type `loop_scheduler::executor_type` are
associated with a `loop_scheduler`, and function objects submitted using the
`dispatch`, `post` or `defer` member functions will be executed by the
`loop_scheduler` from within the `run`, `run_for`, `run_until`, `run_one`,
`run_one_for`, `run_one_until`, `poll` or `poll_one` functions.

[section [^loop_scheduler::executor_type] constructors]
[xrefid loop_scheduler.exec.cons]

  executor_type(const executor_type& other) noexcept;

[function_effects Constructs an object of class `loop_scheduler::executor_type`.]

[function_postconditions `*this == other`.]

  executor_type(executor_type&& other) noexcept;

[function_effects Constructs an object of class `loop_scheduler::executor_type`.]

[function_postconditions `*this` is equal to the prior value of `other`.]

[endsect]

[section [^loop_scheduler::executor_type] assignment]
[xrefid loop_scheduler.exec.assign]

  executor_type& operator=(const executor_type& other) noexcept;

[function_postconditions `*this == other`.]

[function_returns `*this`.]

  executor_type& operator=(executor_type&& other) noexcept;

[function_postconditions `*this` is equal to the prior value of `other`.]

[function_returns `*this`.]

[endsect]

[section [^loop_scheduler::executor_type] operations]
[xrefid loop_scheduler.exec.ops]

  bool running_in_this_thread() const noexcept;

[function_returns `true` if the current thread of execution is invoking the
`run`, `run_for`, `run_until`, `run_one`, `run_one_for`, `run_one_until`,
`poll` or `poll_one` function of the associated `loop_scheduler` object.]

  loop_scheduler& context() noexcept;

[function_returns A reference to the associated `loop_scheduler` object.]

  void on_work_started() noexcept;

[function_effects Increases the count of outstanding work associated with the
`loop_scheduler`.]

  void on_work_finished() noexcept;

[function_effects Decreases the count of outstanding work associated with the
`loop_scheduler`.]

  template<class Func, class ProtoAllocator>
    void dispatch(Func&& f, const ProtoAllocator& a);

[function_effects If `running_in_this_thread()` is `true`, calls
[^['DECAY_COPY]]`(forward<Func>(f))()` (C++ Std, \[thread.decaycopy\]).
Otherwise, requests execution of `f`.]

[function_block If `f` exits via an exception, and the execution of `f` is
performed in the current thread and before `dispatch` returns, the exception
propagates to the caller of `dispatch`.]

  template<class Func, class ProtoAllocator>
    void post(Func&& f, const ProtoAllocator& a);

[function_effects Requests execution of `f`.]

  template<class Func, class ProtoAllocator>
    void defer(Func&& f, const ProtoAllocator& a);

[function_effects Requests execution of `f`.]

[endsect]

[section [^loop_scheduler::executor_type] comparisons]
[xrefid loop_scheduler.exec.comparisons]

  bool operator==(const loop_scheduler::executor_type& a,
                  const loop_scheduler::executor_type& b) noexcept;

[function_returns `&a.context() == &b.context()`.]

  bool operator!=(const loop_scheduler::executor_type& a,
                  const loop_scheduler::executor_type& b) noexcept;

[function_returns `!(a == b)`.]

[endsect]

[endsect]
