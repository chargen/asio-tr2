[section:basic_socket_iostream Class template [^basic_socket_iostream]]
[xrefid socket.iostream]

The class template `basic_socket_iostream<Protocol, Clock, WaitTraits>`
supports reading and writing on sockets. It uses a
`basic_socket_streambuf<Protocol, Clock, WaitTraits>` object to control the
associated sequences.

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Protocol, class Clock, class WaitTraits>
        class basic_socket_iostream : public basic_iostream<char>
        {
        public:
          // types:

          typedef Protocol protocol_type;
          typedef typename protocol_type::endpoint endpoint_type;
          typedef Clock clock_type;
          typedef typename clock_type::time_point time_point;
          typedef typename clock_type::duration duration;
          typedef WaitTraits traits_type;

          // constructors:

          basic_socket_iostream();
          template<class... Args>
            explicit basic_socket_iostream(Args&&... args);

          // members:

          template<class... Args> void connect(Args&&... args);

          void close();

          basic_socket_streambuf<protocol_type, clock_type, traits_type>* rdbuf() const;

          error_code error() const;

          time_point expiry() const;
          void expires_at(const time_point& t);
          void expires_after(const duration& d);

        private:
          basic_socket_streambuf<protocol_type, clock_type, traits_type> sb_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^basic_socket_iostream] constructors]
[xrefid socket.iostream.cons]

  basic_socket_iostream();

[function_effects Initializes the base class with `basic_iostream<char>(&sb_)`,
`sb_` with `basic_socket_streambuf<Protocol, Clock, WaitTraits>()`, and
performs `setf(std::ios_base::unitbuf)`.]

  template<class... Args>
    explicit basic_socket_iostream(Args&&... args);

[function_effects Initializes the base class with `basic_iostream<char>(&sb_)`,
initializes  `sb_` with `basic_socket_streambuf<Protocol, Clock,
WaitTraits>()`, and performs `setf(std::ios_base::unitbuf)`. Then calls
`rdbuf()->connect(forward<Args>(args)__dotdotdot__)`. If that function
returns a null pointer, calls `setstate(failbit)`.]

[endsect]

[section [^basic_socket_iostream] members]
[xrefid socket.iostream.members]

  template<class... Args>
    void connect(Args&&... args);

[function_effects Calls `rdbuf()->connect(forward<Args>(args)__dotdotdot__)`.
If that function returns a null pointer, calls `setstate(failbit)` (which may
throw `ios_base::failure`).]

  void close();

[function_effects Calls `rdbuf()->close()`. If that function returns a null
pointer, calls `setstate(failbit)` (which may throw `ios_base::failure`).]

  basic_socket_streambuf<protocol_type, clock_type, traits_type>* rdbuf() const;

[function_returns `const_cast<basic_socket_streambuf<protocol_type, clock_type,
traits_type>*>(std::addressof(sb_))`.]

  error_code error() const;

[function_returns `rdbuf()->puberror()`.]

  time_point expiry() const;

[function_returns `rdbuf()->expiry()`.]

  void expires_at(const time_point& t);

[function_effects Equivalent to `rdbuf()->expires_at(t)`.]

  void expires_after(const duration& d);

[function_effects Equivalent to `rdbuf()->expires_after(d)`.]

[endsect]

[endsect]
