[section:executor_wrapper Class template [^executor_wrapper]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor>
        class executor_wrapper
        {
        public:
          // types:

          typedef T wrapped_type;
          typedef Executor executor_type;
          typedef ``['see below]`` result_type;          // ``['not always defined]``
          typedef ``['see below]`` argument_type;        // ``['not always defined]``
          typedef ``['see below]`` first_argument_type;  // ``['not always defined]``
          typedef ``['see below]`` second_argument_type; // ``['not always defined]``

          // construct / copy / destroy:

          executor_wrapper(T t, const Executor& ex);
          executor_wrapper(const executor_wrapper& other) = default;
          executor_wrapper(executor_wrapper&& other) = default;
          template<class U, class OtherExecutor>
            executor_wrapper(const executor_wrapper<U, OtherExecutor>& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_wrapper<U, OtherExecutor>&& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_arg_t, const Executor& ex,
              const executor_wrapper<U, OtherExecutor>& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_arg_t, const Executor& ex,
              executor_wrapper<U, OtherExecutor>&& other);

          ~executor_wrapper();

          // executor wrapper access:

          T& unwrap() noexcept;
          const T& unwrap() const noexcept;
          executor_type get_executor() const noexcept;

          // executor wrapper invocation:

          template<class... Args>
            result_of_t<``['cv]`` T&(Args&&...)> operator()(Args&&... args) ``['cv]``;

        private:
          Executor ex_; // ``['exposition only]``
          T wrapped_; // ``['exposition only]``
        };

        template<class T, class Executor, class Signature>
        struct handler_type<executor_wrapper<T, Executor>, Signature>
        {
          typedef executor_wrapper<handler_type_t<T, Signature>, Executor> type;
        };

        template<class T, class Executor>
          class async_result<executor_wrapper<T, Executor>>;

        template<class T, class Executor>
          struct handler_traits<executor_wrapper<T, Executor>>;

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

`executor_wrapper<T, Executor>` is a wrapper around an object or function of
type `T`, and an executor object of type `Executor` satisfying [link
requirements.executor Executor requirements].

`executor_wrapper<T, Executor>` has a weak result type (C++ Std,
[func.require]). If `T` is a function type, `result_type` shall be a synonym
for the return type of `T`.

The template instantiation `executor_wrapper<T, Executor>` shall define a
nested type named `argument_type` as a synonym for `T1` only if the type `T` is
any of the following:

[mdash] a function type or a pointer to function type taking one argument of
type `T1`

[mdash] a pointer to member function `R T0::f` [^['cv]] (where [^['cv]]
represents the member function’s cv-qualifiers); the type `T1` is [^['cv]]
`T0*`

[mdash] a class type with a member type `argument_type`; the type `T1` is
`T::argument_type`.

The template instantiation `executor_wrapper<T, Executor>` shall define two
nested types named `first_argument_type` and `second_argument_type` as synonyms
for `T1` and `T2`, respectively, only if the type `T` is any of the following:

[mdash] a function type or a pointer to function type taking two arguments of
types `T1` and `T2`

[mdash] a pointer to member function `R T0::f(T2)` [^['cv]] (where [^['cv]]
represents the member function’s cv-qualifiers); the type `T1` is [^['cv]]
`T0*`

[mdash] a class type with member types `first_argument_type` and
`second_argument_type`; the type `T1` is `T::first_argument_type`. and the type
`T2` is `T::second_argument_type`.

[section [^executor_wrapper] constructors]

  executor_wrapper(T t, const Executor& ex);

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with the value `ex`. If `uses_executor<T, Executor>::value`
is true, performs uses-executor construction to initialize `wrapped_` with
`wrapped_(executor_arg, ex_, std::move(t))`; otherwise, initializes `wrapped_`
with `wrapped_(std::move(t))`.]

  template<class U, class OtherExecutor>
    executor_wrapper(const executor_wrapper<U, OtherExecutor>& other);

[function_requires `U` is `T` or convertible to `T`. `OtherExecutor` is
`Executor` or convertible to `Executor`.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `other.get_executor()`. If `uses_executor<T,
Executor>::value` is true, performs uses-executor construction to initialize
`wrapped_` with `wrapped_(executor_arg, ex_, other.unwrap())`; otherwise,
initializes `wrapped_` with `wrapped_(other.unwrap())`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_wrapper<U, OtherExecutor>&& other);

[function_requires `U` is `T` or convertible to `T`. `OtherExecutor` is
`Executor` or convertible to `Executor`.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `other.get_executor()`. If `uses_executor<T,
Executor>::value` is true, performs uses-executor construction to initialize
`wrapped_` with `wrapped_(executor_arg, ex_, std::move(other.unwrap()))`;
otherwise, initializes `wrapped_` with `wrapped_(std::move(other.unwrap()))`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_arg_t, const Executor& ex,
      const executor_wrapper<U, OtherExecutor>& other);

[function_requires `U` is `T` or convertible to `T`.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `ex`. If `uses_executor<T, Executor>::value` is true,
performs uses-executor construction to initialize `wrapped_` with
`wrapped_(executor_arg, ex_, other.unwrap())`; otherwise, initializes
`wrapped_` with `wrapped_(other.unwrap())`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_arg_t, const Executor& ex,
      executor_wrapper<U, OtherExecutor>&& other);

[function_requires `U` is `T` or convertible to `T`.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `ex`. If `uses_executor<T, Executor>::value` is true,
performs uses-executor construction to initialize `wrapped_` with
`wrapped_(executor_arg, ex_, std::move(other.unwrap()))`; otherwise,
initializes `wrapped_` with `wrapped_(std::move(other.unwrap()))`.]

[endsect]

[section [^executor_wrapper] access]

  T& unwrap() noexcept;
  const T& unwrap() const noexcept;

[function_returns `wrapped_`.]

  executor_type get_executor() const noexcept;

[function_returns `executor_`.]

[endsect]

[section [^executor_wrapper] invocation]

  template<class... Args>
    result_of_t<``['cv]`` T&(Args&&...)> operator()(Args&&... args) ``['cv]``;

[function_returns [^['INVOKE]]`(unwrap(), forward<Args>(args)__dotdotdot__)`
(C++ Std, \[func.require\]).]

[function_remarks `operator()` is described for exposition only.
Implementations are not required to provide an actual
`executor_wrapper::operator()`. Implementations are permitted to support
`executor_wrapper` function invocation through multiple overloaded operators or
through other means.]

[endsect]

[section Class template specialization [^async_result]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor>
        class async_result<executor_wrapper<T, Executor>>
        {
        public:
          typedef typename async_result<T>::type type;

          explicit async_result(executor_wrapper<T, Executor>& wrapper);
          async_result(const async_result&) = delete;
          async_result& operator=(const async_result&) = delete;

          type get();

        private:
          async_result<T> wrapped_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The implementation shall provide a specialization of `async_result` that meets
the [link classes.async_result `async_result` specialization requirements].

  explicit async_result(executor_wrapper<T, Executor>& wrapper);

[function_effects Initializes `wrapped_` with `wrapped_(wrapper.unwrap())`.]

  type get();

[function_returns `wrapped_.get()`.]

[endsect]

[section Class template specialization [^handler_traits]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor>
        struct handler_traits<executor_wrapper<T, Executor>>
        {
          typedef executor_wrapper<T, Executor> handler_type;

          template<class E = system_executor>
          struct executor {
            typedef Executor executor;
          };

          template<class E = system_executor>
          using executor_t = typename executor<E>::type;

          template<class E = system_executor>
            static executor_t<E> get_executor(
              const executor_wrapper<T, Executor>& w,
                const E& ex = E()) noexcept;

          template<class A = allocator<void>>
          struct allocator {
            typedef typename handler_traits<T>::allocator<A>::type type;
          };

          template<class A = allocator<void>>
          using allocator_t = typename allocator<A>::type;

          template<class A = allocator<void>>
            static allocator_t<A> get_allocator(
              const executor_wrapper<T, Executor>& w,
                const A& a = A()) noexcept;
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The implementation shall provide a specialization of `handler_traits` that
meets the [link classes.handler_traits `handler_traits` specialization
requirements].

  template<class E = system_executor>
    static executor_t<E> get_executor(
      const executor_wrapper<T, Executor>& w,
        const E& ex = E()) noexcept;

[function_returns `w.get_executor()`.]

  template<class A = allocator<void>>
    static allocator_t<A> get_allocator(
      const executor_wrapper<T, Executor>& w,
        const A& a = A()) noexcept;

[function_returns `handler_traits<T>::get_allocator(w.unwrap(), a)`.]

[endsect]

[endsect]
