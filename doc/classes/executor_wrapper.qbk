[section:executor_wrapper Class template [^executor_wrapper]]
[xrefid async.exec.wrapper]

`executor_wrapper<T, Executor>` is a wrapper around an object or function of
type `T`, and an executor object of type `Executor` satisfying [link
requirements.executor Executor requirements].

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor>
        class executor_wrapper
        {
        public:
          // types:

          typedef T wrapped_type;
          typedef Executor executor_type;

          // construct / copy / destroy:

          executor_wrapper(T t, const Executor& ex);
          executor_wrapper(const executor_wrapper& other) = default;
          executor_wrapper(executor_wrapper&& other) = default;
          template<class U, class OtherExecutor>
            executor_wrapper(const executor_wrapper<U, OtherExecutor>& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_wrapper<U, OtherExecutor>&& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_arg_t, const Executor& ex,
              const executor_wrapper<U, OtherExecutor>& other);
          template<class U, class OtherExecutor>
            executor_wrapper(executor_arg_t, const Executor& ex,
              executor_wrapper<U, OtherExecutor>&& other);

          ~executor_wrapper();

          // executor wrapper access:

          T& unwrap() noexcept;
          const T& unwrap() const noexcept;
          executor_type get_executor() const noexcept;

          // executor wrapper invocation:

          template<class... Args>
            result_of_t<T&(Args&&...)> operator()(Args&&... args);
          template<class... Args>
            result_of_t<const T&(Args&&...)> operator()(Args&&... args) const;

        private:
          Executor ex_; // ``['exposition only]``
          T wrapped_; // ``['exposition only]``
        };

        template<class T, class Executor, class Signature>
        struct completion_handler_type<executor_wrapper<T, Executor>, Signature>
        {
          typedef executor_wrapper<completion_handler_type_t<T, Signature>, Executor> type;
        };

        template<class T, class Executor>
          class async_result<executor_wrapper<T, Executor>>;

        template<class T, class Executor, class ProtoAllocator>
          struct associated_allocator<executor_wrapper<T, Executor>, ProtoAllocator>;

        template<class T, class Executor, class Executor1>
          struct associated_executor<executor_wrapper<T, Executor>, Executor1>;

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^executor_wrapper] constructors]
[xrefid async.exec.wrapper.cons]

  executor_wrapper(T t, const Executor& ex);

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with the value `ex`. Initializes `wrapped_` by performing
uses-executor construction, using the constructor argument `std::move(t)` and
the executor `ex_`.]

  template<class U, class OtherExecutor>
    executor_wrapper(const executor_wrapper<U, OtherExecutor>& other);

[function_requires If `U` is not convertible to `T`, or if `OtherExecutor` is
not convertible to `Executor`, the program is ill-formed.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `other.get_executor()`. Initializes `wrapped_` by
performing uses-executor construction, using the constructor argument
`other.unwrap()` and the executor `ex_`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_wrapper<U, OtherExecutor>&& other);

[function_requires If `U` is not convertible to `T`, or if `OtherExecutor` is
not convertible to `Executor`, the program is ill-formed.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `other.get_executor()`. Initializes `wrapped_` by
performing uses-executor construction, using the constructor argument
`std::move(other.unwrap())` and the executor `ex_`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_arg_t, const Executor& ex,
      const executor_wrapper<U, OtherExecutor>& other);

[function_requires If `U` is not convertible to `T` the program is ill-formed.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `ex`. Initializes `wrapped_` by performing uses-executor
construction, using the constructor argument `other.unwrap()` and the executor
`ex_`.]

  template<class U, class OtherExecutor>
    executor_wrapper(executor_arg_t, const Executor& ex,
      executor_wrapper<U, OtherExecutor>&& other);

[function_requires `U` is `T` or convertible to `T`.]

[function_effects Constructs an object of type `executor_wrapper<T, Executor>`.
Initializes `ex_` with `ex`. Initializes `wrapped_` by performing uses-executor
construction, using the constructor argument `std::move(other.unwrap())` and
the executor `ex_`.]

[endsect]

[section [^executor_wrapper] access]
[xrefid async.exec.wrapper.access]

  T& unwrap() noexcept;
  const T& unwrap() const noexcept;

[function_returns `wrapped_`.]

  executor_type get_executor() const noexcept;

[function_returns `executor_`.]

[endsect]

[section [^executor_wrapper] invocation]
[xrefid async.exec.wrapper.invocation]

  template<class... Args>
    result_of_t<T&(Args&&...)> operator()(Args&&... args);
  template<class... Args>
    result_of_t<const T&(Args&&...)> operator()(Args&&... args) const;

[function_returns [^['INVOKE]]`(unwrap(), forward<Args>(args)__dotdotdot__)`
(C++ Std, \[func.require\]).]

[endsect]

[section Class template partial specialization [^async_result]]
[xrefid async.exec.wrapper.async.result]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor>
        class async_result<executor_wrapper<T, Executor>>
        {
        public:
          typedef typename async_result<T>::type type;

          explicit async_result(executor_wrapper<T, Executor>& wrapper);
          async_result(const async_result&) = delete;
          async_result& operator=(const async_result&) = delete;

          type get();

        private:
          async_result<T> wrapped_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

  explicit async_result(executor_wrapper<T, Executor>& wrapper);

[function_effects Initializes `wrapped_` as `wrapped_(wrapper.unwrap())`.]

  type get();

[function_returns `wrapped_.get()`.]

[endsect]

[section Class template partial specialization [^associated_allocator]]
[xrefid async.exec.wrapper.assoc.alloc]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor, class ProtoAllocator>
          struct associated_allocator<executor_wrapper<T, Executor>, ProtoAllocator>
        {
          typedef associated_allocator_t<T, ProtoAllocator> type;

          static type get(const executor_wrapper<T, Executor>& w,
                          const ProtoAllocator& a = ProtoAllocator()) noexcept;
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

  static type get(const executor_wrapper<T, Executor>& w,
                  const ProtoAllocator& a = ProtoAllocator()) noexcept;

[function_returns `associated_allocator<T, ProtoAllocator>::get(w.unwrap(), a)`.]

[endsect]

[section Class template partial specialization [^associated_executor]]
[xrefid async.exec.wrapper.assoc.exec]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor, class Executor1>
          struct associated_executor<executor_wrapper<T, Executor>, Executor1>
        {
          typedef Executor type;

          static type get(const executor_wrapper<T, Executor>& w,
                          const Executor1& e = Executor1()) noexcept;
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

  static type get(const executor_wrapper<T, Executor>& w,
                  const Executor1& e = Executor1()) noexcept;

[function_returns `w.get_executor()`.]

[endsect]

[endsect]
