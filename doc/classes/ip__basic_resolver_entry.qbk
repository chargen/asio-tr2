[section:ip__basic_resolver_entry Class template [^ip::basic_resolver_entry]]
[xrefid internet.resolver.entry]

An object of type `basic_resolver_entry<InternetProtocol>` represents a single
element in the results returned by a name resolution operation.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__
  namespace ip {

    template<class InternetProtocol>
    class basic_resolver_entry
    {
    public:
      // types:
      typedef InternetProtocol protocol_type;
      typedef typename InternetProtocol::endpoint endpoint_type;

      // constructors:
      basic_resolver_entry();
      basic_resolver_entry(const endpoint_type& ep,
                           string_view h,
                           string_view s);

      // members:
      endpoint_type endpoint() const;
      operator endpoint_type() const;
      template<class Allocator = allocator<char>>
        basic_string<char, char_traits<char>, Allocator>
          host_name(const Allocator& a = Allocator()) const;
      template<class Allocator = allocator<char>>
        basic_string<char, char_traits<char>, Allocator>
          service_name(const Allocator& a = Allocator()) const;
    };

    // basic_resolver_entry comparisons:
    template<class InternetProtocol>
      bool operator==(const basic_resolver_entry<InternetProtocol>& a,
                      const basic_resolver_entry<InternetProtocol>& b);
    template<class InternetProtocol>
      bool operator!=(const basic_resolver_entry<InternetProtocol>& a,
                      const basic_resolver_entry<InternetProtocol>& b);

  } // namespace ip
  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^ip::basic_resolver_entry] constructors]
[xrefid internet.resolver.entry.cons]

  basic_resolver_entry();

[function_effects Equivalent to
`basic_resolver_entry<InternetProtocol>(endpoint_type(), "", "")`.]

  basic_resolver_entry(const endpoint_type& ep,
                       string_view h,
                       string_view s);

[function_postconditions\n
[mdash] `endpoint() == ep`.\n
[mdash] `host_name() == h`.\n
[mdash] `service_name() == s`.]

[endsect]

[section [^ip::basic_resolver_entry] members]
[xrefid internet.resolver.entry.members]

  endpoint_type endpoint() const;

[function_returns The endpoint associated with the resolver entry.]

  operator endpoint_type() const;

[function_returns `endpoint()`.]

  template<class Allocator = allocator<char>>
    basic_string<char, char_traits<char>, Allocator>
      host_name(const Allocator& a = Allocator()) const;

[function_returns The host name associated with the resolver entry.]

  template<class Allocator = allocator<char>>
    basic_string<char, char_traits<char>, Allocator>
      service_name(const Allocator& a = Allocator()) const;

[function_returns The service name associated with the resolver entry.]

[endsect]

[section [^op::basic_resolver_entry] comparisons]
[xrefid internet.resolver.entry.comparisons]

  template<class InternetProtocol>
    bool operator==(const basic_resolver_entry<InternetProtocol>& a,
                    const basic_resolver_entry<InternetProtocol>& b);

[function_returns `a.endpoint() == b.endpoint() && a.host_name() ==
b.host_name() && a.service_name() == b.service_name()`.]

  template<class InternetProtocol>
    bool operator!=(const basic_resolver_entry<InternetProtocol>& a,
                    const basic_resolver_entry<InternetProtocol>& b);

[function_returns `!(a == b)`.]

[endsect]

[endsect]
