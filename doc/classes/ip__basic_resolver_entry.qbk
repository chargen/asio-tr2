[section:ip__basic_resolver_entry Class template [^ip::basic_resolver_entry]]
[xrefid internet.resolver.entry]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          template<class InternetProtocol>
          class basic_resolver_entry
          {
          public:
            // types:
            typedef InternetProtocol protocol_type;
            typedef typename InternetProtocol::endpoint endpoint_type;

            // constructors:
            basic_resolver_entry();
            basic_resolver_entry(const endpoint_type& ep,
                                 string_view h,
                                 string_view s);

            // members:
            endpoint_type endpoint() const;
            operator endpoint_type() const;
            string host_name() const;
            string service_name() const;
          };

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^ip::basic_resolver_entry] constructors]
[xrefid internet.resolver.entry.cons]

  basic_resolver_entry();

[function_effects Equivalent to
`basic_resolver_entry<InternetProtocol>(endpoint_type(), string_view(),
string_view())`.]

  basic_resolver_entry(const endpoint_type& ep,
                       string_view h,
                       string_view s);

[function_postconditions\n
[mdash] `endpoint() == ep`.\n
[mdash] `host_name() == h`.\n
[mdash] `service_name() == s`.]

[endsect]

[section [^ip::basic_resolver_entry] members]
[xrefid internet.resolver.entry.members]

  endpoint_type endpoint() const;

[function_returns The endpoint associated with the resolver entry.]

  operator endpoint_type() const;

[function_returns `endpoint()`.]

  string host_name() const;

[function_returns The host name associated with the resolver entry.]

  string service_name() const;

[function_returns The service name associated with the resolver entry.]

[endsect]

[endsect]
