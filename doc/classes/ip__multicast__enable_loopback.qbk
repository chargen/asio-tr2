[section:ip__multicast__enable_loopback Class [^ip::multicast::enable_loopback]]

The `enable_loopback` class represents a socket option for determining whether
multicast datagrams are delivered back to the local application.

`enable_loopback` satisfies the requirements for `CopyConstructible`, `Assignable`,
[link requirements.gettable_socket_option `GettableSocketOption`], and [link
requirements.settable_socket_option `SettableSocketOption`].

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {
          namespace multicast {

            class enable_loopback
            {
            public:
              enable_loopback();
              explicit enable_loopback(bool v);
              enable_loopback& operator=(bool v);

              bool value() const;

              operator bool() const;
              bool operator!() const;
            };

          } // namespace multicast
        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

__POSIX__ implementations must provide the following member functions:

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {
          namespace multicast {

            class enable_loopback
            {
            public:
              template<class Protocol> int level(const Protocol& p) const;
              template<class Protocol> int name(const Protocol& p) const;
              template<class Protocol> ['unspecified]* data(const Protocol& p);
              template<class Protocol> const ['unspecified]* data(const Protocol& p) const;
              template<class Protocol> size_t size(const Protocol& p) const;
              template<class Protocol> void resize(const Protocol& p, size_t s);
              ``['[*// remainder unchanged]]``
            private:
  ``//          unsigned int value_;  ['[*exposition only]]``
            };

          } // namespace multicast
        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

[section [^ip::multicast::enable_loopback] members]

  enable_loopback();

[function_postconditions `!value()`.]

  explicit enable_loopback(bool v);

[function_postconditions `value() == v`.]

  enable_loopback& operator=(bool v);

[function_returns `*this`.]

[function_postconditions `value() == v`.]

  bool value() const;

[function_returns The stored socket option value. For __POSIX__
implementations, returns `value_ != 0`.]

  operator bool() const;

[function_returns `value()`.]

  bool operator!() const;

[function_returns `!value()`.]

[endsect]

[section [^ip::multicast::enable_loopback] __POSIX__ members]

  template<class Protocol> int level(const Protocol& p) const;

[function_returns `IPPROTO_IPV6` if `p.family() == AF_INET6`, otherwise
`IPPROTO_IP`.]

[function_note The constants `IPPROTO_IP` and `IPPROTO_IPV6` are defined in the
__POSIX__ header file __netinet_in_h__.]

  template<class Protocol> int name(const Protocol& p) const;

[function_returns `IPV6_MULTICAST_LOOP` if `p.family() == AF_INET6`, otherwise
`IP_MULTICAST_LOOP`.]

[function_note The constant `IPV6_MULTICAST_LOOP` is defined in the __POSIX__
header file __netinet_in_h__. [*Where is `IP_MULTICAST_LOOP` in __POSIX__?]]

  template<class Protocol> ``['unspecified]``* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> size_t size(const Protocol& p) const;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s != sizeof(value_)`.]
  
[endsect]

[endsect]
