[section:basic_stream_socket Class template [^basic_stream_socket]]
[xrefid socket.stream]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Protocol>
        class basic_stream_socket :
          public basic_socket<Protocol>
        {
        public:
          // types:

          typedef ``['implementation defined]`` native_handle_type; // See ``[link requirements.native_handles native handles]``
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // construct / copy / destroy:

          explicit basic_stream_socket(io_service& ios);
          basic_stream_socket(io_service& ios, const protocol_type& protocol);
          basic_stream_socket(io_service& ios, const endpoint_type& endpoint);
          basic_stream_socket(io_service& ios, const protocol_type& protocol,
                              const native_handle_type& native_socket);
          basic_stream_socket(const basic_stream_socket&) = delete;
          basic_stream_socket(basic_stream_socket&& rhs);
          template<class OtherProtocol>
            basic_stream_socket(basic_stream_socket<OtherProtocol>&& rhs);

          ~basic_stream_socket();

          basic_stream_socket& operator=(const basic_stream_socket&) = delete;
          basic_stream_socket& operator=(basic_stream_socket&& rhs);
          template<class OtherProtocol>
            basic_stream_socket& operator=(basic_stream_socket<OtherProtocol>&& rhs);

          // basic_stream_socket operations:

          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           error_code& ec);

          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags, error_code& ec);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive(const MutableBufferSequence& buffers,
                               CompletionToken&& token);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive(const MutableBufferSequence& buffers,
                               socket_base::message_flags flags,
                               CompletionToken&& token);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers, error_code& ec);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags, error_code& ec);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send(const ConstBufferSequence& buffers,
                            CompletionToken&& token);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send(const ConstBufferSequence& buffers,
                            socket_base::message_flags flags,
                            CompletionToken&& token);

          template<class MutableBufferSequence>
            size_t read_some(const MutableBufferSequence& buffers);
          template<class MutableBufferSequence>
            size_t read_some(const MutableBufferSequence& buffers,
                             error_code& ec);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_read_some(const MutableBufferSequence& buffers,
                                 CompletionToken&& token);

          template<class ConstBufferSequence>
            size_t write_some(const ConstBufferSequence& buffers);
          template<class ConstBufferSequence>
            size_t write_some(const ConstBufferSequence& buffers,
                              error_code& ec);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_write_some(const ConstBufferSequence& buffers,
                                  CompletionToken&& token);
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Instances of the `basic_stream_socket` class template meet the requirements for
[link requirements.sync_read_stream synchronous read streams], [link
requirements.sync_write_stream synchronous write streams], [link
requirements.async_read_stream asynchronous read streams], and [link
requirements.async_write_stream asynchronous write streams].

[section [^basic_stream_socket] constructors]
[xrefid socket.stream.cons]

  explicit basic_stream_socket(io_service& ios);

[function_effects Constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(ios)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol);

[function_effects Constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(ios, protocol)`.]

  basic_stream_socket(io_service& ios, const endpoint_type& endpoint);

[function_effects Constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(ios, endpoint)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol,
                        const native_handle_type& native_socket);

[function_effects Constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(ios, protocol, native_socket)`.]

  basic_stream_socket(basic_stream_socket&& rhs);

[function_effects Move constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(static_cast<basic_socket<Protocol>&&>(rhs))`.]

  template<class OtherProtocol>
    basic_stream_socket(basic_stream_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Move constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(static_cast<basic_socket<OtherProtocol>&&>(rhs))`.]

[function_remarks This constructor shall not participate in overload resolution
unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_stream_socket] assignment]
[xrefid socket.stream.assign]

  basic_stream_socket& operator=(basic_stream_socket&& rhs);

[function_effects Calls
`basic_socket<Protocol>::operator=(static_cast<basic_socket<Protocol>&&>(rhs))`.]

[function_returns `*this`.]

  template<class OtherProtocol>
    basic_stream_socket& operator=(basic_stream_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Calls
`basic_socket<Protocol>::operator=(static_cast<basic_socket<OtherProtocol>&&>(rhs))`.]

[function_returns `*this`.]

[function_remarks This assignment operator shall not participate in overload
resolution unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_stream_socket] operations]
[xrefid socket.stream.ops]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   error_code& ec);

[function_returns `receive(buffers, 0, ec)`.]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_read_operations synchronous
read operation].]

[function_effects Reads data from the socket, as if by __POSIX__ __recvmsg__,
where `flags` specifies the type of message reception. The operation shall not
block if `buffer_size(buffers) == 0`.]

[function_returns On success, the number of bytes received. Otherwise `0`.]

[function_error_conditions\n
[mdash] `stream_errc::eof` [mdash] if there is no data to be received and the
peer performed an orderly shutdown.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive(const MutableBufferSequence& buffers,
                       CompletionToken&& token);

[function_returns `async_receive(buffers, 0,
forward<CompletionToken>(token))`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags,
                       CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_requires `(flags & socket_base::message_peek) == 0`.]

[function_effects Initiates an asynchronous operation to read data from the
socket, as if by __POSIX__ __recvmsg__, where `flags` specifies the type of
message reception. The operation shall complete immediately if
`buffer_size(buffers) == 0`.]

[function_block When multiple asynchronous receive operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall fill the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous receive operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behavior is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, or `send`, while there is a pending asynchronous
receive operation, the behavior is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes received. Otherwise `n` is `0`.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `(flags &
socket_base::message_peek) != 0`.\n
[mdash] `stream_errc::eof` [mdash] if there is no data to be received and the
peer performed an orderly shutdown.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers, error_code& ec);

[function_returns `send(buffers, 0, ec)`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_write_operations synchronous
write operation].]

[function_effects Writes data to the socket, as if by __POSIX__ __sendmsg__,
where `flags` specifies the type of message transmission.]

[function_returns On success, the number of bytes sent. Otherwise `0`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send(const ConstBufferSequence& buffers, CompletionToken&& token);

[function_returns `async_send(buffers, 0, forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags,
                    CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to the
socket, as if by __POSIX__ __sendmsg__, where `flags` specifies the type of
message transmission.]

[function_block When multiple asynchronous send operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall transmit the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous send operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behavior is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, or `receive`, while there is a pending
asynchronous send operation, the behavior is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes sent. Otherwise `n` is `0`.]

  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers,
                     error_code& ec);

[function_returns `receive(buffers, 0, ec)`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_read_some(const MutableBufferSequence& buffers,
                         CompletionToken&& token);

[function_returns `async_receive(buffers, 0,
forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers,
                      error_code& ec);

[function_returns `send(buffers, 0, ec)`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_write_some(const ConstBufferSequence& buffers,
                          CompletionToken&& token);

[function_returns `async_send(buffers, 0, forward<CompletionToken>(token))`.]

[endsect]

[endsect]
