[section:basic_stream_socket Class template [^basic_stream_socket]]

Instances of the `basic_stream_socket` class template meet the requirements for
[link requirements.sync_read_stream synchronous read streams], [link
requirements.sync_write_stream synchronous write streams], [link
requirements.async_read_stream asynchronous read streams], and [link
requirements.async_write_stream asynchronous write streams].

  namespace std {
    namespace experimental {
      namespace network {

        template<class Protocol, class StreamSocketService>
        class basic_stream_socket :
          public basic_socket<StreamSocketService>
        {
        public:
          // types:
          typedef typename StreamSocketService::native_handle_type native_handle_type;
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // constructors:
          explicit basic_stream_socket(io_service& ios);
          basic_stream_socket(io_service& ios, const protocol_type& protocol);
          basic_stream_socket(io_service& ios, const endpoint_type& endpoint);
          basic_stream_socket(io_service& ios, const protocol_type& protocol,
                              const native_handle_type& native_socket);

          // members:
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           error_code& ec);

          template<class MutableBufferSequence, class ReadHandler>
            void async_receive(const MutableBufferSequence& buffers,
                               ReadHandler handler);

          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags, error_code& ec);

          template<class MutableBufferSequence, class ReadHandler>
            void async_receive(const MutableBufferSequence& buffers,
                               socket_base::message_flags flags,
                               ReadHandler handler);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers, error_code& ec);

          template<class ConstBufferSequence, class WriteHandler>
            void async_send(const ConstBufferSequence& buffers,
                            WriteHandler handler);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags, error_code& ec);

          template<class ConstBufferSequence, class WriteHandler>
            void async_send(const ConstBufferSequence& buffers,
                            socket_base::message_flags flags,
                            WriteHandler handler);

          template<class MutableBufferSequence>
            size_t read_some(const MutableBufferSequence& buffers);
          template<class MutableBufferSequence>
            size_t read_some(const MutableBufferSequence& buffers,
                             error_code& ec);

          template<class MutableBufferSequence, class ReadHandler>
            void async_read_some(const MutableBufferSequence& buffers,
                                 ReadHandler handler);

          template<class ConstBufferSequence>
            size_t write_some(const ConstBufferSequence& buffers);
          template<class ConstBufferSequence>
            size_t write_some(const ConstBufferSequence& buffers,
                              error_code& ec);

          template<class ConstBufferSequence, class WriteHandler>
            void async_write_some(const ConstBufferSequence& buffers,
                                  WriteHandler handler);
        };

      } // namespace network
    } // namespace experimental
  } // namespace std

[section [^basic_stream_socket] constructors]

  explicit basic_stream_socket(io_service& ios);

[function_effects Constructs an object of class `basic_stream_socket<Protocol,
StreamSocketService>`, initialising the base class with `basic_socket(ios)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol);

[function_effects Constructs an object of class `basic_stream_socket<Protocol,
StreamSocketService>`, initialising the base class with `basic_socket(ios,
protocol)`.]

  basic_stream_socket(io_service& ios, const endpoint_type& endpoint);

[function_effects Constructs an object of class `basic_stream_socket<Protocol,
StreamSocketService>`, initialising the base class with `basic_socket(ios,
endpoint)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol,
                      const native_handle_type& native_socket);

[function_effects Constructs an object of class `basic_stream_socket<Protocol,
SocketService>`, initialising the base class with `basic_socket(ios, protocol,
native_socket)`.]

[endsect]

[section [^basic_stream_socket] members]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   error_code& ec);

[function_returns `this->service.receive(this->implementation, buffers, 0, 0,
mutable_buffer(), ec)`.]

  template<class MutableBufferSequence, class ReadHandler>
    void async_receive(const MutableBufferSequence& buffers,
                       ReadHandler handler);

[function_effects Calls `this->service.async_receive(this->implementation,
buffers, 0, handler)`.]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags, error_code& ec);

[function_returns `this->service.receive(this->implementation, buffers, flags,
ec)`.]

  template<class MutableBufferSequence, class ReadHandler>
    void async_receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags,
                       ReadHandler handler);

[function_effects Calls `this->service.async_receive(this->implementation,
buffers, flags, handler)`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers, error_code& ec);

[function_returns `this->service.send(this->implementation, buffers, 0, ec)`.]

  template<class ConstBufferSequence, class WriteHandler>
    void async_send(const ConstBufferSequence& buffers, WriteHandler handler);

[function_effects Calls `this->service.async_send(this->implementation, buffers,
0, handler)`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags, error_code& ec);

[function_returns `this->service.send(this->implementation, buffers, flags,
ec)`.]

  template<class ConstBufferSequence, class WriteHandler>
    void async_send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags,
                    WriteHandler handler);

[function_effects Calls `this->service.async_send(this->implementation, buffers,
flags, handler)`.]

  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers,
                     error_code& ec);

[function_returns `this->service.receive(this->implementation, buffers, 0, 0,
mutable_buffer(), ec)`.]

  template<class MutableBufferSequence, class ReadHandler>
    void async_read_some(const MutableBufferSequence& buffers,
                         ReadHandler handler);

[function_effects Calls `this->service.async_receive(this->implementation,
buffers, 0, handler)`.]

  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers,
                      error_code& ec);

[function_returns `this->service.send(this->implementation, buffers, 0, ec)`.]

  template<class ConstBufferSequence, class WriteHandler>
    void async_write_some(const ConstBufferSequence& buffers,
                          WriteHandler handler);

[function_effects Calls `this->service.async_send(this->implementation, buffers,
0, handler)`.]

[endsect]

[endsect]
