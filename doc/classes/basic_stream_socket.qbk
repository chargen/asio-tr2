[section:basic_stream_socket Class template [^basic_stream_socket]]
[xrefid socket.stream]

The class template `basic_stream_socket<Protocol>` is used to exchange data
with a peer over a sequenced, reliable, bidirectional, connection-mode byte
stream.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Protocol>
    class basic_stream_socket : public basic_socket<Protocol>
    {
    public:
      // types:

      typedef ``['implementation defined]`` native_handle_type; // See ``[link requirements.native_handles native handles]``
      typedef Protocol protocol_type;
      typedef typename protocol_type::endpoint endpoint_type;

      // construct / copy / destroy:

      explicit basic_stream_socket(io_service& ios);
      basic_stream_socket(io_service& ios, const protocol_type& protocol);
      basic_stream_socket(io_service& ios, const endpoint_type& endpoint);
      basic_stream_socket(io_service& ios, const protocol_type& protocol,
                          const native_handle_type& native_socket);
      basic_stream_socket(const basic_stream_socket&) = delete;
      basic_stream_socket(basic_stream_socket&& rhs);
      template<class OtherProtocol>
        basic_stream_socket(basic_stream_socket<OtherProtocol>&& rhs);

      ~basic_stream_socket();

      basic_stream_socket& operator=(const basic_stream_socket&) = delete;
      basic_stream_socket& operator=(basic_stream_socket&& rhs);
      template<class OtherProtocol>
        basic_stream_socket& operator=(basic_stream_socket<OtherProtocol>&& rhs);

      // basic_stream_socket operations:

      template<class MutableBufferSequence>
        size_t receive(const MutableBufferSequence& buffers);
      template<class MutableBufferSequence>
        size_t receive(const MutableBufferSequence& buffers,
                       error_code& ec);

      template<class MutableBufferSequence>
        size_t receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags);
      template<class MutableBufferSequence>
        size_t receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags, error_code& ec);

      template<class MutableBufferSequence, class CompletionToken>
        __ifr__ async_receive(const MutableBufferSequence& buffers,
                           CompletionToken&& token);

      template<class MutableBufferSequence, class CompletionToken>
        __ifr__ async_receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags,
                           CompletionToken&& token);

      template<class ConstBufferSequence>
        size_t send(const ConstBufferSequence& buffers);
      template<class ConstBufferSequence>
        size_t send(const ConstBufferSequence& buffers, error_code& ec);

      template<class ConstBufferSequence>
        size_t send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags);
      template<class ConstBufferSequence>
        size_t send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags, error_code& ec);

      template<class ConstBufferSequence, class CompletionToken>
        __ifr__ async_send(const ConstBufferSequence& buffers,
                        CompletionToken&& token);

      template<class ConstBufferSequence, class CompletionToken>
        __ifr__ async_send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags,
                        CompletionToken&& token);

      template<class MutableBufferSequence>
        size_t read_some(const MutableBufferSequence& buffers);
      template<class MutableBufferSequence>
        size_t read_some(const MutableBufferSequence& buffers,
                         error_code& ec);

      template<class MutableBufferSequence, class CompletionToken>
        __ifr__ async_read_some(const MutableBufferSequence& buffers,
                             CompletionToken&& token);

      template<class ConstBufferSequence>
        size_t write_some(const ConstBufferSequence& buffers);
      template<class ConstBufferSequence>
        size_t write_some(const ConstBufferSequence& buffers,
                          error_code& ec);

      template<class ConstBufferSequence, class CompletionToken>
        __ifr__ async_write_some(const ConstBufferSequence& buffers,
                              CompletionToken&& token);
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Instances of the `basic_stream_socket` class template meet the requirements for
[link requirements.sync_read_stream synchronous read streams], [link
requirements.sync_write_stream synchronous write streams], [link
requirements.async_read_stream asynchronous read streams], and [link
requirements.async_write_stream asynchronous write streams].

For a given socket, a program may initiate asynchronous read or write
operations such that there are multiple simultaneously outstanding asynchronous
operations.

When there are multiple outstanding asynchronous read operations with zero
`flags`, the `buffers` are filled in the order in which the operations were
issued. The order of invocation of the handlers for these operations is
unspecified. When there are multiple asynchronous read operations, where at
least one has non-zero `flags`, the behavior is unspecified.

When there are multiple outstanding asynchronous write operations with zero
`flags`, the `buffers` are transmitted in the order in which the operations
were issued. The order of invocation of the handlers for these operations is
unspecified. When there are multiple outstanding asynchronous write operations,
where at least one has non-zero `flags`, the behavior is unspecified.

If a program performs a synchronous operation on this socket, other than
`close`, `cancel`, `shutdown`, or `send`, while there is an outstanding
asynchronous read operation, the behavior is undefined.

If a program performs a synchronous operation on this socket, other than
`close`, `cancel`, `shutdown`, or `receive`, while there is an outstanding
asynchronous write operation, the behavior is undefined.

[section [^basic_stream_socket] constructors]
[xrefid socket.stream.cons]

  explicit basic_stream_socket(io_service& ios);

[function_effects Initializes the base class with
`basic_socket<Protocol>(ios)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol);

[function_effects Initializes the base class with `basic_socket<Protocol>(ios,
protocol)`.]

  basic_stream_socket(io_service& ios, const endpoint_type& endpoint);

[function_effects Initializes the base class with `basic_socket<Protocol>(ios,
endpoint)`.]

  basic_stream_socket(io_service& ios, const protocol_type& protocol,
                        const native_handle_type& native_socket);

[function_effects Initializes the base class with `basic_socket<Protocol>(ios,
protocol, native_socket)`.]

  basic_stream_socket(basic_stream_socket&& rhs);

[function_effects Move constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(std::move(rhs))`.]

  template<class OtherProtocol>
    basic_stream_socket(basic_stream_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Move constructs an object of class
`basic_stream_socket<Protocol>`, initializing the base class with
`basic_socket<Protocol>(std::move(rhs))`.]

[function_remarks This constructor shall not participate in overload resolution
unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_stream_socket] assignment]
[xrefid socket.stream.assign]

  basic_stream_socket& operator=(basic_stream_socket&& rhs);

[function_effects Equivalent to
`basic_socket<Protocol>::operator=(std::move(rhs))`.]

[function_returns `*this`.]

  template<class OtherProtocol>
    basic_stream_socket& operator=(basic_stream_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Equivalent to
`basic_socket<Protocol>::operator=(std::move(rhs))`.]

[function_returns `*this`.]

[function_remarks This assignment operator shall not participate in overload
resolution unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_stream_socket] operations]
[xrefid socket.stream.ops]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   error_code& ec);

[function_returns `receive(buffers, socket_base::message_flags(), ec)`.]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_read_operations synchronous
read operation].]

[function_effects If `buffer_size(buffers) == 0`, returns immediately with no
error. Otherwise, constructs an array `iov` of __POSIX__ type `struct iovec`
and length `iovlen`, corresponding to `buffers`, and reads data from this
socket as if by __POSIX__:
``
  msghdr message;
  message.msg_name = nullptr;
  message.msg_namelen = 0;
  message.msg_iov = iov;
  message.msg_iovlen = iovlen;
  message.msg_control = nullptr;
  message.msg_controllen = 0;
  message.msg_flags = 0;
  __recvmsg__(native_handle(), &message, static_cast<int>(flags));
``]

[function_returns On success, the number of bytes received. Otherwise `0`.]

[function_error_conditions\n
[mdash] `stream_errc::eof` [mdash] if there is no data to be received and the
peer performed an orderly shutdown.]

  template<class MutableBufferSequence, class CompletionToken>
    __ifr__ async_receive(const MutableBufferSequence& buffers,
                       CompletionToken&& token);

[function_returns `async_receive(buffers, socket_base::message_flags(),
forward<CompletionToken>(token))`.]

  template<class MutableBufferSequence, class CompletionToken>
    __ifr__ async_receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags,
                       CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from this
socket. If `buffer_size(buffers) == 0`, the asynchronous operation completes
immediately with no error and `n == 0`. Otherwise, constructs an array `iov` of
__POSIX__ type `struct iovec` and length `iovlen`, corresponding to `buffers`,
then reads data as if by __POSIX__:
``
  msghdr message;
  message.msg_name = nullptr;
  message.msg_namelen = 0;
  message.msg_iov = iov;
  message.msg_iovlen = iovlen;
  message.msg_control = nullptr;
  message.msg_controllen = 0;
  message.msg_flags = 0;
  __recvmsg__(native_handle(), &message, static_cast<int>(flags));
``]

[function_block If the operation completes successfully, `n` is the number of
bytes received. Otherwise `n` is `0`.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `socket_base::message_peek` is set
in flags.
[mdash] `stream_errc::eof` [mdash] if there is no data to be received and the
peer performed an orderly shutdown.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers, error_code& ec);

[function_returns `send(buffers, socket_base::message_flags(), ec)`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_write_operations synchronous
write operation].]

[function_effects If `buffer_size(buffers) == 0`, returns immediately with no
error. Otherwise, constructs an array `iov` of __POSIX__ type `struct iovec`
and length `iovlen`, corresponding to `buffers`, and writes data to this socket
as if by __POSIX__:
``
  msghdr message;
  message.msg_name = nullptr;
  message.msg_namelen = 0;
  message.msg_iov = iov;
  message.msg_iovlen = iovlen;
  message.msg_control = nullptr;
  message.msg_controllen = 0;
  message.msg_flags = 0;
  __sendmsg__(native_handle(), &message, static_cast<int>(flags));
``]

[function_returns On success, the number of bytes sent. Otherwise `0`.]

  template<class ConstBufferSequence, class CompletionToken>
    __ifr__ async_send(const ConstBufferSequence& buffers, CompletionToken&& token);

[function_returns `async_send(buffers, socket_base::message_flags(),
forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence, class CompletionToken>
    __ifr__ async_send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags,
                    CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to this
socket. If `buffer_size(buffers) == 0`, the asynchronous operation completes
immediately with no error and `n == 0`. Otherwise, constructs an array `iov` of
__POSIX__ type `struct iovec` and length `iovlen`, corresponding to `buffers`,
then writes data as if by __POSIX__:
``
  msghdr message;
  message.msg_name = nullptr;
  message.msg_namelen = 0;
  message.msg_iov = iov;
  message.msg_iovlen = iovlen;
  message.msg_control = nullptr;
  message.msg_controllen = 0;
  message.msg_flags = 0;
  __sendmsg__(native_handle(), &message, static_cast<int>(flags));
``]

[function_block If the operation completes successfully, `n` is the number of
bytes sent. Otherwise `n` is `0`.]

  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t read_some(const MutableBufferSequence& buffers,
                     error_code& ec);

[function_returns `receive(buffers, ec)`.]

  template<class MutableBufferSequence, class CompletionToken>
    __ifr__ async_read_some(const MutableBufferSequence& buffers,
                         CompletionToken&& token);

[function_returns `async_receive(buffers, forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t write_some(const ConstBufferSequence& buffers,
                      error_code& ec);

[function_returns `send(buffers, ec)`.]

  template<class ConstBufferSequence, class CompletionToken>
    __ifr__ async_write_some(const ConstBufferSequence& buffers,
                          CompletionToken&& token);

[function_returns `async_send(buffers, forward<CompletionToken>(token))`.]

[endsect]

[endsect]
