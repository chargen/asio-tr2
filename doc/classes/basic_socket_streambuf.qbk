[section:basic_socket_streambuf Class template [^basic_socket_streambuf]]

  namespace std {
    namespace tr2 {
      namespace sys {

        template<class Protocol, class StreamSocketService>
        class basic_socket_streambuf :
          public basic_streambuf<char>,
          public basic_socket<Protocol, StreamSocketService>
        {
        public:
          // types:
          typedef typename Protocol::endpoint endpoint_type;

          // constructors/destructor:
          basic_socket_streambuf();
          virtual ~basic_socket_streambuf();

          // members:
          basic_socket_streambuf<Protocol, StreamSocketService>*
            connect(const endpoint_type& e);
          template<class T1, ..., class TN>
            basic_socket_streambuf<Protocol, StreamSocketService>*
              connect(T1 t1, ..., TN tn);

          basic_socket_streambuf<Protocol, StreamSocketService>* close();

        protected:
          // overridden virtual functions:
          virtual streamsize showmanyc();
          virtual int_type underflow();
          virtual int_type pbackfail(int_type c = traits_type::eof());
          virtual int_type overflow(int_type c = traits_type::eof());
          virtual int sync();
          virtual streambuf* setbuf(char_type* s, streamsize n);
        };

      } // namespace sys
    } // namespace tr2
  } // namespace std

The class `basic_socket_streambuf<Protocol, StreamSocketService>` associates
both the input sequence and the output sequence with a socket. The input and
output sequences are independent and do not support seeking. Multibyte/wide
character conversion is not supported.

[section [^basic_socket_streambuf] constructors]

  basic_socket_streambuf();

[function_effects Constructs an object of class
`basic_socket_streambuf<Protocol, StreamSocketService>`, initialising the base
classes with `basic_streambuf<char>()` and `basic_socket<Protocol,
StreamSocketService>(ios)`, where `ios` is an implementation-defined value of
class `io_service` that has a longer lifetime than the `basic_socket<Protocol,
StreamSocketService>` base.]

  virtual ~basic_socket_streambuf();

[function_effects Destroys an object of class `basic_socket_streambuf<Protocol,
StreamSocketService>`. If a put area exists, calls `overflow(EOF)` to flush
characters. [std_note The socket is closed by the `basic_socket<Protocol,
StreamSocketService>` destructor.]]

[endsect]

[section [^basic_socket_streambuf] members]

  basic_socket_streambuf<Protocol, StreamSocketService>*
    connect(const endpoint_type& e);

[function_effects Resets the `streambuf` get and put areas, then opens a
connection as if by calling:
``
  error_code ec;
  this->basic_socket<Protocol, StreamSocketService>::close(ec);
  this->basic_socket<Protocol, StreamSocketService>::connect(*i, ec);
``]

[function_returns `this` if `ec` indicates that a connection was successfully
established, a null pointer otherwise.]

  template<class T1, ..., class TN>
    basic_socket_streambuf<Protocol, StreamSocketService>*
      connect(T1 t1, ..., TN tn);

[function_requires The `Protocol` type must implement the additional
requirements for a [link requirements.resolver_protocol resolver protocol].]

[function_effects Resets the `streambuf` get and put areas, then opens a
connection as if by calling:
``
  typename Protocol::resolver_query query(t1, __dotdotdot__, tn);
  typename Protocol::resolver resolver(
      this->basic_socket<Protocol, StreamSocketService>::io_service());
  typename Protocol::resolver_iterator i = resolver.resolve(query);
  typename Protocol::resolver_iterator end;
  error_code ec = error::host_not_found;
  while (ec && i != end)
  {
    this->basic_socket<Protocol, StreamSocketService>::close(ec);
    this->basic_socket<Protocol, StreamSocketService>::connect(*i, ec);
    ++i;
  }
``]

[function_returns `this` if `ec` indicates that a connection was successfully
established, a null pointer otherwise.]

  basic_socket_streambuf<Protocol, StreamSocketService>* close();

[function_effects If a put area exists, calls `overflow(EOF)` to flush
characters. Calls:
``
  error_code ec;
  this->basic_socket<Protocol, StreamSocketService>::close(ec);
``
then resets the get and put areas. If the call to `overflow` fails or if the
value of `ec` indicates failure then `close` fails.]

[function_returns `this` on success, a null pointer otherwise.]

[endsect]

[endsect]
