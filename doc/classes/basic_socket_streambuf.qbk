[section:basic_socket_streambuf Class template [^basic_socket_streambuf]]
[xrefid socket.streambuf]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Protocol, class Clock, class WaitTraits>
        class basic_socket_streambuf :
          public basic_streambuf<char>,
          public basic_socket<Protocol>
        {
        public:
          // types:

          typedef Protocol protocol_type;
          typedef typename protocol_type::endpoint endpoint_type;
          typedef Clock clock_type;
          typedef typename clock_type::time_point time_point;
          typedef typename clock_type::duration duration;
          typedef WaitTraits traits_type;

          // construct / destroy:

          basic_socket_streambuf();
          virtual ~basic_socket_streambuf();

          // members:

          basic_socket_streambuf* connect(const endpoint_type& e);
          template<class... Args> basic_socket_streambuf* connect(Args&&... );

          basic_socket_streambuf<protocol_type>* close();

          error_code puberror() const;

          time_point expiry() const;
          void expires_at(const time_point& t);
          void expires_after(const duration& d);

        protected:
          // overridden virtual functions:
          virtual int_type underflow();
          virtual int_type pbackfail(int_type c = traits_type::eof());
          virtual int_type overflow(int_type c = traits_type::eof());
          virtual int sync();
          virtual streambuf* setbuf(char_type* s, streamsize n);
          virtual error_code error() const;

        private:
          error_code ec_; // ``['exposition only]``
          time_point expiry_; // ``['exposition only]``
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The class `basic_socket_streambuf<protocol_type>` associates both the input sequence
and the output sequence with a socket. The input and output sequences are
independent and do not support seeking. Multibyte/wide character conversion is
not supported.

[section [^basic_socket_streambuf] constructors]
[xrefid socket.streambuf.cons]

  basic_socket_streambuf();

[function_effects Constructs an object of class
`basic_socket_streambuf<protocol_type>`, initializing the base classes with
`basic_streambuf<char>()` and `basic_socket<protocol_type>(ios)`, where `ios` is an
unspecified object of class `io_service` that has a longer lifetime than the
`basic_socket<protocol_type>` base.]

[function_postconditions `expiry() == clock_type::max()`.]

  virtual ~basic_socket_streambuf();

[function_effects Destroys an object of class
`basic_socket_streambuf<protocol_type>`. If a put area exists, calls
`overflow(traits_type::eof())` to flush characters. [inline_note The socket is
closed by the `basic_socket<protocol_type>` destructor.]]

[endsect]

[section [^basic_socket_streambuf] members]
[xrefid socket.streambuf.members]

  basic_socket_streambuf<protocol_type>* connect(const endpoint_type& e);

[function_effects Resets the `streambuf` get and put areas, closes the socket
as if by calling `basic_socket<protocol_type>::close(ec_)`, then establishes a
connection as if by performing:
``
  basic_socket<protocol_type>::async_connect(e, __unspecified__);
``
`ec_` is set to reflect the error code produced by the operation. If the
operation does not complete before the absolute timeout specified by
`expiry_`, the socket is closed and `ec_` is set to
`errc::operation_canceled`.]

[function_returns if `!ec_`, `this`; otherwise, a null pointer.]

  template<class... Args>
    basic_socket_streambuf* connect(Args&&... args);

[function_effects Resets the `streambuf` get and put areas. Constructs an
object `q` of type `protocol_type::resolver::query` by initializing the object with
`q(forward<Args>(args)__dotdotdot__)`, then establishes a connection as if by
performing:
``
  typename protocol_type::resolver resolver(ios);
  typename protocol_type::resolver::iterator i = resolver.resolve(q, ec_);
  if (!ec_)
    std::experimental::__versioned_ns__::async_connect(*this, i, __unspecified__);
``

where `ios` is an unspecified object of class `io_service`. `ec_` is set to
reflect the error code produced by the asynchronous operation. If the operation
does not complete before the absolute timeout specified by `expiry_`, the
socket is closed and `ec_` is set to `errc::operation_canceled`.]

[function_returns if `!ec_`, `this`; otherwise, a null pointer.]

[function_remarks This function shall not participate in overload resolution
unless `Protocol` meets the requirements for an [link
requirements.internet_protocol internet protocol].]

  basic_socket_streambuf* close();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters. Calls:
``
  basic_socket<protocol_type>::close(ec_);
``
then resets the get and put areas. If the call to `overflow` fails, or if `!ec_`,
then `close` fails.]

[function_returns `this` on success, a null pointer otherwise.]

  error_code puberror() const;

[function_returns `error()`.]

  time_point expiry() const;

[function_returns `expiry_`.]

  void expires_at(const time_point& t);

[function_postconditions `expiry_ == t`.]

  void expires_after(const duration& d);

[function_effects Calls `expires_at(clock_type::now() + d)`.]

[endsect]

[section [^basic_socket_streambuf] overridden virtual functions]
[xrefid socket.streambuf.virtual]

  virtual int_type underflow();

[function_effects Behaves according to the description of
`basic_streambuf<char>::underflow()`, with the specialization that a sequence
of characters is read from the input sequence as if by __POSIX__ __recvmsg__,
and `ec_` is set to reflect the error code produced by the operation. If the
operation does not complete before the absolute timeout specified by `expiry_`,
the socket is closed and `ec_` is set to `errc::operation_canceled`.]

[function_effects Returns `traits_type::eof()` to indicate failure. Otherwise
returns `traits_type::to_int_type(*gptr())`.]

  virtual int_type pbackfail(int_type c = traits_type::eof());

[function_effects Puts back the character designated by `c` to the input
sequence, if possible, in one of three ways:\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`,
and if the function makes a putback position available, and if
`traits_type::eq(traits_type::to_char_type(c),gptr()[-1])` returns `true`,
decrements the next pointer for the input sequence, `gptr()`.\nReturns: `c`.\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`,
and if the function makes a putback position available, and if the function is
permitted to assign to the putback position, decrements the next pointer for
the input sequence, and stores `c` there.\nReturns: `c`.\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `true`, and
if either the input sequence has a putback position available or the function
makes a putback position available, decrements the next pointer for the input
sequence, `gptr()`.\nReturns: `traits_type::not_eof(c)`.]

[function_returns `traits_type::eof()` to indicate failure.]

[function_notes The function does not put back a character directly to the
input sequence. If the function can succeed in more than one of these ways, it
is unspecified which way is chosen. The function can alter the number of
putback positions available as a result of any call.]

  virtual int_type overflow(int_type c = traits_type::eof());

[function_effects Behaves according to the description of
`basic_streambuf<char>::overflow(c)`, except that the behavior of "consuming
characters" is performed by output of the characters to the socket as if by one
or more calls to __POSIX__ __sendmsg__, and `ec_` is set to reflect the error
code produced by the operation. If the operation does not complete before the
absolute timeout specified by `expiry_`, the socket is closed and `ec_` is set
to `errc::operation_canceled`.]

[function_returns `traits_type::not_eof(c)` to indicate success, and
`traits_type::eof()` to indicate failure.]

  virtual int sync();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters.]

  virtual streambuf* setbuf(char_type* s, streamsize n);

[function_effects If `setbuf(0,0)` is called on a stream before any I/O has
occurred on that stream, the stream becomes unbuffered. Otherwise the results
are unspecified. "Unbuffered" means that `pbase()` and `pptr()` always return
null and output to the socket should appear as soon as possible.]

  virtual error_code error() const;

[function_returns `ec_`.]

[endsect]

[endsect]
