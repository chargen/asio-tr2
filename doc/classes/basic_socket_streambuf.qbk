[section:basic_socket_streambuf Class template [^basic_socket_streambuf]]

  namespace std {
    namespace tr2 {
      namespace sys {

        template<class Protocol, class StreamSocketService>
        class basic_socket_streambuf :
          public basic_streambuf<char>,
          public basic_socket<Protocol, StreamSocketService>
        {
        public:
          // types:
          typedef typename Protocol::endpoint endpoint_type;

          // constructors/destructor:
          basic_socket_streambuf();
          virtual ~basic_socket_streambuf();

          // members:
          basic_socket_streambuf<Protocol, StreamSocketService>*
            connect(const endpoint_type& e);
          template<class T1, class T2, ..., class TN>
            basic_socket_streambuf<Protocol, StreamSocketService>*
              connect(T1 t1, T2 t2, ..., TN tN);

          basic_socket_streambuf<Protocol, StreamSocketService>* close();

        protected:
          // overridden virtual functions:
          virtual int_type underflow();
          virtual int_type pbackfail(int_type c = traits_type::eof());
          virtual int_type overflow(int_type c = traits_type::eof());
          virtual int sync();
          virtual streambuf* setbuf(char_type* s, streamsize n);
        };

      } // namespace sys
    } // namespace tr2
  } // namespace std

The class `basic_socket_streambuf<Protocol, StreamSocketService>` associates
both the input sequence and the output sequence with a socket. The input and
output sequences are independent and do not support seeking. Multibyte/wide
character conversion is not supported.

[section [^basic_socket_streambuf] constructors]

  basic_socket_streambuf();

[function_effects Constructs an object of class
`basic_socket_streambuf<Protocol, StreamSocketService>`, initialising the base
classes with `basic_streambuf<char>()` and `basic_socket<Protocol,
StreamSocketService>(ios)`, where `ios` is an implementation-defined object of
class `io_service` that has a longer lifetime than the `basic_socket<Protocol,
StreamSocketService>` base.]

  virtual ~basic_socket_streambuf();

[function_effects Destroys an object of class `basic_socket_streambuf<Protocol,
StreamSocketService>`. If a put area exists, calls
`overflow(traits_type::eof())` to flush characters. [inline_note The socket is
closed by the `basic_socket<Protocol, StreamSocketService>` destructor.]]

[endsect]

[section [^basic_socket_streambuf] members]

  basic_socket_streambuf<Protocol, StreamSocketService>*
    connect(const endpoint_type& e);

[function_effects Resets the `streambuf` get and put areas, then opens a
connection as if by calling:
``
  error_code ec;
  this->basic_socket<Protocol, StreamSocketService>::close(ec);
  this->basic_socket<Protocol, StreamSocketService>::connect(*i, ec);
``]

[function_returns `this` if `ec` indicates that a connection was successfully
established, a null pointer otherwise.]

  template<class T1, class T2, ..., class TN>
    basic_socket_streambuf<Protocol, StreamSocketService>*
      connect(T1 t1, T2 t2, ..., TN tN);

[function_requires The `Protocol` type must implement the additional
requirements for a [link requirements.resolver_protocol resolver protocol].]

[function_effects Resets the `streambuf` get and put areas, then opens a
connection as if by calling:
``
  typename Protocol::resolver_query query(t1, t2, __dotdotdot__, tN);
  typename Protocol::resolver resolver(
      this->basic_socket<Protocol, StreamSocketService>::io_service());
  typename Protocol::resolver_iterator i = resolver.resolve(query);
  typename Protocol::resolver_iterator end;
  error_code ec = error::host_not_found;
  while (ec && i != end)
  {
    this->basic_socket<Protocol, StreamSocketService>::close(ec);
    this->basic_socket<Protocol, StreamSocketService>::connect(*i, ec);
    ++i;
  }
``]

[function_returns `this` if `ec` indicates that a connection was successfully
established, a null pointer otherwise.]

  basic_socket_streambuf<Protocol, StreamSocketService>* close();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters. Calls:
``
  error_code ec;
  this->basic_socket<Protocol, StreamSocketService>::close(ec);
``
then resets the get and put areas. If the call to `overflow` fails or if the
value of `ec` indicates failure then `close` fails.]

[function_returns `this` on success, a null pointer otherwise.]

[endsect]

[section [^basic_socket_streambuf] overridden virtual functions]

  virtual int_type underflow();

[function_effects Behaves according to the description of
`basic_streambuf<char>::underflow()`, with the specialisation that a sequence
of characters is read from the input sequence as if by reading from the socket
into an internal buffer as if by calling
`this->service.receive(this->implementation, __dotdotdot__)`.]

[function_effects Returns `traits_type::eof()` to indicate failure. Otherwise
returns `traits_type::to_int_type(*gptr())`.]

  virtual int_type pbackfail(int_type c = traits_type::eof());

[function_effects Puts back the character designated by `c` to the input
sequence, if possible, in one of three ways:\n
\n
- If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`, and if
the function makes a putback position available, and if
`traits_type::eq(traits_type::to_char_type(c),gptr()[-1])` returns `true`,
decrements the next pointer for the input sequence, `gptr()`.\nReturns: `c`.\n
\n
- If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`, and if
the function makes a putback position available, and if the function is
permitted to assign to the putback position, decrements the next pointer for
the input sequence, and stores `c` there.\nReturns: `c`.\n
\n
- If `traits_type::eq_int_type(c,traits_type::eof())` returns `true`, and if
either the input sequence has a putback position available or the function
makes a putback position available, decrements the next pointer for the input
sequence, `gptr()`.\nReturns: `traits_type::not_eof(c)`.]

[function_returns `traits_type::eof()` to indicate failure.]

[function_notes The function does not put back a character directly to the
input sequence. If the function can succeed in more than one of these ways, it
is unspecified which way is chosen. The function can alter the number of
putback positions available as a result of any call.]

  virtual int_type overflow(int_type c = traits_type::eof());

[function_effects Behaves according to the description of
`basic_streambuf<char>::overflow(c)`, except that the behaviour of "consuming
characters" is performed by output of the characters to the socket as if by one
or more calls to `this->service.send(this->implementation, __dotdotdot__)`.]

[function_returns `traits_type::not_eof(c)` to indicate success, and
`traits_type::eof()` to indicate failure.]

  virtual int sync();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters.]

  virtual streambuf* setbuf(char_type* s, streamsize n);

[function_effects If `setbuf(0,0)` is called on a stream before any I/O has
occurred on that stream, the stream becomes unbuffered. Otherwise the results
are implementation-defined. "Unbuffered" means that `pbase()` and `pptr()`
always return null and output to the socket should appear as soon as possible.]

[endsect]

[endsect]
