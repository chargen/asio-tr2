[section:basic_socket_streambuf Class template [^basic_socket_streambuf]]
[xrefid socket.streambuf]

The class `basic_socket_streambuf<Protocol, Clock, WaitTraits>` associates both
the input sequence and the output sequence with a socket. The input and output
sequences do not support seeking. [inline_note The input and output sequences
are independent as a stream socket provides full duplex I/O.]

[std_note This class is intended for sending and receiving bytes, not
characters. The conversion from characters to bytes, and vice versa, must occur
elsewhere.]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Protocol, class Clock, class WaitTraits>
    class basic_socket_streambuf : public basic_streambuf<char>
    {
    public:
      // types:

      typedef Protocol protocol_type;
      typedef typename protocol_type::endpoint endpoint_type;
      typedef Clock clock_type;
      typedef typename clock_type::time_point time_point;
      typedef typename clock_type::duration duration;
      typedef WaitTraits traits_type;

      // construct / copy / destroy:

      basic_socket_streambuf();
      explicit basic_socket_streambuf(basic_stream_socket<protocol_type> s);
      basic_socket_streambuf(const basic_socket_streambuf&) = delete;
      basic_socket_streambuf(basic_socket_streambuf&& rhs);

      virtual ~basic_socket_streambuf();

      basic_socket_streambuf& operator=(const basic_socket_streambuf&) = delete;
      basic_socket_streambuf& operator=(basic_socket_streambuf&& rhs);

      // members:

      basic_socket_streambuf* connect(const endpoint_type& e);
      template<class... Args> basic_socket_streambuf* connect(Args&&... );

      basic_socket_streambuf<protocol_type>* close();

      basic_socket<protocol_type>& socket();
      error_code error() const;

      time_point expiry() const;
      void expires_at(const time_point& t);
      void expires_after(const duration& d);

    protected:
      // overridden virtual functions:
      virtual int_type underflow() override;
      virtual int_type pbackfail(int_type c = traits_type::eof()) override;
      virtual int_type overflow(int_type c = traits_type::eof()) override;
      virtual int sync() override;
      virtual streambuf* setbuf(char_type* s, streamsize n) override;

    private:
      basic_stream_socket<protocol_type> socket_; // ``['exposition only]``
      error_code ec_; // ``['exposition only]``
      time_point expiry_; // ``['exposition only]``
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Instances of class template `basic_socket_streambuf` meet the requirements of
`Destructible` (C++ Std, [destructible]), `MoveConstructible` (C++ Std,
[moveconstructible]), and `MoveAssignable` (C++ Std, [moveassignable]).

[section [^basic_socket_streambuf] constructors]
[xrefid socket.streambuf.cons]

  basic_socket_streambuf();

[function_effects Initializes `socket_` with `ctx`, where `ctx` is an
unspecified object of class `io_context`.]

[function_postconditions `expiry() == clock_type::max()`.]

  explicit basic_socket_streambuf(basic_stream_socket<protocol_type> s);

[function_effects Initializes `socket_` with `std::move(s)`.]

[function_postconditions `expiry() == clock_type::max()`.]

  basic_socket_streambuf(basic_socket_streambuf&& rhs);

[function_effects Move constructs from the rvalue `rhs`. It is
implementation-defined whether the sequence pointers in `*this` (`eback()`,
`gptr()`, `egptr()`, `pbase()`, `pptr()`, `epptr()`) obtain the values which
`rhs` had. Whether they do or not, `*this` and `rhs` reference separate buffers
(if any at all) after the construction. Additionally `*this` references the
socket which `rhs` did before the construction, and `rhs` references no open
socket after the construction.]

[function_postconditions Let `rhs_p` refer to the state of `rhs` just prior to
this construction and let `rhs_a` refer to the state of `rhs` just after this
construction.\n
[mdash] `is_open() == rhs_p.is_open()`\n
[mdash] `rhs_a.is_open() == false`\n
[mdash] `expiry() == rhs_p.expiry()`\n
[mdash] `rhs_a.expiry() == clock_type::max()`\n
[mdash] `gptr() - eback() == rhs_p.gptr() - rhs_p.eback()`\n
[mdash] `egptr() - eback() == rhs_p.egptr() - rhs_p.eback()`\n
[mdash] `ptr() - pbase() == rhs_p.pptr() - rhs_p.pbase()`\n
[mdash] `pptr() - pbase() == rhs_p.epptr() - rhs_p.pbase()`\n
[mdash] `if (eback()) eback() != rhs_a.eback()`\n
[mdash] `if (gptr()) gptr() != rhs_a.gptr()`\n
[mdash] `if (egptr()) egptr() != rhs_a.egptr()`\n
[mdash] `if (pbase()) pbase() != rhs_a.pbase()`\n
[mdash] `if (pptr()) pptr() != rhs_a.pptr()`\n
[mdash] `if (epptr()) epptr() != rhs_a.epptr()`]

  virtual ~basic_socket_streambuf();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters. [inline_note The socket is closed by the
`basic_stream_socket<protocol_type>` destructor.]]

  basic_socket_streambuf& operator=(basic_socket_streambuf&& rhs);

[function_effects Calls `this->close()` then move assigns from `rhs`. After the
move assignment `*this` has the observable state it would have had if it had been
move constructed from `rhs`.]

[function_returns `*this`.]

[endsect]

[section [^basic_socket_streambuf] members]
[xrefid socket.streambuf.members]

  basic_socket_streambuf<protocol_type>* connect(const endpoint_type& e);

[function_effects Initializes the `basic_socket_streambuf` as required, closes
and re-opens the socket by performing `socket_.close(ec_)` and
`socket_.open(e.protocol(), ec_)`, then attempts to establish a connection as
if by __POSIX__ `__connect__(socket_.native_handle(),
static_cast<sockaddr*>(e.data()), e.size())`. `ec_` is set to reflect the error
code produced by the operation. If the operation does not complete before the
absolute timeout specified by `expiry_`, the socket is closed and `ec_` is set
to `errc::timed_out`.]

[function_returns if `!ec_`, `this`; otherwise, a null pointer.]

  template<class... Args>
    basic_socket_streambuf* connect(Args&&... args);

[function_effects Initializes the `basic_socket_streambuf` as required and
closes the socket as if by calling `socket_.close(ec_)`. Obtains an endpoint
sequence `endpoints` by performing
`protocol_type::resolver(ctx).resolve(forward<Args>(args)__dotdotdot__)`, where
`ctx` is an unspecified object of class `io_context`. For each endpoint `e` in
the sequence, closes and re-opens the socket by performing `socket_.close(ec_)`
and `socket_.open(e.protocol(), ec_)`, then attempts to establish a connection
as if by __POSIX__ `__connect__(socket_.native_handle(),
static_cast<sockaddr*>(e.data()), e.size())`. `ec_` is set to reflect the error
code produced by the operation. If the operation does not complete before the
absolute timeout specified by `expiry_`, the socket is closed and `ec_` is set
to `errc::timed_out`.]

[function_returns if `!ec_`, `this`; otherwise, a null pointer.]

[function_remarks This function shall not participate in overload resolution
unless `Protocol` meets the requirements for an [link
requirements.internet_protocol internet protocol].]

  basic_socket_streambuf* close();

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters. Regardless of whether the preceding call fails or throws an
exception, the function closes the socket as if by
`basic_socket<protocol_type>::close(ec_)`. If any of the calls made by the
function fail, `close` fails by returning a null pointer. If one of these calls
throws an exception, the exception is caught and rethrown after closing the
socket.]

[function_returns `this` on success, a null pointer otherwise.]

[function_postcondition `is_open() == false`.]

  basic_socket<protocol_type>& socket();

[function_returns `socket_`.]

  error_code error() const;

[function_returns `ec_`.]

  time_point expiry() const;

[function_returns `expiry_`.]

  void expires_at(const time_point& t);

[function_postconditions `expiry_ == t`.]

  void expires_after(const duration& d);

[function_effects Equivalent to `expires_at(clock_type::now() + d)`.]

[endsect]

[section [^basic_socket_streambuf] overridden virtual functions]
[xrefid socket.streambuf.virtual]

  virtual int_type underflow() override;

[function_effects Behaves according to the description of
`basic_streambuf<char>::underflow()`, with the specialization that a sequence
of characters is read from the input sequence as if by __POSIX__ __recvmsg__,
and `ec_` is set to reflect the error code produced by the operation. If the
operation does not complete before the absolute timeout specified by `expiry_`,
the socket is closed and `ec_` is set to `errc::timed_out`.]

[function_effects Returns `traits_type::eof()` to indicate failure. Otherwise
returns `traits_type::to_int_type(*gptr())`.]

  virtual int_type pbackfail(int_type c = traits_type::eof()) override;

[function_effects Puts back the character designated by `c` to the input
sequence, if possible, in one of three ways:\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`,
and if the function makes a putback position available, and if
`traits_type::eq(traits_type::to_char_type(c),gptr()[-1])` returns `true`,
decrements the next pointer for the input sequence, `gptr()`.\nReturns: `c`.\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `false`,
and if the function makes a putback position available, and if the function is
permitted to assign to the putback position, decrements the next pointer for
the input sequence, and stores `c` there.\nReturns: `c`.\n
\n
[mdash] If `traits_type::eq_int_type(c,traits_type::eof())` returns `true`, and
if either the input sequence has a putback position available or the function
makes a putback position available, decrements the next pointer for the input
sequence, `gptr()`.\nReturns: `traits_type::not_eof(c)`.]

[function_returns `traits_type::eof()` to indicate failure.]

[function_notes The function does not put back a character directly to the
input sequence. If the function can succeed in more than one of these ways, it
is unspecified which way is chosen. The function can alter the number of
putback positions available as a result of any call.]

  virtual int_type overflow(int_type c = traits_type::eof()) override;

[function_effects Behaves according to the description of
`basic_streambuf<char>::overflow(c)`, except that the behavior of "consuming
characters" is performed by output of the characters to the socket as if by one
or more calls to __POSIX__ __sendmsg__, and `ec_` is set to reflect the error
code produced by the operation. If the operation does not complete before the
absolute timeout specified by `expiry_`, the socket is closed and `ec_` is set
to `errc::timed_out`.]

[function_returns `traits_type::not_eof(c)` to indicate success, and
`traits_type::eof()` to indicate failure.]

  virtual int sync() override;

[function_effects If a put area exists, calls `overflow(traits_type::eof())` to
flush characters.]

  virtual streambuf* setbuf(char_type* s, streamsize n) override;

[function_effects If `setbuf(nullptr, 0)` is called on a stream before any I/O has
occurred on that stream, the stream becomes unbuffered. Otherwise the results
are unspecified. "Unbuffered" means that `pbase()` and `pptr()` always return
null and output to the socket should appear as soon as possible.]

[endsect]

[endsect]
