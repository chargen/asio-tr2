[section:socket_base Class [^socket_base]]
[xrefid socket.base]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class socket_base
        {
        public:
          class ``[link classes.socket_base__bool_socket_options broadcast]``;
          class ``[link classes.socket_base__bool_socket_options debug]``;
          class ``[link classes.socket_base__bool_socket_options do_not_route]``;
          class ``[link classes.socket_base__bool_socket_options keep_alive]``;
          class ``[link classes.socket_base__linger linger]``;
          class ``[link classes.socket_base__bool_socket_options out_of_band_inline]``;
          class ``[link classes.socket_base__int_socket_options receive_buffer_size]``;
          class ``[link classes.socket_base__int_socket_options receive_low_watermark]``;
          class ``[link classes.socket_base__bool_socket_options reuse_address]``;
          class ``[link classes.socket_base__int_socket_options send_buffer_size]``;
          class ``[link classes.socket_base__int_socket_options send_low_watermark]``;

          typedef ``['[*T1]]`` shutdown_type;
          static constexpr shutdown_type shutdown_receive;
          static constexpr shutdown_type shutdown_send;
          static constexpr shutdown_type shutdown_both;

          typedef ``['[*T2]]`` wait_type;
          static constexpr wait_type wait_read;
          static constexpr wait_type wait_write;
          static constexpr wait_type wait_error;

          typedef ``['[*T3]]`` message_flags;
          static constexpr message_flags message_peek;
          static constexpr message_flags message_out_of_band;
          static constexpr message_flags message_do_not_route;

          static const int max_listen_connections;

        protected:
          socket_base();
          ~socket_base();
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

`socket_base` defines several member types:

[mdash] socket option classes `broadcast`, `debug`, `do_not_route`,
`keep_alive`, `linger`, `out_of_band_inline`, `receive_buffer_size`,
`receive_low_watermark`, `reuse_address`, `send_buffer_size`, and
`send_low_watermark`;

[mdash] an enumerated type, `shutdown_type`;

[mdash] an enumerated type, `wait_type`;

[mdash] a bitmask type, `message_flags`.

The value `max_listen_connections` contains the implementation-defined limit on
the length of the queue of pending incoming connections.

[section Enumerated type `shutdown_type`]
[xrefid socket.base.shutdown]

This enumerated type specifies constants for use with the
`basic_socket<Protocol>` class's `shutdown` member function.

[table
  [[Constant Name][__POSIX__ macro][Definition or notes]]
  [[`shutdown_receive`][`SHUT_RD`][Disables further receive operations.]]
  [[`shutdown_send`][`SHUT_WR`][Disables further send operations.]]
  [[`shutdown_both`][`SHUT_RDWR`][Disables further send and receive operations.]]
]

[endsect]

[section Enumerated type `wait_type`]
[xrefid socket.base.wait]

This enumerated type specifies constants for use with the
`basic_socket<Protocol>` class's `wait` and `async_wait` member functions.

[table
  [[Constant Name][Definition or notes]]
  [
    [`wait_read`]
    [Wait until the socket is ready-to-read.]
  ]
  [
    [`wait_write`]
    [Wait until the socket is ready-to-write.]
  ]
  [
    [`wait_error`]
    [Wait until the socket has a pending error condition.]
  ]
]

[endsect]

[section Bitmask type `message_flags`]
[xrefid socket.base.message]

This bitmask type specifies constants for use with the
`basic_stream_socket<Protocol>` class's `send` and `receive` member functions,
and the `basic_datagram_socket<Protocol>` class's `send`, `send_to`,
`receive`, and `receive_from` member functions.

[table
  [[Constant Name][__POSIX__ macro][Definition or notes]]
  [[`message_peek`][`MSG_PEEK`][Leave received data in queue.]]
  [[`message_out_of_band`][`MSG_OOB`][Out-of-band data.]]
  [[`message_do_not_route`][`MSG_DONTROUTE`][Send without using routing tables.]]
]

[endsect]

[endsect]
