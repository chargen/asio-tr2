[section:wait_traits Class template [^wait_traits]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Clock>
        struct wait_traits
        {
          static typename Clock::duration to_wait_duration(
            const typename Clock::duration& d);

          static typename Clock::duration to_wait_duration(
            const typename Clock::time_point& t);
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

Class template `wait_traits` satisfies the [link requirements.wait_traits
`WaitTraits`] type requirements. Template argument `Clock` is a type meeting
the `Clock` requirements (C++ Std [time.clock.req]).

[section Class template [^wait_traits] members]

  static typename Clock::duration to_wait_duration(
    const typename Clock::duration& d);

[function_returns `d`.]

  static typename Clock::duration to_wait_duration(
    const typename Clock::time_point& t);

[function_returns Let `now` be `Clock::now()`. If `now +
Clock::duration::max()` is before `t`, `Clock::duration::max()`; if `now +
Clock::duration::min()` is after `t`, `Clock::duration::min()`; otherwise, `t -
now`.]

[endsect]

[endsect]
