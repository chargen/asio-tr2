[section:ip__udp Class [^ip::udp]]

The `udp` class meets the requirements for an [link
requirements.internet_protocol `InternetProtocol`].

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {

          class udp
          {
          public:
            // types:
            typedef basic_endpoint<udp> endpoint;
            typedef basic_resolver<udp> resolver;
            typedef basic_datagram_socket<udp> socket;

            // static members:
            static udp v4();
            static udp v6();

          private:
            udp(); // not defined
          };

          // udp comparisons:
          bool operator==(const udp& a, const udp& b);
          bool operator!=(const udp& a, const udp& b);

        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

Extensible implementations shall provide the following member functions:

  namespace std {
    namespace tr2 {
      namespace sys {
        namespace ip {

          class udp
          {
          public:
            int family() const;
            int type() const;
            int protocol() const;
            ``['[*// remainder unchanged]]``
          };

        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

In the table below, `u` denotes an identifier.

[table Behaviour of extensible implementations
  [[expression] [value]]
  [
    [`udp u(udp::v4()); u.family();`]
    [`AF_INET`]
  ]
  [
    [`udp u(udp::v4()); u.type();`]
    [`SOCK_DGRAM`]
  ]
  [
    [`udp u(udp::v4()); u.protocol();`]
    [`IPPROTO_UDP`]
  ]
  [
    [`udp u(udp::v6()); u.family();`]
    [`AF_INET6`]
  ]
  [
    [`udp u(udp::v6()); u.type();`]
    [`SOCK_DGRAM`]
  ]
  [
    [`udp u(udp::v6()); u.protocol();`]
    [`IPPROTO_UDP`]
  ]
]

[std_note The constants `AF_INET`, `AF_INET6` and `SOCK_DGRAM` are defined in
the __POSIX__ header file __sys_socket_h__. The constant `IPPROTO_UDP` is
defined in the __POSIX__ header file __netinet_in_h__.]

[section [^ip::udp] comparisons]

  bool operator==(const udp& a, const udp& b);

[function_returns A boolean indicating whether two objects of class `udp` are
equal, such that the expression `udp::v4() == udp::v4()` is true, the
expression `udp::v6() == udp::v6()` is true, and the expression `udp::v4() ==
udp::v6()` is false.]

  bool operator!=(const udp& a, const udp& b);

[function_returns `!(a == b)`.]

[endsect]

[endsect]
