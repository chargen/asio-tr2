[section:basic_io_object Class template [^basic_io_object]]

  namespace std {
    namespace experimental {
      namespace network {

        template<class IoObjectService>
        class basic_io_object
        {
        public:
          typedef IoObjectService service_type;
          typedef typename IoObjectService::implementation_type
            implementation_type;

          io_service& get_io_service();

        protected:
          explicit basic_io_object(io_service& ios);
          ~basic_io_object();

          service_type& service;
          implementation_type implementation;

        private:
          basic_io_object(const basic_io_object&); // not defined
          void operator=(const basic_io_object&);  // not defined
        };

      } // namespace network
    } // namespace experimental
  } // namespace std

[section [^basic_io_object] members]

  explicit basic_io_object(io_service& ios);

[function_effects Initialises `service` with the result of
`use_service<service_type>(ios)` and calls `service.construct(implementation)`.]

  ~basic_io_object();

[function_effects Calls `service.destroy(implementation)`.]

  io_service& get_io_service();

[function_returns `service.get_io_service()`.]

[endsect]

[endsect]
