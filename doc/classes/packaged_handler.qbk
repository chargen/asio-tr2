[section:packaged_handler Class template [^packaged_handler]]
[xrefid async.package.handler]

Class template `packaged_handler` is an adapter to enable the use of packaged
tasks with asynchronous operations as a completion handler with an associated
allocator.

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Signature, class ProtoAllocator>
        class packaged_handler
          : public packaged_task<Signature>
        {
        public:
          // packaged_handler types:

          typedef ProtoAllocator allocator_type;

          // packaged_handler constructors:

          template<class Func>
            explicit packaged_handler(packaged_token<Func, ProtoAllocator>&& token);

          // packaged_handler operations:

          allocator_type get_allocator() const noexcept;

        private:
          ProtoAllocator allocator_; // ``['exposition only]``
        };

        template<class Signature, class ProtoAllocator>
          class async_result<packaged_handler<Signature, ProtoAllocator>>;

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^packaged_handler] members]
[xrefid async.package.handler.members]

  template<class Func>
    explicit packaged_handler(packaged_token<Func, ProtoAllocator>&& token);

[function_effects Constructs an object of class `packaged_handler<Signature,
ProtoAllocator>`, initializing the base class with
`packaged_task<Signature>(std::move(token.f_))` and initializing `allocator_`
with `token.allocator_`.]

  allocator_type get_allocator() const noexcept;

[function_returns `allocator_`.]

[endsect]

[section:async_result_packaged_handler Partial class template specialization [^async_result]]
[xrefid async.package.handler.async.result]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Signature, class ProtoAllocator>
        class async_result<packaged_handler<Signature, ProtoAllocator>>
          : public async_result<packaged_task<Signature>>
        {
        public:
          explicit async_result(packaged_handler<Signature, ProtoAllocator>& h);
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

The implementation provides a partial specialization of `async_result` that
meets the [link classes.async_result `async_result` specialization
requirements].

  explicit async_result(packaged_handler<Signature, ProtoAllocator>& h);

[function_effects Initializes the base class with `h`.]

[endsect]

[endsect]
