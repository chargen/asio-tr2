[section:basic_waitable_timer Class template [^basic_waitable_timer]]
[xrefid timer.waitable]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Clock, class WaitTraits = wait_traits<Clock>>
    class basic_waitable_timer
    {
    public:
      // types:

      typedef io_context::executor_type executor_type;
      typedef Clock clock_type;
      typedef typename clock_type::duration duration;
      typedef typename clock_type::time_point time_point;
      typedef WaitTraits traits_type;

      // construct / copy / destroy:

      explicit basic_waitable_timer(io_context& ctx);
      basic_waitable_timer(io_context& ctx, const time_point& t);
      basic_waitable_timer(io_context& ctx, const duration& d);
      basic_waitable_timer(const basic_waitable_timer&) = delete;
      basic_waitable_timer(basic_waitable_timer&& rhs) noexcept;

      ~basic_waitable_timer();

      basic_waitable_timer& operator=(const basic_waitable_timer&) = delete;
      basic_waitable_timer& operator=(basic_waitable_timer&& rhs);

      // basic_waitable_timer operations:

      executor_type get_executor() noexcept;

      size_t cancel();
      size_t cancel_one();

      time_point expiry() const;
      size_t expires_at(const time_point& t);
      size_t expires_after(const duration& d);

      void wait();
      void wait(error_code& ec);

      template<class CompletionToken>
        __ifr__ async_wait(CompletionToken&& token);
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^basic_waitable_timer] constructors]
[xrefid timer.waitable.cons]

  explicit basic_waitable_timer(io_context& ctx);

[function_effects Equivalent to `basic_waitable_timer(ctx, time_point())`.]

  basic_waitable_timer(io_context& ctx, const time_point& t);

[function_postconditions\n
[mdash] `get_executor() == ctx.get_executor()`.\n
[mdash] `expiry() == t`.]

  basic_waitable_timer(io_context& ctx, const duration& d);

[function_effects Sets the expiry time as if by calling `expires_after(d)`.]

[function_postconditions `get_executor() == ctx.get_executor()`.]

  basic_waitable_timer(basic_waitable_timer&& rhs) noexcept;

[function_effects Move constructs an object of class
`basic_waitable_timer<Clock, WaitTraits>` that refers to the state originally
represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor()` is equal to the prior value of `rhs.get_executor()`.\n
[mdash] `expiry()` returns the same value as `rhs.expiry()` prior to the
constructor invocation.\n
[mdash] `rhs.expiry() == time_point()`.]

[endsect]

[section [^basic_waitable_timer] destructor]
[xrefid timer.waitable.dtor]

  ~basic_waitable_timer();

[function_effects Destroys the timer, cancelling any asynchronous wait
operations associated with the timer as if by calling `cancel()`.]

[endsect]

[section [^basic_waitable_timer] assignment]
[xrefid timer.waitable.assign]

  basic_waitable_timer& operator=(basic_waitable_timer&& rhs);

[function_effects Cancels any outstanding asynchronous operations associated
with `*this` as if by calling `cancel()`, then moves into `*this` the state
originally represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor()` is equal to the prior value of `rhs.get_executor()`.\n
[mdash] `expiry()` returns the same value as `rhs.expiry()` prior to the
assignment.\n
[mdash] `rhs.expiry() == time_point()`.]

[function_returns `*this`.]

[endsect]

[section [^basic_waitable_timer] operations]
[xrefid timer.waitable.ops]

  executor_type get_executor() noexcept;

[function_returns The associated executor.]

  size_t cancel();

[function_effects Causes any outstanding asynchronous wait operations to
complete. Completion handlers for canceled operations are passed an error code
`ec` such that `ec == errc::operation_canceled` yields `true`.]

[function_returns The number of operations that were canceled.]

  size_t cancel_one();

[function_effects Causes the outstanding asynchronous wait operation that was
initiated first, if any, to complete as soon as possible. The completion
handler for the canceled operation is passed an error code `ec` such that `ec
== errc::operation_canceled` yields `true`.]

[function_returns `1` if an operation was cancelled, otherwise `0`.]

  time_point expiry() const;

[function_returns The expiry time associated with the timer, as previously set
using `expires_at()` or `expires_after()`.]

  size_t expires_at(const time_point& t);

[function_effects Cancels outstanding asynchronous wait operations, as if by
calling `cancel()`. Sets the expiry time associated with the timer. ]

[function_returns The number of operations that were canceled.]

[function_postconditions `expiry() == t`.]

  size_t expires_after(const duration& d);

[function_returns `expires_at(clock_type::now() + d)`.]

  void wait();
  void wait(error_code& ec);

[function_effects Establishes the postcondition as if by repeatedly blocking
the calling thread for the relative time produced by
`WaitTraits::to_wait_duration(expiry())`.]

[function_postconditions `ec || !(clock_type::now() < expiry())`.]

  template<class CompletionToken>
    __ifr__ async_wait(CompletionToken&& token);

[function_completion_signature `void(error_code ec)`.]

[function_effects Initiates an asynchronous wait operation such that the
completion handler is submitted for execution only when the condition `ec ||
!(clock_type::now() < expiry())` yields `true`.]

[endsect]

[endsect]
