[section:packaged_token Class template [^packaged_token]]
[xrefid async.package.token]

Class template `packaged_handler` is an adapter to enable the use of packaged
tasks with asynchronous operations as a completion token. The specification of
the packaged task's `Signature` is deferred until the completion token is
transformed into a completion handler.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Func, class ProtoAllocator = allocator<void>>
    class packaged_token
    {
    public:
      // packaged_token types:

      typedef ProtoAllocator allocator_type;

      // packaged_token constructors:

      explicit packaged_token(Func f);
      packaged_token(Func f, const allocator_type& a);

      // packaged_token operations:

      allocator_type get_allocator() const noexcept;

    private:
      Func f_; // ``['exposition only]``
      ProtoAllocator allocator_; // ``['exposition only]``
    };

    template<class Func, class ProtoAllocator, class R, class... Args>
    struct completion_handler_type<packaged_token<Func, ProtoAllocator>, R(Args...)>
    {
      typedef packaged_handler<result_of_t<Func(Args...)>(Args...), ProtoAllocator> type;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^packaged_token] members]
[xrefid async.package.token.members]

  explicit packaged_token(Func f);

[function_effects Initializes `f_` with `std::move(f)` and default constructs
`allocator_`.]

  packaged_token(Func f, const allocator_type& a);

[function_effects Initializes `f_` with `std::move(f)` and `allocator_` with
`a`.]

  allocator_type get_allocator() const noexcept;

[function_returns `allocator_`.]

[endsect]

[endsect]
