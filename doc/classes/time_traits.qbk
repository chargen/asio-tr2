[section:time_traits [^time_traits] specializations]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<> struct time_traits<date_time>;

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section Struct [^time_traits<date_time>]]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<>
    struct time_traits<date_time>
    {
      // types:
      typedef date_time time_type;
      typedef date_time::time_duration duration_type;

      // static members:
      static time_type now();

      static time_type add(const time_type& t, const duration_type& d);

      static duration_type subtract(const time_type& t1,
                                    const time_type& t2);

      static bool less_than(const time_type& t1, const time_type& t2);

      static date_time::time_duration to_std_duration(
        const duration_type& d);
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^time_traits<date_time>] static members]

  static time_type now();

[function_returns `microsecond_clock::universal_time()`.]

  static time_type add(const time_type& t, const duration_type& d);

[function_returns `t + d`.]

  static duration_type subtract(const time_type& t1, const time_type& t2);

[function_returns `t1 - t2`.]

  static bool less_than(const time_type& t1, const time_type& t2);

[function_returns `t1 < t2`.]

  static date_time::time_duration to_std_duration(const duration_type& d);

[function_returns `d`.]

[endsect]

[endsect]

[endsect]
