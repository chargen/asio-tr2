[section:socket_base__int_socket_options Integral socket options]

The `socket_base::receive_buffer_size`, `socket_base::receive_low_watermark`,
`socket_base::send_buffer_size` and `socket_base::send_low_watermark` classes
are integral socket options.

Integral socket option classes satisfy the requirements for
`CopyConstructible`, `Assignable`, [link requirements.gettable_socket_option
`GettableSocketOption`], and [link requirements.settable_socket_option
`SettableSocketOption`].

Integral socket option classes shall be defined as follows:

  class ``['[*C]]``
  {
  public:
    // constructors:
    ``['[*C]]``();
    explicit ``['[*C]]``(int v);

    // members:
    ``['[*C]]``& operator=(int v);

    int value() const;
  };

Extensible implementations shall provide the following member functions:

  class ``['[*C]]``
  {
  public:
    template<class Protocol> int level(const Protocol& p) const;
    template<class Protocol> int name(const Protocol& p) const;
    template<class Protocol> ``['unspecified]``* data(const Protocol& p);
    template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;
    template<class Protocol> size_t size(const Protocol& p) const;
    template<class Protocol> void resize(const Protocol& p, size_t s);
    ``['[*// remainder unchanged]]``
  private:
  ``//int value_;  ['[*exposition only]]``
  };

The names and values used in the definition of the integral socket option
classes are described in the table below.

[table Integral socket options
  [[['C]][['L]][['N]][description]]
  [
    [`socket_base::receive_buffer_size`]
    [`SOL_SOCKET`]
    [`SO_RCVBUF`]
    [
      Specifies the size of the receive buffer associated with a socket.
    ]
  ]
  [
    [`socket_base::receive_low_watermark`]
    [`SOL_SOCKET`]
    [`SO_RCVLOWAT`]
    [
      Specifies the minimum number of bytes to process for socket input
      operations.
    ]
  ]
  [
    [`socket_base::send_buffer_size`]
    [`SOL_SOCKET`]
    [`SO_SNDBUF`]
    [
      Specifies the size of the send buffer associated with a socket.
    ]
  ]
  [
    [`socket_base::send_low_watermark`]
    [`SOL_SOCKET`]
    [`SO_SNDLOWAT`]
    [
      Specifies the minimum number of bytes to process for socket output
      operations.
    ]
  ]
]

[std_note The constants `SOL_SOCKET`, `SO_RCVBUF`, `SO_RCVLOWAT`, `SO_SNDBUF`
and `SO_SNDLOWAT` are defined in the __POSIX__ header file __sys_socket_h__.]

[section Integral socket option constructors]

  ``['[*C]]``();

[function_postconditions `value() == 0`.]

  explicit ``['[*C]]``(int v);

[function_postconditions `value() == v`.]

[endsect]

[section Integral socket option members]

  ``['[*C]]``& operator=(int v);

[function_returns `*this`.]

[function_postconditions `value() == v`.]

  int value() const;

[function_returns The stored socket option value. For extensible
implementations, returns `value_`.]

[endsect]

[section Integral socket option members (extensible implementations)]

  template<class Protocol> int level(const Protocol& p) const;

[function_returns ['[*`L`]].]

  template<class Protocol> int name(const Protocol& p) const;

[function_returns ['[*`N`]].]

  template<class Protocol> ``['unspecified]``* data(const Protocol& p);

[function_returns `&value_`.]

  template<class Protocol> const ``['unspecified]``* data(const Protocol& p) const;

[function_returns `&value_`.]

  template<class Protocol> size_t size(const Protocol& p) const;

[function_returns `sizeof(value_)`.]

  template<class Protocol> void resize(const Protocol& p, size_t s);

[function_throws `length_error` if `s` is not a valid data size for the
protocol specified by `p`.]
  
[endsect]

[endsect]
