[section:ip__socket_options Internet socket options]
[xrefid internet.socket.opt]

In the table below, let [^['C]] denote a socket option class; let [^['L]]
identify the __POSIX__ macro to be passed as the /level/ argument to __POSIX__
__setsockopt__ and __getsockopt__; let [^['N]] identify the __POSIX__ macro to
be passed as the /option_name/ argument to __POSIX__ __setsockopt__ and
__getsockopt__; let [^['T]] identify the type of the value whose address will
be passed as the /option_value/ argument to __POSIX__ __setsockopt__ and
__getsockopt__; let `p` denote a (possibly const) value of a type meeting the
[link requirements.protocol protocol] requirements, as passed to the socket
option's `level` and `name` member functions; and let [^['F]] be the value
of `p.family()`.

[table Internet socket options
  [[['C]][['L]][['N]][['T]][Requirements, definition or notes]]
  [
    [[^ip::tcp::no_delay]]
    [`IPPROTO_TCP`]
    [`TCP_NODELAY`]
    [`int`]
    [
      Satisfies the [link requirements.bool_socket_option
      `BooleanSocketOption`] type requirements.\n
      \n
      Determines whether a TCP socket will avoid coalescing of small segments.
      [inline_note That is, setting this option disables the Nagle algorithm.]
    ]
  ]
  [
    [[^ip::v6_only]]
    [`IPPROTO_IPV6`]
    [`IPV6_V6ONLY`]
    [`int`]
    [
      Satisfies the [link requirements.bool_socket_option
      `BooleanSocketOption`] type requirements.\n
      \n
      Determines whether a socket created for an IPv6 protocol is restricted to
      IPv6 communications only.\n
      \n
      Implementations are not required to support setting the `v6_only` option
      to `false`, and the initial value of the `v6_only` option for a socket is
      implementation-defined. [inline_note As not all operating systems support
      dual stack IP networking. Some operating systems that do provide dual
      stack support offer a configuration option to disable it or to set the
      initial value of the `v6_only` socket option.]
    ]
  ]
  [
    [[^ip::unicast::hops]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_UNICAST_HOPS` if [^['F] == AF_INET6], otherwise `IP_TTL`]
    [`int`]
    [
      Satisfies the [link requirements.int_socket_option `IntegerSocketOption`]
      type requirements.\n
      \n
      Specifies the default number of hops (also known as time-to-live or TTL) on
      outbound datagrams.\n
      \n
      The constructor and assignment operator for the `ip::unicast::hops` class
      throw `out_of_range` if the `int` argument is not in the range `[0,
      255]`.
    ]
  ]
  [
    [[^ip::multicast::join_group]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_JOIN_GROUP` if [^['F] == AF_INET6], otherwise `IP_ADD_MEMBERSHIP`]
    [`ipv6_mreq` if [^['F] == AF_INET6], otherwise `ip_mreq`]
    [
      Satisfies the [link requirements.multicast_group_socket_options
      `MulticastGroupSocketOption`] type requirements.\n
      \n
      Requests that the socket join the specified multicast group.
    ]
  ]
  [
    [[^ip::multicast::leave_group]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_LEAVE_GROUP` if [^['F] == AF_INET6], otherwise `IP_DROP_MEMBERSHIP`]
    [`ipv6_mreq` if [^['F] == AF_INET6], otherwise `ip_mreq`]
    [
      Satisfies the [link requirements.multicast_group_socket_options
      `MulticastGroupSocketOption`] type requirements.\n
      \n
      Requests that the socket leave the specified multicast group.
    ]
  ]
  [
    [[link classes.ip__multicast__outbound_interface [^ip::multicast::outbound_interface]]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_MULTICAST_IF` if [^['F] == AF_INET6], otherwise `IP_MULTICAST_IF`]
    [`unsigned int` if [^['F] == AF_INET6], otherwise `in_addr`]
    [
      Specifies the network interface to use for outgoing multicast datagrams.
    ]
  ]
  [
    [[^ip::multicast::hops]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_MULTICAST_HOPS` if [^['F] == AF_INET6], otherwise `IP_MULTICAST_TTL`]
    [`int`]
    [
      Satisfies the [link requirements.int_socket_option `IntegerSocketOption`]
      type requirements.\n
      \n
      Specifies the default number of hops (also known as time-to-live or TTL) on
      outbound datagrams.\n
      \n
      The constructor and assignment operator for the `ip::multicast::hops`
      class throw `out_of_range` if the `int` argument is not in the range `[0,
      255]`.
    ]
  ]
  [
    [[^ip::multicast::enable_loopback]]
    [`IPPROTO_IPV6` if [^['F] == AF_INET6], otherwise `IPPROTO_IP`]
    [`IPV6_MULTICAST_LOOP` if [^['F] == AF_INET6], otherwise `IP_MULTICAST_LOOP`]
    [`int`]
    [
      Satisfies the [link requirements.bool_socket_option
      `BooleanSocketOption`] type requirements.\n
      \n
      Determines whether multicast datagrams are delivered back to the local
      application.
    ]
  ]
]

[include:classes ip__multicast__outbound_interface.qbk]

[endsect]
