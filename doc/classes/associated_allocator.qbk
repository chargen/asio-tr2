[section:associated_allocator Class template [^associated_allocator]]
[xrefid async.assoc.alloc]

Class template `associated_allocator` is an [link requirements.associator
associator] for the [link requirements.proto_allocator `ProtoAllocator`] type
requirements, with default candidate type `allocator<void>` and default
candidate object `allocator<void>()`.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class T, class ProtoAllocator = allocator<void>>
    struct associated_allocator
    {
      typedef ``['see below]`` type;

      template <class U>
        static type get(U&& u, const ProtoAllocator& a = ProtoAllocator()) noexcept;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Specializations of `associated_allocator` shall satisfy the requirements in the
table below. In this table, `X` is a specialization of `associated_allocator`
for the template parameters `T` and `ProtoAllocator`; `t` is a value of `T`;
and `a` is an object of type `ProtoAllocator`.

[table associated_allocator specialization requirements
  [[Expression][Return type][Note]]
  [
    [`typename X::type`]
    [A type meeting the [link requirements.proto_allocator proto-allocator]
    requirements.]
    []
  ]
  [
    [`X::get(t)`]
    [`X::type`]
    [Shall not exit via an exception.\n
     Equivalent to `X::get(t, ProtoAllocator())`.]
  ]
  [
    [`X::get(t, a)`]
    [`X::type`]
    [Shall not exit via an exception.]
  ]
]

[section [^associated_allocator] members]
[xrefid async.assoc.alloc.members]

  typedef ``['see below]`` type;

[function_type If `T` has a nested type `allocator_type`, `typename
T::allocator_type`. Otherwise `ProtoAllocator`.]

  template <class U>
    type get(U&& u, const ProtoAllocator& a = ProtoAllocator()) noexcept;

[function_requires `is_same<T, decay_t<U>>`.]

[function_returns If `T` has a nested type `allocator_type`,
`u.get_allocator()`. Otherwise `a`.]

[endsect]

[endsect]
