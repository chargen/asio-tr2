[section:associated_executor Class template [^associated_executor]]
[xrefid async.assoc.exec]

Class template `associated_allocator` is an [link requirements.associator
associator] for the [link requirements.executor `Executor`] type requirements,
with default candidate type `system_executor` and default candidate object
`system_executor()`.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class T, class Executor = system_executor>
    struct associated_executor
    {
      typedef ``['see below]`` type;

      template <class U>
        static type get(U&& u, const Executor& e = Executor()) noexcept;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

Specializations of `associated_executor` shall satisfy the requirements in the
table below. In this table, `X` is a specialization of `associated_executor`
for the template parameters `T` and `Executor`; `t` is a value of `T`; and `e`
is an object of type `Executor`.

[table associated_executor specialization requirements
  [[Expression][Return type][Note]]
  [
    [`typename X::type`]
    [A type meeting [link requirements.executor Executor requirements].]
    []
  ]
  [
    [`X::get(t)`]
    [`X::type`]
    [Shall not exit via an exception.\n
     Equivalent to `X::get(t, Executor())`.]
  ]
  [
    [`X::get(t, e)`]
    [`X::type`]
    [Shall not exit via an exception.]
  ]
]

[section [^associated_executor] members]
[xrefid async.assoc.exec.members]

  typedef ``['see below]`` type;

[function_type If `T` has a nested type `executor_type`, `typename
T::executor_type`. Otherwise `Executor`.]

  template <class U>
    type get(U&& u, const Executor& e = Executor()) noexcept;

[function_requires `is_same<T, decay_t<U>>`.]

[function_returns If `T` has a nested type `executor_type`,
`u.get_executor()`. Otherwise `e`.]

[endsect]

[endsect]
