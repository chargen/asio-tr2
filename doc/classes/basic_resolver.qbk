[section:basic_resolver Class template [^basic_resolver]]

  namespace std {
    namespace tr2 {
      namespace sys {

        template<class ResolverProtocol, class ResolverService>
        class basic_resolver :
          public basic_io_object<ResolverService>,
          public socket_base
        {
        public:
          // types:
          typedef ResolverProtocol protocol_type;
          typedef typename ResolverProtocol::endpoint endpoint_type;
          typedef typename ResolverProtocol::resolver_query query;
          typedef typename ResolverProtocol::resolver_iterator iterator;

          // constructors:
          explicit basic_resolver(std::tr2::sys::io_service& io_service);

          // members:
          void cancel();
          error_code cancel(error_code& ec);

          iterator resolve(const query& q);
          iterator resolve(const query& q, error_code& ec);
          template <class ResolveHandler>
            void async_resolve(const query& q, ResolveHandler handler);

          iterator resolve(const endpoint_type& e);
          iterator resolve(const endpoint_type& e, error_code& ec);
          template <class ResolveHandler>
            void async_resolve(const endpoint_type& e, ResolveHandler handler);
        };

      } // namespace sys
    } // namespace tr2
  } // namespace std

[section [^basic_resolver] constructors]

  explicit basic_resolver(std::tr2::sys::io_service& io_service);

[function_effects Constructs an object of class `basic_resolver<Protocol,
ResolverService>`, initialising the base class with
`basic_io_object(io_service)`.]

[endsect]

[section [^basic_resolver] members]

  void cancel();

[function_effects Calls:
``
  error_code ec;
  this->service.cancel(this->implementation, ec);
  if (ec) throw system_error(ec);
``]

  error_code cancel(error_code& ec);

[function_returns `this->service.cancel(this->implementation, ec)`.]

  iterator resolve(const query& q);

[function_effects Calls:
``
  error_code ec;
  iterator i = this->service.resolve(this->implementation, q, ec);
  if (ec) throw system_error(ec);
``]

[function_returns `i`.]

  iterator resolve(const query& q, error_code& ec);

[function_returns `this->service.resolve(this->implementation, q, ec)`.]

  template <class ResolveHandler>
    void async_resolve(const query& q, ResolveHandler handler);

[function_effects Calls `this->service.async_resolve(this->implementation, q,
handler)`.]

  iterator resolve(const endpoint_type& e);

[function_effects Calls:
``
  error_code ec;
  iterator i = this->service.resolve(this->implementation, e, ec);
  if (ec) throw system_error(ec);
``]

[function_returns `i`.]

  iterator resolve(const endpoint_type& e, error_code& ec);

[function_returns `this->service.resolve(this->implementation, e, ec)`.]

  template <class ResolveHandler>
    void async_resolve(const endpoint_type& e, ResolveHandler handler);

[function_effects Calls `this->service.async_resolve(this->implementation, e,
handler)`.]

[endsect]

[endsect]
