[section:async_completion Class template [^async_completion]]
[xrefid async.async.completion]

Template parameter `CompletionToken` specifies the model used to obtain the
result of the asynchronous operation. Template parameter `Signature` is the
call signature (C++Std [func.def]) for the completion handler type invoked on
completion of the asynchronous operation.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class CompletionToken, class Signature>
    struct async_completion
    {
      typedef async_result<decay_t<CompletionToken>,
        Signature>::completion_handler_type
          completion_handler_type;

      explicit async_completion(CompletionToken& t);
      async_completion(const async_completion&) = delete;
      async_completion& operator=(const async_completion&) = delete;

      ``['see below]`` completion_handler;
      async_result<decay_t<CompletionToken>, Signature> result;
    };

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

The template parameter `Signature` shall be a call signature (C++Std
[func.def]).

[section [^async_completion] members]
[xrefid async.async.completion.members]

  explicit async_completion(CompletionToken& t);

[function_effects If `CompletionToken` and `completion_handler_type` are the
same type, binds `completion_handler` to `t`; otherwise, initializes
`completion_handler` with the result of `forward<CompletionToken>(t)`.
Initializes `result` with `completion_handler`.]

  ``['see below]`` completion_handler;

[function_type `completion_handler_type&` if `CompletionToken` and
`completion_handler_type` are the same type; otherwise,
`completion_handler_type`.]

[endsect]

[endsect]
