[section:strand Class template [^strand]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class Executor>
        class strand
        {
        public:
          // types:

          typedef Executor inner_executor_type;

          // construct / copy / destroy:

          strand();
          explicit strand(Executor ex);
          strand(const strand& other);
          strand(strand&& other);
          template<class OtherExecutor> strand(const strand<OtherExecutor>& other);
          template<class OtherExecutor> strand(strand<OtherExecutor>&& other);

          strand& operator=(const strand& other);
          strand& operator=(strand&& other);
          template<class OtherExecutor> strand& operator=(const strand<OtherExecutor>& other);
          template<class OtherExecutor> strand& operator=(strand<OtherExecutor>&& other);

          ~strand();

          // strand operations:

          inner_executor_type get_inner_executor() const noexcept;

          bool running_in_this_thread() const noexcept;

          execution_context& context() noexcept;

          void work_started() noexcept;
          void work_finished() noexcept;

          template<class Func, class Alloc>
            void dispatch(Func&& f, const Alloc& a);
          template<class Func, class Alloc>
            void post(Func&& f, const Alloc& a);
          template<class Func, class Alloc>
            void defer(Func&& f, const Alloc& a);

          template<class T>
            executor_wrapper<decay_t<T>, strand<Executor>>
              wrap(T&& t) const;

        private:
          Executor inner_ex_; // ``['exposition only]``
        };

        bool operator==(const strand<Executor>& a, const strand<Executor>& b);
        bool operator!=(const strand<Executor>& a, const strand<Executor>& b);

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

`strand<Executor>` is a wrapper around an object of type `Executor` satisfying
[link requirements.executor Executor requirements]. `strand<Executor>`
satisfies the Executor requirements.

A strand provides guarantees of ordering and non-concurrency. Given:

[mdash] strand objects `s1` and `s2` such that `s1 == s2`

[mdash] a function object `f1` added to the strand `s1` using `post` or
`defer`, or using `dispatch` when `s1.running_in_this_thread() == false`

[mdash] a function object `f2` added to the strand `s2` using `post` or
`defer`, or using `dispatch` when `s2.running_in_this_thread() == false`

then the implementation shall invoke `f1` and `f2` such that:

[mdash] the invocation of `f1` is not concurrent with the invocation of `f2`

[mdash] the invocation of `f1` synchronizes with the invocation of `f2`.

Furthermore, if the addition of `f1` happens before the addition of `f2`, then
the invocation of `f1` happens before the invocation of `f2`.

The strand copy constructors, comparison operators, and member functions shall
not introduce data races as a result of concurrent calls to those functions
from different threads.

If any function `f` invoked by the strand throws an exception, the subsequent
strand state shall be as if `f` had exited without throwing an exception.

[section [^strand] constructors]

  strand();

[function_effects Constructs an object of class `strand<Executor>` that
represents a unique ordered, non-concurrent state. Initializes `inner_ex_` with
`inner_ex_()`.]

[function_remarks This overload shall not participate in overload resolution
unless `Executor` satisfies the `DefaultConstructible` requirements (C++ Std,
\[defaultconstructible\]).]

  explicit strand(Executor ex);

[function_effects Constructs an object of class `strand<Executor>` that
represents a unique ordered, non-concurrent state. Initializes `inner_ex_` with
`inner_ex_(ex)`.]

  strand(const strand& other);

[function_effects Constructs an object of class `strand<Executor>`. Initalizes
`inner_ex_` with `inner_ex_(other.inner_ex_)`.]

[function_postconditions\n
[mdash] `*this == other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

  strand(strand&& other);

[function_effects Constructs an object of class `strand<Executor>`. Initalizes
`inner_ex_` with `inner_ex_(std::move(other.inner_ex_))`.]

[function_postconditions\n
[mdash] `*this` is equal to the prior value of `other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

  template<class OtherExecutor> strand(const strand<OtherExecutor>& other);

[function_requires `OtherExecutor` is convertible to `Executor`.]

[function_effects Constructs an object of class `strand<Executor>`. Initalizes
`inner_ex_` with `inner_ex_(other.inner_ex_)`.]

[function_postconditions `*this == other`.]

  template<class OtherExecutor> strand(strand<OtherExecutor>&& other);

[function_requires `OtherExecutor` is convertible to `Executor`.]

[function_effects Constructs an object of class `strand<Executor>`. Initalizes
`inner_ex_` with `inner_ex_(other.inner_ex_)`.]

[function_postconditions `*this` is equal to the prior value of `other`.]

[endsect]

[section [^strand] assignment]

  strand& operator=(const strand& other);

[function_requires `Executor` is `Assignable` (C++ Std \[assignable\]).]

[function_postconditions\n
[mdash] `*this == other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

[function_returns `*this`.]

  strand& operator=(strand&& other);

[function_requires `Executor` is `Assignable` (C++ Std \[assignable\]).]

[function_postconditions\n
[mdash] `*this` is equal to the prior value of `other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

[function_returns `*this`.]

  template<class OtherExecutor> strand& operator=(const strand<OtherExecutor>& other);

[function_requires `OtherExecutor` is convertible to `Executor`. `Executor` is
`Assignable` (C++ Std \[assignable\]).]

[function_effects Equivalent to `strand<Executor>::operator=(Executor(other))`.]

[function_returns `*this`.]

  template<class OtherExecutor> strand& operator=(strand<OtherExecutor>&& other);

[function_requires `OtherExecutor` is convertible to `Executor`. `Executor` is
`Assignable` (C++ Std \[assignable\]).]

[function_effects Equivalent to
`strand<Executor>::operator=(Executor(std::move(other)))`.]

[function_returns `*this`.]

[endsect]

[section [^strand] destructor]

  ~strand();

[function_effects Destroys an object of class `strand<Executor>`. Function
objects that were added to the strand but have not yet been invoked shall still
be invoked in a way that meets the guarantees of ordering and non-concurrency.]

[endsect]

[section [^strand] operations]

  inner_executor_type get_inner_executor() const noexcept;

[function_returns `inner_ex_`.]

  bool running_in_this_thread() const noexcept;

[function_returns `true` if the current thread of execution is invoking a
function that was submitted to the strand, or to any other strand object `s`
such that `s == *this`, using `dispatch`, `post` or `defer`; otherwise
`false`.]

  execution_context& context() noexcept;

[function_returns `inner_ex_.context()`.]

  void work_started() noexcept;

[function_effects Calls `inner_ex_.work_started()`.]

  void work_finished() noexcept;

[function_effects Calls `inner_ex_.work_finished()`.]

  template<class Func, class Alloc>
    void dispatch(Func&& f, const Alloc& a);

[function_effects If `running_in_this_thread()` is true, calls
[^['DECAY_COPY]]`(forward<Func>(f))()`. Otherwise, requests invocation of `f`,
as if by forwarding the function object `f` and allocator `a` to the executor
`inner_ex_`, such that the guarantees of ordering and non-concurrency are met.]

[function_block If `f` exits via an exception, and the execution of `f` is
performed in the current thread and before `dispatch` returns, the exception
shall propagate to the caller of `dispatch()`]

  template<class Func, class Alloc>
    void post(Func&& f, const Alloc& a);

[function_effects Requests invocation of `f`, as if by forwarding the function
object `f` and allocator `a` to the executor `inner_ex_`, such that the
guarantees of ordering and non-concurrency are met.]

  template<class Func, class Alloc>
    void defer(Func&& f, const Alloc& a);

[function_effects Requests invocation of `f`, as if by forwarding the function
object `f` and allocator `a` to the executor `inner_ex_`, such that the
guarantees of ordering and non-concurrency are met.]

  template<class T>
    executor_wrapper<decay_t<T>, strand<Executor>>
      wrap(T&& t) const;

[function_returns `executor_wrapper<decay_t<T>,
strand<Executor>>(forward<T>(t), *this)`.]

[endsect]

[section [^strand] comparisons]

  bool operator==(const strand<Executor>& a, const strand<Executor>& b);

[function_returns `true`, if the strand objects share the same ordered,
non-concurrent state; otherwise `false`.]

  bool operator!=(const strand<Executor>& a, const strand<Executor>& b);

[function_returns `!(a == b)`.]

[endsect]

[endsect]
