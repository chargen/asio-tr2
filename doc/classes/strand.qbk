[section:strand Class template [^strand]]
[xrefid async.strand]

The class template `strand` is a wrapper around an object of type `Executor`
satisfying the [link requirements.executor Executor requirements].

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class Executor>
    class strand
    {
    public:
      // types:

      typedef Executor inner_executor_type;

      // construct / copy / destroy:

      strand();
      explicit strand(Executor ex);
      template<class ProtoAllocator>
        strand(allocator_arg_t, const ProtoAllocator& alloc, Executor ex);
      strand(const strand& other) noexcept;
      strand(strand&& other) noexcept;
      template<class OtherExecutor> strand(const strand<OtherExecutor>& other) noexcept;
      template<class OtherExecutor> strand(strand<OtherExecutor>&& other) noexcept;

      strand& operator=(const strand& other) noexcept;
      strand& operator=(strand&& other) noexcept;
      template<class OtherExecutor> strand& operator=(const strand<OtherExecutor>& other) noexcept;
      template<class OtherExecutor> strand& operator=(strand<OtherExecutor>&& other) noexcept;

      ~strand();

      // strand operations:

      inner_executor_type get_inner_executor() const noexcept;

      bool running_in_this_thread() const noexcept;

      execution_context& context() noexcept;

      void on_work_started() noexcept;
      void on_work_finished() noexcept;

      template<class Func, class ProtoAllocator>
        void dispatch(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void post(Func&& f, const ProtoAllocator& a);
      template<class Func, class ProtoAllocator>
        void defer(Func&& f, const ProtoAllocator& a);

    private:
      Executor inner_ex_; // ``['exposition only]``
    };

    bool operator==(const strand<Executor>& a, const strand<Executor>& b);
    bool operator!=(const strand<Executor>& a, const strand<Executor>& b);

  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

`strand<Executor>` satisfies the Executor requirements.

A strand provides guarantees of ordering and non-concurrency. Given:

[mdash] strand objects `s1` and `s2` such that `s1 == s2`

[mdash] a function object `f1` added to the strand `s1` using `post` or
`defer`, or using `dispatch` when `s1.running_in_this_thread() == false`

[mdash] a function object `f2` added to the strand `s2` using `post` or
`defer`, or using `dispatch` when `s2.running_in_this_thread() == false`

then the implementation invokes `f1` and `f2` such that:

[mdash] the invocation of `f1` is not concurrent with the invocation of `f2`

[mdash] the invocation of `f1` synchronizes with the invocation of `f2`.

Furthermore, if the addition of `f1` happens before the addition of `f2`, then
the invocation of `f1` happens before the invocation of `f2`.

All member functions, except for the assignment operators and the destructor,
do not introduce data races on `*this`, including its ordered,
non-concurrent state. Additionally, constructors and assignment operators
do not introduce data races on lvalue arguments.

If any function `f` executed by the strand throws an exception, the subsequent
strand state is as if `f` had exited without throwing an exception.

[section [^strand] constructors]
[xrefid async.strand.cons]

  strand();

[function_effects Constructs an object of class `strand<Executor>` that
represents a unique ordered, non-concurrent state. Initializes `inner_ex_` with
`inner_ex_()`.]

[function_remarks This overload shall not participate in overload resolution
unless `Executor` satisfies the `DefaultConstructible` requirements (C++ Std,
\[defaultconstructible\]).]

  explicit strand(Executor ex);

[function_effects Constructs an object of class `strand<Executor>` that
represents a unique ordered, non-concurrent state. Initializes `inner_ex_` as
`inner_ex_(ex)`.]

  template<class ProtoAllocator>
    strand(allocator_arg_t, const ProtoAllocator& a, Executor ex);

[function_effects Constructs an object of class `strand<Executor>` that
represents a unique ordered, non-concurrent state. Initializes `inner_ex_` as
`inner_ex_(ex)`. A copy of the allocator argument `a` is used to allocate
memory, if necessary, for the internal data structures of the constructed
strand object.]

  strand(const strand& other) noexcept;

[function_effects Constructs an object of class `strand<Executor>`. Initializes
`inner_ex_` as `inner_ex_(other.inner_ex_)`.]

[function_postconditions\n
[mdash] `*this == other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

  strand(strand&& other) noexcept;

[function_effects Constructs an object of class `strand<Executor>`. Initializes
`inner_ex_` with `inner_ex_(std::move(other.inner_ex_))`.]

[function_postconditions\n
[mdash] `*this` is equal to the prior value of `other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

  template<class OtherExecutor> strand(const strand<OtherExecutor>& other) noexcept;

[function_requires `OtherExecutor` is convertible to `Executor`.]

[function_effects Constructs an object of class `strand<Executor>`. Initializes
`inner_ex_` with `inner_ex_(other.inner_ex_)`.]

[function_postconditions `*this == other`.]

  template<class OtherExecutor> strand(strand<OtherExecutor>&& other) noexcept;

[function_requires `OtherExecutor` is convertible to `Executor`.]

[function_effects Constructs an object of class `strand<Executor>`. Initializes
`inner_ex_` with `inner_ex_(std::move(other.inner_ex_))`.]

[function_postconditions `*this` is equal to the prior value of `other`.]

[endsect]

[section [^strand] assignment]
[xrefid async.strand.assign]

  strand& operator=(const strand& other) noexcept;

[function_requires `Executor` is `CopyAssignable` (C++ Std,
\[copyassignable\]).]

[function_postconditions\n
[mdash] `*this == other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

[function_returns `*this`.]

  strand& operator=(strand&& other) noexcept;

[function_requires `Executor` is `MoveAssignable` (C++ Std,
\[moveassignable\]).]

[function_postconditions\n
[mdash] `*this` is equal to the prior value of `other`\n
[mdash] `get_inner_executor() == other.get_inner_executor()`]

[function_returns `*this`.]

  template<class OtherExecutor> strand& operator=(const strand<OtherExecutor>& other) noexcept;

[function_requires `OtherExecutor` is convertible to `Executor`. `Executor` is
`CopyAssignable` (C++ Std, \[copyassignable\]).]

[function_effects Assigns `other.inner_ex_` to `inner_ex_`.]

[function_postconditions `*this == other`.]

[function_returns `*this`.]

  template<class OtherExecutor> strand& operator=(strand<OtherExecutor>&& other) noexcept;

[function_requires `OtherExecutor` is convertible to `Executor`. `Executor` is
`MoveAssignable` (C++ Std, \[moveassignable\]).]

[function_effects Assigns `std::move(other.inner_ex_)` to `inner_ex_`.]

[function_postconditions `*this` is equal to the prior value of `other`.]

[function_returns `*this`.]

[endsect]

[section [^strand] destructor]
[xrefid async.strand.dtor]

  ~strand();

[function_effects Destroys an object of class `strand<Executor>`. After this
destructor completes, objects that were added to the strand but have not yet
been executed will be executed in a way that meets the guarantees of ordering
and non-concurrency.]

[endsect]

[section [^strand] operations]
[xrefid async.strand.ops]

  inner_executor_type get_inner_executor() const noexcept;

[function_returns `inner_ex_`.]

  bool running_in_this_thread() const noexcept;

[function_returns `true` if the current thread of execution is running a
function that was submitted to the strand, or to any other strand object `s`
such that `s == *this`, using `dispatch`, `post` or `defer`; otherwise `false`.
[inline_note That is, the current thread of execution's call chain includes a
function that was submitted to the strand.]]

  execution_context& context() noexcept;

[function_returns `inner_ex_.context()`.]

  void on_work_started() noexcept;

[function_effects Calls `inner_ex_.on_work_started()`.]

  void on_work_finished() noexcept;

[function_effects Calls `inner_ex_.on_work_finished()`.]

  template<class Func, class ProtoAllocator>
    void dispatch(Func&& f, const ProtoAllocator& a);

[function_effects If `running_in_this_thread() == true`, calls
[^['DECAY_COPY]]`(forward<Func>(f))()` (C++ Std, \[thread.decaycopy\]).
[inline_note If `f` exits via an exception, the exception propagates to the
caller of `dispatch()`.] Otherwise, requests invocation of `f`, as if by
forwarding the function object `f` and allocator `a` to the executor
`inner_ex_`, such that the guarantees of ordering and non-concurrency are met.]

  template<class Func, class ProtoAllocator>
    void post(Func&& f, const ProtoAllocator& a);

[function_effects Requests invocation of `f`, as if by forwarding the function
object `f` and allocator `a` to the executor `inner_ex_`, such that the
guarantees of ordering and non-concurrency are met.]

  template<class Func, class ProtoAllocator>
    void defer(Func&& f, const ProtoAllocator& a);

[function_effects Requests invocation of `f`, as if by forwarding the function
object `f` and allocator `a` to the executor `inner_ex_`, such that the
guarantees of ordering and non-concurrency are met.]

[endsect]

[section [^strand] comparisons]
[xrefid async.strand.comparisons]

  bool operator==(const strand<Executor>& a, const strand<Executor>& b);

[function_returns `true`, if the strand objects share the same ordered,
non-concurrent state; otherwise `false`.]

  bool operator!=(const strand<Executor>& a, const strand<Executor>& b);

[function_returns `!(a == b)`.]

[endsect]

[endsect]
