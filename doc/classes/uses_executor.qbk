[section:uses_executor [^uses_executor]]
[xrefid async.uses.executor]

[section [^uses_executor] trait]
[xrefid async.uses.executor.trait]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        template<class T, class Executor> struct uses_executor;

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

['Remark:] Detects whether `T` has a nested `executor_type` that is convertible
from `Executor`. Meets the `BinaryTypeTrait` requirements (C++ Std,
[meta.rqmts]). The implementation shall provide a definition that is derived
from `true_type` if a type `T::executor_type` exists and
`is_convertible<Executor, T::executor_type>::value != false`, otherwise it
shall be derived from `false_type`. A program may specialize this template to
derive from `true_type` for a user-defined type `T` that does not have a nested
`executor_type` but nonetheless can be constructed with an executor if the
first argument of a constructor has type `executor_arg_t` and the second
argument has type `Executor`.

[endsect]

[section uses-executor construction]
[xrefid async.uses.executor.cons]

['Uses-executor construction] with executor `Executor` refers to the
construction of an object `obj` of type `T`, using constructor arguments `v1,
v2, ..., vN` of types `V1, V2, ..., VN`, respectively, and an executor `ex` of
type `Executor`, according to the following rules:

[mdash] if `uses_executor<T, Executor>::value` is `true` and
`is_constructible<T, executor_arg_t, Executor, V1, V2, ..., VN>::value` is
`true`, then `obj` is initialized as `obj(executor_arg, ex, v1, v2, ..., vN)`;

[mdash] otherwise, `obj` is initialized as `obj(v1, v2, ..., vN)`.

[endsect]

[endsect]
