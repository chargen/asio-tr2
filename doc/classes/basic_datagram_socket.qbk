[section:basic_datagram_socket Class template [^basic_datagram_socket]]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        template<class Protocol>
        class basic_datagram_socket :
          public basic_socket<Protocol>
        {
        public:
          // types:

          typedef ``['implementation defined]`` native_handle_type; // See ``[link requirements.native_handles native handles]``
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // construct / copy / destroy:

          explicit basic_datagram_socket(io_service& ios);
          basic_datagram_socket(io_service& ios, const protocol_type& protocol);
          basic_datagram_socket(io_service& ios, const endpoint_type& endpoint);
          basic_datagram_socket(io_service& ios, const protocol_type& protocol,
                                const native_handle_type& native_socket);
          basic_datagram_socket(const basic_datagram_socket&) = delete;
          basic_datagram_socket(basic_datagram_socket&& rhs);
          template <class OtherProtocol>
            basic_datagram_socket(basic_datagram_socket<OtherProtocol>&& rhs);

          ~basic_datagram_socket();

          basic_datagram_socket& operator=(const basic_datagram_socket&) = delete;
          basic_datagram_socket& operator=(basic_datagram_socket&& rhs);
          template <class OtherProtocol>
            basic_datagram_socket& operator=(basic_datagram_socket<OtherProtocol>&& rhs);

          // basic_datagram_socket operations::

          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           error_code& ec);

          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags);
          template<class MutableBufferSequence>
            size_t receive(const MutableBufferSequence& buffers,
                           socket_base::message_flags flags, error_code& ec);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive(const MutableBufferSequence& buffers,
                               CompletionToken&& token);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive(const MutableBufferSequence& buffers,
                               socket_base::message_flags flags,
                               CompletionToken&& token);

          template<class MutableBufferSequence>
            size_t receive_from(const MutableBufferSequence& buffers,
                                endpoint_type& sender);
          template<class MutableBufferSequence>
            size_t receive_from(const MutableBufferSequence& buffers,
                                endpoint_type& sender, error_code& ec);

          template<class MutableBufferSequence>
            size_t receive_from(const MutableBufferSequence& buffers,
                                endpoint_type& sender,
                                socket_base::message_flags flags);
          template<class MutableBufferSequence>
            size_t receive_from(const MutableBufferSequence& buffers,
                                endpoint_type& sender,
                                socket_base::message_flags flags,
                                error_code& ec);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive_from(const MutableBufferSequence& buffers,
                                    endpoint_type& sender,
                                    CompletionToken&& token);

          template<class MutableBufferSequence, class CompletionToken>
            auto async_receive_from(const MutableBufferSequence& buffers,
                                    endpoint_type& sender,
                                    socket_base::message_flags flags,
                                    CompletionToken&& token);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers, error_code& ec);

          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags);
          template<class ConstBufferSequence>
            size_t send(const ConstBufferSequence& buffers,
                        socket_base::message_flags flags, error_code& ec);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send(const ConstBufferSequence& buffers,
                            CompletionToken&& token);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send(const ConstBufferSequence& buffers,
                            socket_base::message_flags flags,
                            CompletionToken&& token);

          template<class ConstBufferSequence>
            size_t send_to(const ConstBufferSequence& buffers,
                           const endpoint_type& destination);
          template<class ConstBufferSequence>
            size_t send_to(const ConstBufferSequence& buffers,
                           const endpoint_type& destination, error_code& ec);

          template<class ConstBufferSequence>
            size_t send_to(const ConstBufferSequence& buffers,
                           const endpoint_type& destination,
                           socket_base::message_flags flags);
          template<class ConstBufferSequence>
            size_t send_to(const ConstBufferSequence& buffers,
                           const endpoint_type& destination,
                           socket_base::message_flags flags, error_code& ec);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send_to(const ConstBufferSequence& buffers,
                               const endpoint_type& destination,
                               CompletionToken&& token);

          template<class ConstBufferSequence, class CompletionToken>
            auto async_send_to(const ConstBufferSequence& buffers,
                               const endpoint_type& destination,
                               socket_base::message_flags flags,
                               CompletionToken&& token);
        };

      } // inline namespace network_v1
    } // namespace experimental
  } // namespace std

[section [^basic_datagram_socket] constructors]

  explicit basic_datagram_socket(io_service& ios);

[function_effects Constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(ios)`.]

  basic_datagram_socket(io_service& ios, const protocol_type& protocol);

[function_effects Constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(ios, protocol)`.]

  basic_datagram_socket(io_service& ios, const endpoint_type& endpoint);

[function_effects Constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(ios, endpoint)`.]

  basic_datagram_socket(io_service& ios, const protocol_type& protocol,
                        const native_handle_type& native_socket);

[function_effects Constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(ios, protocol, native_socket)`.]

  basic_datagram_socket(basic_datagram_socket&& rhs);

[function_effects Move constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(static_cast<basic_socket<Protocol>&&>(rhs))`.]

  template <class OtherProtocol>
    basic_datagram_socket(basic_datagram_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Move constructs an object of class
`basic_datagram_socket<Protocol>`, initialising the base class with
`basic_socket<Protocol>(static_cast<basic_socket<OtherProtocol>&&>(rhs))`.]

[function_remarks This constructor shall not participate in overload resolution
unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_datagram_socket] assignment]

  basic_datagram_socket& operator=(basic_datagram_socket&& rhs);

[function_effects Calls
`basic_socket<Protocol>::operator=(static_cast<basic_socket<Protocol>&&>(rhs))`.]

[function_returns `*this`.]

  template <class OtherProtocol>
    basic_datagram_socket& operator=(basic_datagram_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Calls
`basic_socket<Protocol>::operator=(static_cast<basic_socket<OtherProtocol>&&>(rhs))`.]

[function_returns `*this`.]

[function_remarks This assignment operator shall not participate in overload
resolution unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_datagram_socket] operations]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   error_code& ec);

[function_returns `receive(buffers, 0, ec)`.]

  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags);
  template<class MutableBufferSequence>
    size_t receive(const MutableBufferSequence& buffers,
                   socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_read_operations synchronous
read operation].]

[function_effects Reads data from a connection-mode or connectionless-mode
socket, as if by __POSIX__ __recvmsg__, where `flags` specifies the type of
message reception. [inline_note It is normally used with connection-mode
sockets because it does not permit the application to retrieve the source
endpoint of received data.]]

[function_returns On success, the number of bytes received. Otherwise `0`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive(const MutableBufferSequence& buffers,
                       CompletionToken&& token);

[function_returns `async_receive(buffers, 0,
forward<CompletionToken>(token))`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive(const MutableBufferSequence& buffers,
                       socket_base::message_flags flags,
                       CompletionToken&& token);

[function_block An [link requirements.asynchronous_read_operations asynchronous
read operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_requires `(flags & socket_base::message_peek) == 0`.]

[function_effects Initiates an asynchronous operation to read data from a
connection-mode or connectionless-mode socket, as if by __POSIX__ __recvmsg__,
where `flags` specifies the type of message reception. [inline_note It is
normally used with connection-mode sockets because it does not permit the
application to retrieve the source endpoint of received data.]]

[function_block When multiple asynchronous receive operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall fill the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous receive operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behaviour is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, `send` or `send_to`, while there is a pending
asynchronous receive operation, the behaviour is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes received. Otherwise `n` is `0`.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `(flags &
socket_base::message_peek) != 0`.]

  template<class MutableBufferSequence>
    size_t receive_from(const MutableBufferSequence& buffers,
                        endpoint_type& sender);
  template<class MutableBufferSequence>
    size_t receive_from(const MutableBufferSequence& buffers,
                        endpoint_type& sender, error_code& ec);

[function_returns `receive_from(buffers, endpoint, 0, ec)`.]

  template<class MutableBufferSequence>
    size_t receive_from(const MutableBufferSequence& buffers,
                        endpoint_type& sender,
                        socket_base::message_flags flags);
  template<class MutableBufferSequence>
    size_t receive_from(const MutableBufferSequence& buffers,
                        endpoint_type& sender,
                        socket_base::message_flags flags,
                        error_code& ec);

[function_block A [link requirements.synchronous_read_operations synchronous
read operation].]

[function_effects Reads data from a connection-mode or connectionless-mode
socket, as if by __POSIX__ __recvmsg__, where `sender` is updated to reflect
the origin of the data, and `flags` specifies the type of message reception.
[inline_note It is normally used with connectionless-mode sockets because it
permits the application to retrieve the source endpoint of received data.]]

[function_returns On success, the number of bytes received. Otherwise `0`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive_from(const MutableBufferSequence& buffers,
                            endpoint_type& sender,
                            CompletionToken&& token);

[function_effects Returns `async_receive_from(buffers, sender, 0,
forward<CompletionToken>(token))`.]

  template<class MutableBufferSequence, class CompletionToken>
    auto async_receive_from(const MutableBufferSequence& buffers,
                            endpoint_type& sender,
                            socket_base::message_flags flags,
                            CompletionToken&& token);

[function_block An [link requirements.asynchronous_read_operations asynchronous
read operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_requires `(flags & socket_base::message_peek) == 0`.]

[function_effects Initiates an asynchronous operation to read data from a
connection-mode or connectionless-mode socket, as if by __POSIX__ __recvmsg__,
where `sender` is updated to reflect the source of the data, and `flags`
specifies the type of message reception. [inline_note It is normally used with
connectionless-mode sockets because it permits the application to retrieve the
source endpoint of received data.]]

[function_block When multiple asynchronous receive operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall fill the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous receive operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behaviour is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, `send` or `send_to`, while there is a pending
asynchronous receive operation, the behaviour is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes received. Otherwise `n` is `0`.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `(flags &
socket_base::message_peek) != 0`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers, error_code& ec);

[function_returns `send(buffers, 0, ec)`.]

  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags);
  template<class ConstBufferSequence>
    size_t send(const ConstBufferSequence& buffers,
                socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_write_operations synchronous
write operation].]

[function_effects Writes data to a connected socket, as if by __POSIX__
__sendmsg__, where `flags` specifies the type of message transmission.]

[function_returns On success, the number of bytes sent. Otherwise `0`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send(const ConstBufferSequence& buffers, CompletionToken&& token);

[function_returns `async_send(buffers, 0, forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send(const ConstBufferSequence& buffers,
                    socket_base::message_flags flags,
                    CompletionToken&& token);

[function_block An [link requirements.asynchronous_write_operations asynchronous
write operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to a
connected socket, as if by __POSIX__ __sendmsg__, where `flags` specifies the
type of message transmission.]

[function_block When multiple asynchronous send operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall transmit the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous send operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behaviour is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, `receive` or `receive_from`, while there is a
pending asynchronous send operation, the behaviour is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes sent. Otherwise `n` is `0`.]

  template<class ConstBufferSequence>
    size_t send_to(const ConstBufferSequence& buffers,
                   const endpoint_type& destination);
  template<class ConstBufferSequence>
    size_t send_to(const ConstBufferSequence& buffers,
                   const endpoint_type& destination, error_code& ec);

[function_returns `send_to(buffers, destination, 0, ec)`.]

  template<class ConstBufferSequence>
    size_t send_to(const ConstBufferSequence& buffers,
                   const endpoint_type& destination,
                   socket_base::message_flags flags);
  template<class ConstBufferSequence>
    size_t send_to(const ConstBufferSequence& buffers,
                   const endpoint_type& destination,
                   socket_base::message_flags flags, error_code& ec);

[function_block A [link requirements.synchronous_write_operations synchronous
write operation].]

[function_effects Writes data to a connection-mode or connectionless-mode
socket, as if by __POSIX__ __sendmsg__, where `destination` is the destination
endpoint of the data, and `flags` specifies the type of message transmission.]

[function_returns On success, the number of bytes sent. Otherwise `0`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send_to(const ConstBufferSequence& buffers,
                       const endpoint_type& destination,
                       CompletionToken&& token);

[function_returns `async_send_to(buffers, destination, 0,
forward<CompletionToken>(token))`.]

  template<class ConstBufferSequence, class CompletionToken>
    auto async_send_to(const ConstBufferSequence& buffers,
                       const endpoint_type& destination,
                       socket_base::message_flags flags,
                       CompletionToken&& token);

[function_block An [link requirements.asynchronous_write_operations asynchronous
write operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to a
connection-mode or connectionless-mode socket, as if by __POSIX__ __sendmsg__,
where `destination` is the destination endpoint of the data, and `flags`
specifies the type of message reception.]

[function_block When multiple asynchronous send operations with zero `flags`
are initiated such that the operations may logically be performed in parallel,
the implementation shall transmit the `buffers` in the order in which the
operations were issued. The order of invocation of the handlers for these
operations is unspecified. When multiple asynchronous send operations with
non-zero `flags` are initiated such that operations may logically be performed
in parallel, the behaviour is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close`, `cancel`, `receive` or `receive_from`, while there is a
pending asynchronous send operation, the behaviour is unspecified.]

[function_block If the operation completes successfully, `n` is the number of
bytes sent. Otherwise `n` is `0`.]

[endsect]

[endsect]
