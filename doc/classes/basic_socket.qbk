[section:basic_socket Class template [^basic_socket]]

  namespace std {
    namespace tr2 {
      namespace sys {

        template<class Protocol, class SocketService>
        class basic_socket :
          public basic_io_object<SocketService>,
          public socket_base
        {
        public:
          // types:
          typedef typename SocketService::native_type native_type;
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // members:
          native_type native();

          void open(const protocol_type& protocol = protocol_type());
          error_code open(const protocol_type& protocol, error_code& ec);

          void assign(const protocol_type& protocol,
                      const native_type& native_socket);
          error_code assign(const protocol_type& protocol,
                            const native_type& native_socket, error_code& ec);

          bool is_open() const;

          void close();
          error_code close(error_code& ec);

          void cancel();
          error_code cancel(error_code& ec);

          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option);
          template<class SettableSocketOption>
            error_code set_option(const SettableSocketOption& option,
                                  error_code& ec);

          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option) const;
          template<class GettableSocketOption>
            error_code get_option(GettableSocketOption& option,
                                  error_code& ec) const;

          template<class IoControlCommand>
            void io_control(IoControlCommand& command);
          template<class IoControlCommand>
            error_code io_control(IoControlCommand& command, error_code& ec);

          bool at_mark() const;
          bool at_mark(error_code& ec) const;

          size_t available() const;
          size_t available(error_code& ec) const;

          void bind(const endpoint_type& endpoint);
          error_code bind(const endpoint_type& endpoint, error_code& ec);

          void shutdown(shutdown_type what);
          error_code shutdown(shutdown_type what, error_code& ec);

          endpoint_type local_endpoint() const;
          endpoint_type local_endpoint(error_code& ec) const;

          endpoint_type remote_endpoint() const;
          endpoint_type remote_endpoint(error_code& ec) const;

          void connect(const endpoint_type& endpoint);
          error_code connect(const endpoint_type& endpoint, error_code& ec);

          template<class ConnectHandler>
            void async_connect(const endpoint_type& endpoint,
                               ConnectHandler handler);

        protected:
          // constructors:
          explicit basic_socket(std::tr2::sys::io_service& io_service);
          basic_socket(std::tr2::sys::io_service& io_service,
                       const protocol_type& protocol);
          basic_socket(std::tr2::sys::io_service& io_service,
                       const endpoint_type& endpoint);
          basic_socket(std::tr2::sys::io_service& io_service,
                       const protocol_type& protocol,
                       const native_type& native_socket);
          ~basic_socket();
        };

        // convenience functions:

        template<class Protocol, class SocketService>
          void connect(basic_socket<Protocol, SocketService>& s,
                       const typename Procotol::endpoint& e);
        template<class Protocol, class SocketService>
          error_code connect(basic_socket<Protocol, SocketService>& s,
                             const typename Procotol::endpoint& e,
                             error_code& ec);

        template<class Protocol, class SocketService, class ConnectHandler>
            void async_connect(basic_socket<Protocol, SocketService>& s,
                               const typename Procotol::endpoint& e,
                               ConnectHandler handler);

        template<class Protocol, class SocketService, class Iterator>
          void connect(basic_socket<Protocol, SocketService>& s,
                       Iterator first, Iterator last);
        template<class Protocol, class SocketService, class Iterator>
          error_code connect(basic_socket<Protocol, SocketService>& s,
                             Iterator first, Iterator last, error_code& ec);

        template<class Protocol, class SocketService, class Iterator,
          class ConnectHandler>
            void async_connect(basic_socket<Protocol, SocketService>& s,
                               Iterator first, Iterator last,
                               ConnectHandler handler);

      } // namespace sys
    } // namespace tr2
  } // namespace std

[section [^basic_socket] constructors]

  explicit basic_socket(std::tr2::sys::io_service& io_service);

[function_effects Constructs an object of class `basic_socket<Protocol,
SocketService>`, initialising the base class with
`basic_io_object(io_service)`.]

  basic_socket(std::tr2::sys::io_service& io_service,
               const protocol_type& protocol);

[function_effects Constructs an object of class `basic_socket<Protocol,
SocketService>`, initialising the base class with
`basic_io_object(io_service)`, then opening the socket as if by calling:
``
  error_code ec;
  this->service.open(this->implementation, protocol, ec);
  if (ec) throw system_error(ec);
``]

  basic_socket(std::tr2::sys::io_service& io_service,
               const endpoint_type& endpoint);

[function_effects Constructs an object of class `basic_socket<Protocol,
SocketService>`, initialising the base class with
`basic_io_object(io_service)`, then opening and binding the socket and marking
it as listening as if by calling:
``
  error_code ec;
  this->service.open(this->implementation, endpoint.protocol(), ec);
  if (ec) throw system_error(ec);
  this->service.bind(this->implementation, endpoint, ec);
  if (ec) throw system_error(ec);
``]

  basic_socket(std::tr2::sys::io_service& io_service,
               const protocol_type& protocol,
               const native_type& native_socket);

[function_effects Constructs an object of class `basic_socket<Protocol,
SocketService>`, initialising the base class with
`basic_io_object(io_service)`, then assigning the existing native socket into
the object as if by calling:
``
  error_code ec;
  this->service.assign(this->implementation, protocol, native_socket, ec);
  if (ec) throw system_error(ec);
``]

[endsect]

[section [^basic_socket] members]

  native_type native();

[function_returns `this->service.native(this->implementation)`.]

  void open(const protocol_type& protocol);
  error_code open(const protocol_type& protocol, error_code& ec);

[function_returns `this->service.open(this->implementation, protocol, ec)`.]

  void assign(const protocol_type& protocol,
    const native_type& native_socket);
  error_code assign(const protocol_type& protocol,
                    const native_type& native_socket, error_code& ec);

[function_returns `this->service.assign(this->implementation, protocol,
native_socket, ec)`.]

  bool is_open() const;

[function_returns `this->service.is_open(this->implementation)`.]

  void close();
  error_code close(error_code& ec);

[function_returns `this->service.close(this->implementation, ec)`.]

  void cancel();
  error_code cancel(error_code& ec);

[function_returns `this->service.cancel(this->implementation, ec)`.]

  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option);
  template<class SettableSocketOption>
    error_code set_option(const SettableSocketOption& option,
                          error_code& ec);

[function_returns `this->service.set_option(this->implementation, option, ec)`.]

  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option);
  template<class GettableSocketOption>
    error_code get_option(GettableSocketOption& option, error_code& ec);

[function_returns `this->service.get_option(this->implementation, option, ec)`.]

  template<class IoControlCommand>
    void io_control(IoControlCommand& command);
  template<class IoControlCommand>
    error_code io_control(IoControlCommand& command, error_code& ec);

[function_returns `this->service.io_control(this->implementation, command,
ec)`.]

  bool at_mark() const;
  bool at_mark(error_code& ec) const;

[function_returns `this->service.at_mark(this->implementation, ec)`.]

  size_t available() const;
  size_t available(error_code& ec) const;

[function_returns `this->service.available(this->implementation, ec)`.]

  void bind(const endpoint_type& endpoint);
  error_code bind(const endpoint_type& endpoint, error_code& ec);

[function_returns `this->service.bind(this->implementation, endpoint, ec)`.]

  void listen(int backlog = max_connections);
  error_code listen(int backlog, error_code& ec);

[function_returns `this->service.listen(this->implementation, backlog, ec)`.]

  void shutdown(shutdown_type what);
  error_code shutdown(shutdown_type what, error_code& ec);

[function_returns `this->service.shutdown(this->implementation, what, ec)`.]

  endpoint_type local_endpoint() const;
  endpoint_type local_endpoint(error_code& ec) const;

[function_returns `this->service.local_endpoint(this->implementation, ec)`.]

  endpoint_type remote_endpoint() const;
  endpoint_type remote_endpoint(error_code& ec) const;

[function_returns `this->service.remote_endpoint(this->implementation, ec)`.]

  void connect(const endpoint_type& endpoint);
  error_code connect(const endpoint_type& endpoint, error_code& ec);

[function_returns `this->service.connect(this->implementation, endpoint, ec)`.]

  template<class ConnectHandler>
    void async_connect(const endpoint_type& endpoint, ConnectHandler handler);

[function_effects Calls `this->service.async_connect(this->implementation,
endpoint, handler)`.]

[endsect]

[section [^basic_socket] convenience functions]

  template<class Protocol, class SocketService>
    void connect(basic_socket<Protocol, SocketService>& s,
                 const typename Procotol::endpoint& e);
  template<class Protocol, class SocketService>
    error_code connect(basic_socket<Protocol, SocketService>& s,
                       const typename Procotol::endpoint& e,
                       error_code& ec);

[function_requires `!s.is_open()`.]

[function_effects Behaves as if implemented as follows:
``
  s.open(e.protocol(), ec);
  if (!ec)
    s.connect(e, ec);
``]

[function_returns `ec`.]

  template<class Protocol, class SocketService, class ConnectHandler>
      void async_connect(basic_socket<Protocol, SocketService>& s,
                         const typename Procotol::endpoint& e,
                         ConnectHandler handler);

[function_requires `!s.is_open()`.]

[function_effects /TODO/]

  template<class Protocol, class SocketService, class Iterator>
    void connect(basic_socket<Protocol, SocketService>& s,
                 Iterator first, Iterator last);
  template<class Protocol, class SocketService, class Iterator>
    error_code connect(basic_socket<Protocol, SocketService>& s,
                       Iterator first, Iterator last, error_code& ec);

[function_requires `!s.is_open() && first != last`. `Iterator` is a forward
iterator type, and the result of dereferencing an object of type `Iterator` is
convertible to the `Protocol::endpoint` type.]

[function_effects Behaves as if implemented as follows:
``
  while (first != last)
  {
    typename Protocol::endpoint e(*first);
    s.open(e.protocol(), ec);
    if (!ec)
      s.connect(e, ec);
    if (!ec)
      break;
    s.close(ec);
    if (ec)
      break;
    ++first;
  }
``]

[function_returns `ec`.]

  template<class Protocol, class SocketService, class Iterator,
    class ConnectHandler>
      void async_connect(basic_socket<Protocol, SocketService>& s,
                         Iterator first, Iterator last,
                         ConnectHandler handler);

[function_requires `!s.is_open()`.]

[function_effects /TODO/]

[endsect]

[endsect]
