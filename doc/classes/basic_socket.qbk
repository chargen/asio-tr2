[section:basic_socket Class template [^basic_socket]]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        template<class Protocol>
        class basic_socket :
          public socket_base
        {
        public:
          // types:

          typedef io_service::executor_type executor_type;
          typedef ``['implementation defined]`` native_handle_type; // See ``[link requirements.native_handles native handles]``
          typedef Protocol protocol_type;
          typedef typename Protocol::endpoint endpoint_type;

          // basic_socket operations:

          executor_type get_executor() const noexcept;

          native_handle_type native_handle(); // See ``[link requirements.native_handles native handles]``

          void open(const protocol_type& protocol = protocol_type());
          void open(const protocol_type& protocol, error_code& ec);

          void assign(const protocol_type& protocol,
                      const native_handle_type& native_socket); // See ``[link requirements.native_handles native handles]``
          void assign(const protocol_type& protocol,
                      const native_handle_type& native_socket,
                      error_code& ec); // See ``[link requirements.native_handles native handles]``

          bool is_open() const;

          void close();
          void close(error_code& ec);

          void cancel();
          void cancel(error_code& ec);

          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option);
          template<class SettableSocketOption>
            void set_option(const SettableSocketOption& option, error_code& ec);

          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option) const;
          template<class GettableSocketOption>
            void get_option(GettableSocketOption& option, error_code& ec) const;

          template<class IoControlCommand>
            void io_control(IoControlCommand& command);
          template<class IoControlCommand>
            void io_control(IoControlCommand& command, error_code& ec);

          void non_blocking(bool mode);
          void non_blocking(bool mode, error_code& ec);
          bool non_blocking() const;

          void native_non_blocking(bool mode);
          void native_non_blocking(bool mode, error_code& ec);
          bool native_non_blocking() const;

          bool at_mark() const;
          bool at_mark(error_code& ec) const;

          size_t available() const;
          size_t available(error_code& ec) const;

          void bind(const endpoint_type& endpoint);
          void bind(const endpoint_type& endpoint, error_code& ec);

          void shutdown(shutdown_type what);
          void shutdown(shutdown_type what, error_code& ec);

          endpoint_type local_endpoint() const;
          endpoint_type local_endpoint(error_code& ec) const;

          endpoint_type remote_endpoint() const;
          endpoint_type remote_endpoint(error_code& ec) const;

          void connect(const endpoint_type& endpoint);
          void connect(const endpoint_type& endpoint, error_code& ec);

          template<class CompletionToken>
            auto async_connect(const endpoint_type& endpoint,
                               CompletionToken&& token);

        protected:
          // construct / copy / destroy:

          explicit basic_socket(io_service& ios);
          basic_socket(io_service& ios, const protocol_type& protocol);
          basic_socket(io_service& ios, const endpoint_type& endpoint);
          basic_socket(io_service& ios, const protocol_type& protocol,
                       const native_handle_type& native_socket); // See ``[link requirements.native_handles native handles]``
          basic_socket(const basic_socket&) = delete;
          basic_socket(basic_socket&& rhs);
          template<class OtherProtocol>
            basic_socket(basic_socket<OtherProtocol>&& rhs);

          ~basic_socket();

          basic_socket& operator=(const basic_socket&) = delete;
          basic_socket& operator=(basic_socket&& rhs);
          template<class OtherProtocol>
            basic_socket& operator=(basic_socket<OtherProtocol>&& rhs);
        };

      } // inline namespace network_v1
    } // namespace experimental
  } // namespace std

[section [^basic_socket] constructors]

  explicit basic_socket(io_service& ios);

[function_effects Constructs an object of class `basic_socket<Protocol>`.]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == false`.]

  basic_socket(io_service& ios, const protocol_type& protocol);

[function_effects Constructs an object of class `basic_socket<Protocol>`,
opening the socket as if by calling `open(protocol)`.]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.]

  basic_socket(io_service& ios, const endpoint_type& endpoint);

[function_effects Constructs an object of class `basic_socket<Protocol>`,
opening and binding the socket as if by calling:
``
  open(endpoint.protocol());
  bind(endpoint);
``]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.]

  basic_socket(io_service& ios, const protocol_type& protocol,
               const native_handle_type& native_socket);

[function_effects Constructs an object of class `basic_socket<Protocol>`,
assigning the existing native socket into the object as if by calling
`assign(protocol, native_socket)`.]

[function_postconditions\n
[mdash] `get_executor() == ios.get_executor()`.\n
[mdash] `non_blocking() == false`.]

[function_note Whether this function satisfies the postcondition `is_open() ==
true` is dependent on the implementation-defined semantics of the
`native_handle` type.]

  basic_socket(basic_socket&& rhs);

[function_effects Move constructs an object of class `basic_socket<Protocol>`
that refers to the state originally represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
constructor invocation.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the constructor invocation.\n
[mdash] `rhs.is_open() == false`.]

  template<class OtherProtocol>
    basic_socket(basic_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects Move constructs an object of class `basic_socket<Protocol>`
that refers to the state originally represented by `rhs`.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
constructor invocation.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the constructor invocation.\n
[mdash] `rhs.is_open() == false`.]

[function_remarks This constructor shall not participate in overload resolution
unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_socket] destructor]

  ~basic_socket();

[function_effects If `is_open()` is true, cancels any asynchronous operations
associated with the socket, disables the linger socket option to prevent the
destructor from blocking, and releases socket resources as if by __POSIX__
__close__. Otherwise, no effect. Handlers for cancelled operations shall be
passed an error code `ec` such that `ec == errc::operation_canceled` holds
true.]

[endsect]

[section [^basic_socket] assignment]

  basic_socket& operator=(basic_socket&& rhs);

[function_effects If `is_open()` is true, cancels any asynchronous operations
associated with the socket, disables the linger socket option to prevent the
assignment from blocking, and releases socket resources as if by __POSIX__
__close__. Then moves into `*this` the state originally represented by `rhs`.
Handlers for cancelled operations shall be passed an error code `ec` such that
`ec == errc::operation_canceled` holds true.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
assignment.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the assignment.\n
[mdash] `rhs.is_open() == false`.]

[function_returns `*this`.]

  template<class OtherProtocol>
    basic_socket& operator=(basic_socket<OtherProtocol>&& rhs);

[function_requires `OtherProtocol` is implicitly convertible to `Protocol`.]

[function_effects If `is_open()` is true, cancels any asynchronous operations
associated with the socket, disables the linger socket option to prevent the
assignment from blocking, and releases socket resources as if by __POSIX__
__close__. Then moves into `*this` the state originally represented by `rhs`.
Handlers for cancelled operations shall be passed an error code `ec` such that
`ec == errc::operation_canceled` holds true.]

[function_postconditions\n
[mdash] `get_executor() == rhs.get_executor()`.\n
[mdash] `is_open()` returns the same value as `rhs.is_open()` prior to the
assignment.\n
[mdash] `non_blocking()` returns the same value as `rhs.non_blocking()` prior
to the assignment.\n
[mdash] `rhs.is_open() == false`.]

[function_returns `*this`.]

[function_remarks This assignment operator shall not participate in overload
resolution unless `OtherProtocol` is implicitly convertible to `Protocol`.]

[endsect]

[section [^basic_socket] operations]

  executor_type get_executor() const noexcept;

[function_returns The associated executor.]

  native_handle_type native_handle();

[function_returns The native representation of the socket implementation.]

  void open(const protocol_type& protocol);
  void open(const protocol_type& protocol, error_code& ec);

[function_requires `!is_open()`.]

[function_effects Establishes the postcondition, as if by __POSIX__
__socket__.]

[function_postconditions\n
[mdash] `is_open() == true`.\n
[mdash] `non_blocking() == false`.]

[function_error_conditions\n
[mdash] `socket_errc::already_open` [mdash] if the requirement `!is_open()` is
unmet.]

  void assign(const protocol_type& protocol,
              const native_handle_type& native_socket);
  void assign(const protocol_type& protocol,
              const native_handle_type& native_socket, error_code& ec);

[function_requires `!is_open()`.]

[function_effects Assigns the native socket handle to the socket object.]

[function_postconditions `non_blocking() == false`.]

[function_error_conditions\n
[mdash] `socket_errc::already_open` [mdash] if the requirement `!is_open()` is
unmet.]

[function_note Whether this function satisfies the postcondition `is_open() ==
true` is dependent on the implementation-defined semantics of the
`native_handle` type.]

[commentary The main source of errors for `assign` would be a call to register
the socket with an OS-specific event demultiplexor, such as a `kqueue`, an
`epoll` descriptor, a `/dev/poll` device, or a __Windows__ I/O completion port.
These errors may also be produced by `open`, since that function would perform
the same registration.]

  bool is_open() const;

[function_returns A `bool` indicating whether the socket was opened by a
previous call to `open` or `assign`.]

  void close();
  void close(error_code& ec);

[function_effects If `is_open()` is true, cancels any asynchronous operations
associated with the socket, and establishes the postcondition as if by
__POSIX__ __close__. Otherwise, no effect. Handlers for cancelled asynchronous
operations are passed an error code `ec` such that `ec ==
errc::operation_canceled` holds true.]

[function_postconditions `is_open() == false`.]

  void cancel();
  void cancel(error_code& ec);

[function_effects If `is_open()` is true, cancels any asynchronous operations
associated with the socket. Handlers for cancelled asynchronous operations are
passed an error code `ec` such that `ec == errc::operation_canceled` holds
true.]

[function_error_conditions\n
[mdash] `errc::operation_not_supported` [mdash] Current conditions do not
permit cancellation. The conditions under which cancellation of asynchronous
operations is permitted are implementation-defined.]

[commentary This flexibility is included to support implementations on
__Windows__ versions prior to Vista, where the `CancelIo` function will only
cancel asynchronous operations started from the same thread. Vista provides
`CancelIoEx` which may be used to cancel all asynchronous operations associated
with a socket.]

  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option);
  template<class SettableSocketOption>
    void set_option(const SettableSocketOption& option, error_code& ec);

[function_effects Sets an option on the socket, as if by __POSIX__
__setsockopt__.]

  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option);
  template<class GettableSocketOption>
    void get_option(GettableSocketOption& option, error_code& ec);

[function_effects Gets an option from the socket, as if by __POSIX__
__getsockopt__.]

  template<class IoControlCommand>
    void io_control(IoControlCommand& command);
  template<class IoControlCommand>
    void io_control(IoControlCommand& command, error_code& ec);

[function_effects Executes an I/O control command on the socket, as if by
__POSIX__ __ioctl__.]

[commentary This proposal does not include any classes that satisfy [link
requirements.io_control_command `IoControlCommand`] requirements. However,
implementation-specific extensions such as QoS may be implemented using
`ioctl()`, and the `io_control()` operation is included to allow these
extensions to be supported.]

  void non_blocking(bool mode);
  void non_blocking(bool mode, error_code& ec);

[function_requires `is_open()`.]

[function_effects Sets the non-blocking mode of the socket. If `mode` is true,
subsequent synchronous operations may fail with error condition
`errc::operation_would_block` if they are unable to perform the requested
operation immediately. If `mode` is false, subsequent synchronous operations
shall block until complete.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is false.]

[function_note The non-blocking mode has no effect on the behavior of
asynchronous operations.]

  bool non_blocking() const;

[function_returns The non-blocking mode of the socket.]

  void native_non_blocking(bool mode);
  void native_non_blocking(bool mode, error_code& ec);

[function_effects Sets the non-blocking mode of the underlying native socket,
as if by __POSIX__ __fcntl__ with command `F_SETFL` to add or clear the file
status flag `O_NONBLOCK`. This mode shall have no effect on the behavior of
the synchronous or asynchronous operations specified in this clause.]

[function_error_conditions\n
[mdash] `errc::invalid_argument` [mdash] if `mode == false` and `non_blocking()
== true`. [inline_note As the combination does not make sense.]]

  bool native_non_blocking() const;

[function_returns The non-blocking mode of the underlying native socket.]

[function_remarks Implementations are permitted and encouraged to cache the
native non-blocking mode that was applied through a prior call to
`native_non_blocking`. Implementations may return an incorrect value if a
program sets the non-blocking mode directly on the socket, by calling an
operating system-specific function on the result of `native_handle()`.]

  bool at_mark() const;
  bool at_mark(error_code& ec) const;

[function_effects Determines if the socket is at the out-of-band data mark, as
if by __POSIX__ __sockatmark__.]

[function_returns A `bool` indicating whether the socket is at the out-of-band
data mark.]

  size_t available() const;
  size_t available(error_code& ec) const;

[function_requires `is_open()`.]

[function_returns An indication of the number of bytes that may be read without
blocking, or 0 if an error occurs.]

[function_error_conditions\n
[mdash] `errc::bad_file_descriptor` [mdash] if `is_open()` is false.]

  void bind(const endpoint_type& endpoint);
  void bind(const endpoint_type& endpoint, error_code& ec);

[function_effects Binds the socket to the specified local endpoint, as
if by __POSIX__ __bind__.]

  void shutdown(shutdown_type what);
  void shutdown(shutdown_type what, error_code& ec);

[function_effects Shuts down all or part of a full-duplex connection for the
socket, as if by __POSIX__ __shutdown__. If `what` is `shutdown_receive`, uses
__POSIX__ `SHUT_RD`. If `what` is `shutdown_send`, uses __POSIX__ `SHUT_WR`. If
`what` is `shutdown_both`, uses __POSIX__ `SHUT_RDWR`.]

  endpoint_type local_endpoint() const;
  endpoint_type local_endpoint(error_code& ec) const;

[function_effects Determines the locally-bound endpoint associated with the
socket, as if by __POSIX__ __getsockname__.]

[function_returns On success, the locally-bound endpoint. Otherwise
`endpoint_type()`.]

  endpoint_type remote_endpoint() const;
  endpoint_type remote_endpoint(error_code& ec) const;

[function_effects Determines the remote endpoint associated with the socket, as
if by __POSIX__ __getpeername__.]

[function_returns On success, the remote endpoint. Otherwise
`endpoint_type()`.]

  void connect(const endpoint_type& endpoint);
  void connect(const endpoint_type& endpoint, error_code& ec);

[function_effects If `is_open()` is false, opens the socket by performing
`open(endpoint.protocol(), ec)`; then, if no error has occurred, connects the
socket to the specified remote endpoint, as if by __POSIX__ __connect__.]

  template<class CompletionToken>
    auto async_connect(const endpoint_type& endpoint, CompletionToken&& token);

[function_block An [link requirements.asynchronous_operations asynchronous
operation].]

[function_completion_signature `void(error_code ec)`.]

[function_effects If `is_open()` is false, opens the socket by performing
`open(endpoint.protocol(), ec)`; then, if no error has occurred, initiates an
asynchronous operation to connect the socket to the specified remote endpoint,
as if by __POSIX__ __connect__.]

[function_block When multiple asynchronous connect operations are initiated
such that the operations may logically be performed in parallel, the behavior
is unspecified. When an asynchronous connect operation and an asynchronous read
or write operation are initiated such that they may logically be performed in
parallel, the behavior is unspecified.]

[function_block If a program performs a synchronous operation on the socket,
other than `close` or `cancel`, while there is an incomplete asynchronous
connect operation, the behavior is unspecified.]

[endsect]

[endsect]
