[section:ip__network_v4 Class template [^ip::network_v4]]
[xrefid internet.network.v4]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class network_v4
          {
          public:
            // constructors:
            constexpr network_v4() noexcept;
            constexpr network_v4(const address_v4& addr, unsigned short prefix_len);
            constexpr network_v4(const address_v4& addr, const address_v4& mask);

            // members:
            constexpr address_v4 address() const noexcept;
            constexpr unsigned short prefix_length() const noexcept;
            constexpr address_v4 netmask() const noexcept;
            constexpr address_v4 network() const noexcept;
            constexpr address_v4 broadcast() const noexcept;
            address_v4_range hosts() const noexcept;
            constexpr network_v4 canonical() const noexcept;
            constexpr bool is_host() const noexcept;
            constexpr bool is_subnet_of(const network_v4& other) const noexcept;
            string to_string() const;
          };

          // network_v4 comparisons:
          constexpr bool operator==(const network_v4& a, const network_v4& b) noexcept;
          constexpr bool operator!=(const network_v4& a, const network_v4& b) noexcept;

          // network_v4 creation:
          constexpr network_v4 make_network_v4(const address_v4& addr, unsigned short prefix_len);
          constexpr network_v4 make_network_v4(const address_v4& addr, const address_v4& mask);
          network_v4 make_network_v4(const char* str);
          network_v4 make_network_v4(const char* str, error_code& ec) noexcept;
          network_v4 make_network_v4(string_view str);
          network_v4 make_network_v4(string_view str, error_code& ec) noexcept;

          // network_v4 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>& os, const network_v4& addr);

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^ip::network_v4] constructors]
[xrefid internet.network.v4.cons]

  constexpr network_v4() noexcept;

[function_postconditions `this->address().is_unspecified() == true` and
`prefix_length() == 0`.]

  constexpr network_v4(const address_v4& addr, unsigned short prefix_len);

[function_postconditions `this->address() == addr` and
`prefix_length() == prefix_len`.]

[function_throws `out_of_range` if `prefix_len > 32`.]

  constexpr network_v4(const address_v4& addr, const address_v4& mask);

[function_postconditions `this->address() == addr` and `prefix_length()` is equal to
the number of contiguous non-zero bits.]

[function_throws `invalid_argument` if `mask` contains non-contiguous non-zero
bits, or if the most significant bit is zero and any other bits are non-zero.]

[endsect]

[section [^ip::network_v4] members]
[xrefid internet.network.v4.members]

  constexpr address_v4 address() const noexcept;

[function_returns The address specified when the `network_v4` object was
constructed.]

  constexpr unsigned short prefix_length() const noexcept;

[function_returns The prefix length of the network.]

  constexpr address_v4 netmask() const noexcept;

[function_returns An `address_v4` object with `prefix_length()` contiguous
non-zero bits set, starting from the most significant bit in network byte
order. All other bits are zero.]

  constexpr address_v4 network() const noexcept;

[function_returns An `address_v4` object with the first `prefix_length()` bits,
starting from the most significant bit in network byte order, set to the
corresponding bit value of `this->address()`. All other bits are zero.]

  constexpr address_v4 broadcast() const noexcept;

[function_returns An `address_v4` object with the first `prefix_length()` bits,
starting from the most significant bit in network byte order, set to the
corresponding bit value of `this->address()`. All other bits are non-zero.]

  address_v4_range hosts() const noexcept;

[function_returns If `is_host() == true`, an `address_v4_range` object
representing the single address `this->address().` Otherwise, an
`address_v4_range` object representing the range of unique host IP addresses in
the network.]

[function_note For IPv4, the network address and the broadcast address are not
included in the range of host IP addresses. For example, given a network
`192.168.1.0/24`, the range returned by `hosts()` is from `192.168.1.1` to
`192.168.1.254` inclusive, and neither `192.168.1.0` nor the broadcast address
`192.168.1.255` are in the range.]

  constexpr network_v4 canonical() const noexcept;

[function_returns `network_v4(network(), prefix_length())`.]

  constexpr bool is_host() const noexcept;

[function_returns `prefix_length() == 32`.]

  constexpr bool is_subnet_of(const network_v4& other) const noexcept;

[function_returns `true` if `other.prefix_length() < prefix_length()` and
`network_v4(this->address(), other.prefix_length()).canonical() ==
other.canonical()`, otherwise `false`.]

  string to_string() const;

[function_returns `this->address().to_string() + '/' +
to_string(prefix_length())`.]

[endsect]

[section:ip__network_v4__comparisons [^ip::network_v4] comparisons]
[xrefid internet.network.v4.comparisons]

  constexpr bool operator==(const network_v4& a, const network_v4& b) noexcept;

[function_returns `true` if `a.address() == b.address()` and `a.prefix_length()
== b.prefix_length()`, otherwise `false`.]

  constexpr bool operator!=(const network_v4& a, const network_v4& b) noexcept;

[function_returns `!(a == b)`.]

[endsect]

[section:ip__network_v4__creation [^ip::network_v4] creation]
[xrefid internet.network.v4.creation]

  constexpr network_v4 make_network_v4(const address_v4& addr, unsigned short prefix_len);

[function_returns `network_v4(addr, prefix_len)`.]

  constexpr network_v4 make_network_v4(const address_v4& addr, const address_v4& mask);

[function_returns `network_v4(addr, mask)`.]

  network_v4 make_network_v4(const char* str);
  network_v4 make_network_v4(const char* str, error_code& ec) noexcept;
  network_v4 make_network_v4(string_view str);
  network_v4 make_network_v4(string_view str, error_code& ec) noexcept;

[function_returns If `str` contains a value of the form ['address] `'/'`
['prefix-length], a `network_v4` object constructed with the result of applying
`make_address_v4()` to the ['address] portion of the string, and the result of
converting ['prefix-length] to an integer of type `unsigned short`. Otherwise
returns `network_v4()` and sets `ec` to reflect the error.]

[endsect]

[section:ip__network_v4__io [^ip::network_v4] I/O]
[xrefid internet.network.v4.io]

  template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os, const network_v4& net);

[function_effects Outputs the string representation of the network to the
stream, as if it were implemented as follows:
``
  string s = net.to_string();
  for (string::iterator i = s.begin(); i != s.end(); ++i)
    os << os.widen(*i);
``]

[function_returns `os`.]

[endsect]

[endsect]
