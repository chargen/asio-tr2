[section:io_service Class [^io_service]]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        class io_service : public execution_context
        {
        public:
          // types:

          class ``[link classes.io_service__executor_type executor_type]``;

          // construct / copy / destroy:

          io_service();
          explicit io_service(std::size_t concurrency_hint);
          io_service(const io_service&) = delete;
          io_service& operator=(const io_service&) = delete;
          ~io_service();

          // io_service operations:

          executor_type get_executor() noexcept;

          size_t run();
          template<class Rep, class Period>
            size_t run_for(const chrono::duration<Rep, Period>& rel_time);
          template<class Clock, class Duration>
            size_t run_until(const chrono::time_point<Clock, Duration>& abs_time);

          size_t run_one();
          template<class Rep, class Period>
            size_t run_one_for(const chrono::duration<Rep, Period>& rel_time);
          template<class Clock, class Duration>
            size_t run_one_until(const chrono::time_point<Clock, Duration>& abs_time);

          size_t poll();

          size_t poll_one();

          void stop();

          bool stopped() const;

          void restart();
        };

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[link definitions.synchronous_operation Synchronous operations] on I/O objects
implicitly run the `io_service` object for an individual operation. The
`io_service` functions `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll` or `poll_one` must be called for the `io_service` to
perform [link definitions.asynchronous_operation asynchronous operations] on
behalf of a C++ program. Notification that an asynchronous operation has
completed is delivered by execution of the associated handler function object,
as determined by the requirements for [link
requirements.asynchronous_operations asynchronous operations].

An object of type `io_service` has an associated executor object, meeting the
[link requirements.executor Executor type requirements], of type
`io_service::executor_type` and obtainable via the `io_service` object's
`get_executor` member function.

For an object of type `io_service`, ['outstanding work] is defined as the sum
of:

[mdash] the total number of calls to the `io_service` executor's
`on_work_started` function, less the total number of calls to the
`on_work_finished` function;

[mdash] the number of function objects that have been added to the `io_service`
via the `io_service` executor, but not yet executed; and

[mdash] the number of function objects that are currently being executed by the
`io_service`.

If at any time the outstanding work falls to `0`, the `io_service` is stopped
as if by `stop()`.

The `io_service` member functions `get_executor`, `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll`, `poll_one`,
`stop`, and `stopped`, and the `io_service::executor_type` copy constructors,
member functions and comparison operators, shall not introduce data races as a
result of concurrent calls to those functions from different threads.
[inline_note The `restart` member function is excluded from these thread safety
requirements.]

[section [^io_service] constructors/destructor]

  io_service();
  explicit io_service(std::size_t concurrency_hint);

[function_effects Creates an object of class `io_service`.]

[function_remarks The `concurrency_hint` parameter is a suggestion to the
implementation on the number of threads that should process asynchronous
operations and execute function objects.]

  ~io_service();

[function_effects Destroys an object of class `io_service`.]

[endsect]

[section [^io_service] members]

  executor_type get_executor() noexcept;

[function_returns An executor that may be used for submitting function objects
to the `io_service`.]

  size_t run();

[function_requires Must not be called from a thread that is currently calling
one of `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll`, or `poll_one`.]

[function_effects Equivalent to:
``
  size_t n = 0;
  while (run_one())
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  template<class Rep, class Period>
    size_t run_for(const chrono::duration<Rep, Period>& rel_time);

[function_effects Equivalent to:
``
  return run_until(chrono::steady_clock::now() + rel_time);
``]

  template<class Clock, class Duration>
    size_t run_until(const chrono::time_point<Clock, Duration>& abs_time);

[function_effects Equivalent to:
``
  size_t n = 0;
  while (run_one_until(abs_time))
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  size_t run_one();

[function_requires Must not be called from a thread that is currently calling
one of `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll`, or `poll_one`.]

[function_effects If the `io_service` object has no oustanding work, performs
`stop()`. Otherwise, blocks while the io_service has outstanding work, or until
the `io_service` is stopped, or until one function object has been executed.]

[function_block If an executed function object throws an exception, the
exception shall be allowed to propagate to the caller of `run_one()`. The
`io_service` state shall be as if the function object had returned normally.]

[function_returns `1` if a function object was executed, otherwise `0`.]

[function_notes This function may invoke additional handlers through nested
calls to the `io_service` executor's `dispatch` member function. These do not
count towards the return value.]

  template<class Rep, class Period>
    size_t run_one_for(const chrono::duration<Rep, Period>& rel_time);

[function_effects Equivalent to:
``
  return run_until(chrono::steady_clock::now() + rel_time);
``]

[function_returns `1` if a function object was executed, otherwise `0`.]

  template<class Clock, class Duration>
    size_t run_one_until(const chrono::time_point<Clock, Duration>& abs_time);

[function_effects If the `io_service` object has no oustanding work, performs
`stop()`. Otherwise, blocks while the io_service has outstanding work, or until
the expiration of the absolute timeout (C++ Std, \[thread.req.timing\])
specified by `abs_time`, or until the `io_service` is stopped, or until one
function object has been executed.]

[function_block If an executed function object throws an exception, the
exception shall be allowed to propagate to the caller of `run_one()`. The
`io_service` state shall be as if the function object had returned normally.]

[function_returns `1` if a function object was executed, otherwise `0`.]

[function_notes This function may invoke additional handlers through nested
calls to the `io_service` executor's `dispatch` member function. These do not
count towards the return value.]

  size_t poll();

[function_effects Equivalent to:
``
  size_t n = 0;
  while (poll_one())
    if (n != numeric_limits<size_t>::max())
      ++n;
``]

[function_returns `n`.]

  size_t poll_one();

[function_effects If the `io_service` object has no oustanding work, performs
`stop()`. Otherwise, if there is a function object ready for immediate
execution, executes it.]

[function_block If an executed function object throws an exception, the
exception shall be allowed to propagate to the caller of `poll_one()`. The
`io_service` state shall be as if the function object had returned normally.]

[function_returns `1` if a handler was invoked, otherwise `0`.]

[function_notes This function may invoke additional handlers through nested
calls to the `io_service` executor's `dispatch` member function. These do not
count towards the return value.]

  void stop();

[function_effects Stops the `io_service`. Concurrent calls to `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one`
will end as soon as possible. If a call to `run`, `run_for`, `run_until`,
`run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one` is currently
executing a function object, the call will end only after completion of that
function object. The call to `stop()` returns without waiting for concurrent
calls to `run`, `run_for`, `run_until`, `run_one`, `run_one_for`,
`run_one_until`, `poll` or `poll_one` to complete.]

[function_postconditions `stopped() == true`.]

[function_note When `stopped() == true`, subsequent calls to `run`, `run_for`,
`run_until`, `run_one`, `run_one_for`, `run_one_until`, `poll` or `poll_one`
will exit immediately with a return value of `0`, without executing any
function objects. An `io_service` remains in the stopped state until a call to
`restart()`.]

  void restart();

[function_postconditions `stopped() == false`.]

[endsect]

[endsect]
