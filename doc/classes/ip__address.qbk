[section:ip__address Class [^ip::address]]
[xrefid internet.address]

The class `address` is a version-independent representation for an IP address.
An object of class `address` holds either an IPv4 address, an IPv6 address, or
no valid address.

  namespace std {
  namespace experimental {
  __begin_versioned_ns__
  namespace ip {

    class address
    {
    public:
      // constructors:
      constexpr address() noexcept;
      constexpr address(const address& a) noexcept;
      constexpr address(const address_v4& a) noexcept;
      constexpr address(const address_v6& a) noexcept;

      // assignment:
      address& operator=(const address& a) noexcept;
      address& operator=(const address_v4& a) noexcept;
      address& operator=(const address_v6& a) noexcept;

      // members:
      constexpr bool is_v4() const noexcept;
      constexpr bool is_v6() const noexcept;
      constexpr address_v4 to_v4() const;
      constexpr address_v6 to_v6() const;
      constexpr bool is_unspecified() const noexcept;
      constexpr bool is_loopback() const noexcept;
      constexpr bool is_multicast() const noexcept;
      template<class Allocator = allocator<char>>
        basic_string<char, char_traits<char>, Allocator>
          to_string(const Allocator& a = Allocator()) const;

    private:
      address_v4 v4_; // ``['exposition only]``
      address_v6 v6_; // ``['exposition only]``
    };

    // address comparisons:
    constexpr bool operator==(const address& a, const address& b) noexcept;
    constexpr bool operator!=(const address& a, const address& b) noexcept;
    constexpr bool operator< (const address& a, const address& b) noexcept;
    constexpr bool operator> (const address& a, const address& b) noexcept;
    constexpr bool operator<=(const address& a, const address& b) noexcept;
    constexpr bool operator>=(const address& a, const address& b) noexcept;

    // address creation:
    address make_address(const char* str);
    address make_address(const char* str, error_code& ec) noexcept;
    address make_address(const string& str);
    address make_address(const string& str, error_code& ec) noexcept;
    address make_address(string_view str);
    address make_address(string_view str, error_code& ec) noexcept;

    // address I/O:
    template<class CharT, class Traits>
      basic_ostream<CharT, Traits>& operator<<(
        basic_ostream<CharT, Traits>& os, const address& addr);

  } // namespace ip
  __end_versioned_ns__
  } // namespace experimental
  } // namespace std

[section [^ip::address] constructors]
[xrefid internet.address.cons]

  constexpr address() noexcept;

[function_postconditions `is_v4() == true`, `is_v6() == false`, and
`is_unspecified() == true`.]

  constexpr address(const address& a) noexcept;

[function_postconditions `*this == a`]

  constexpr address(const address_v4& a) noexcept;

[function_effects Initializes `v4_` with `a`.]

[function_postconditions `is_v4() == true` and `is_v6() == false`.]

  constexpr address(const address_v6& a) noexcept;

[function_effects Initializes `v6_` with `a`.]

[function_postconditions `is_v4() == false` and `is_v6() == true`.]

[endsect]

[section [^ip::address] assignment]
[xrefid internet.address.assign]

  address& operator=(const address& a) noexcept;

[function_postconditions `*this == a`]

[function_returns `*this`]

  constexpr address(const address_v4& a) noexcept;

[function_postconditions `is_v4() == true` and `is_v6() == false` and `to_v4() == a`.]

[function_returns `*this`]

  constexpr address(const address_v6& a) noexcept;

[function_postconditions `is_v4() == false` and `is_v6() == true` and `to_v6() == a`.]

[function_returns `*this`]

[endsect]

[section [^ip::address] members]
[xrefid internet.address.members]

  constexpr bool is_v4() const noexcept;

[function_returns `true` if the object contains an IP version 4 address,
otherwise `false`.]

  constexpr bool is_v6() const noexcept;

[function_returns `true` if the object contains an IP version 6 address,
otherwise `false`.]

  constexpr address_v4 to_v4() const;

[function_returns `v4_`.]

[function_throws `bad_address_cast` if `is_v4() == false`.]

  constexpr address_v6 to_v6() const;

[function_returns `v6_`.]

[function_throws `bad_address_cast` if `is_v6() == false`.]

  constexpr bool is_unspecified() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_unspecified()`. Otherwise
returns `v6_.is_unspecified()`.]

  constexpr bool is_loopback() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_loopback()`. Otherwise
returns `v6_.is_loopback()`.]

  constexpr bool is_multicast() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_multicast()`. Otherwise
returns `v6_.is_multicast()`.]

  template<class Allocator = allocator<char>>
    basic_string<char, char_traits<char>, Allocator>
      to_string(const Allocator& a = Allocator()) const;

[function_returns If `is_v4()`, returns `v4_.to_string(a)`. Otherwise
returns `v6_.to_string(a)`.]

[endsect]

[section:ip__address__comparisons [^ip::address] comparisons]
[xrefid internet.address.comparisons]

  constexpr bool operator==(const address& a, const address& b) noexcept;

[function_returns [br]
 [mdash] if `a.is_v4() != b.is_v4()`, `false`;[br]
 [mdash] if `a.is_v4()`, the result of `a.v4_ == b.v4_`;[br]
 [mdash] otherwise, the result of `a.v6_ == b.v6_`.]

  constexpr bool operator!=(const address& a, const address& b) noexcept;

[function_returns `!(a == b)`.]

  constexpr bool operator< (const address& a, const address& b) noexcept;

[function_returns [br]
 [mdash] if `a.is_v4() && !b.is_v4()`, `true`;[br]
 [mdash] if `!a.is_v4() && b.is_v4()`, `false`;[br]
 [mdash] if `a.is_v4()`, the result of `a.v4_ < b.v4_`;[br]
 [mdash] otherwise, the result of `a.v6_ < b.v6_`.]

  constexpr bool operator> (const address& a, const address& b) noexcept;

[function_returns `b < a`.]

  constexpr bool operator<=(const address& a, const address& b) noexcept;
  
[function_returns `!(b < a)`.]

  constexpr bool operator>=(const address& a, const address& b) noexcept;

[function_returns `!(a < b)`.]

[endsect]

[section:ip__address__creation [^ip::address] creation]
[xrefid internet.address.creation]

  address make_address(const char* str);
  address make_address(const char* str, error_code& ec) noexcept;
  address make_address(const string& str);
  address make_address(const string& str, error_code& ec) noexcept;
  address make_address(string_view str);
  address make_address(string_view str, error_code& ec) noexcept;

[function_effects Converts a textual representation of an address into an
object of class `address`, as if by calling:
``
  address a;
  address_v6 v6a = make_address_v6(str, ec);
  if (!ec)
    a = v6a;
  else
  {
    address_v4 v4a = make_address_v4(str, ec);
    if (!ec)
      a = v4a;
  }
``]

[function_returns `a`.]

[endsect]

[section:ip__address__io [^ip::address] I/O]
[xrefid internet.address.io]

  template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os, const address& addr);

[function_returns `os << addr.to_string().c_str()`.]

[endsect]

[endsect]
