[section:ip__address Class [^ip::address]]
[xrefid internet.address]

The class `address` is a version-independent representation for an IP address.
An object of class `address` holds either an IPv4 address, an IPv6 address, or
no valid address.

  namespace std {
    namespace experimental {
      __begin_versioned_ns__
        namespace ip {

          class address
          {
          public:
            // constructors:
            constexpr address() noexcept;
            constexpr address(const address& a) noexcept;
            template<class T> constexpr address(const T& t) noexcept(``['see below]``);

            // assignment:
            address& operator=(const address& a) noexcept;

            // members:
            constexpr bool is_v4() const noexcept;
            constexpr bool is_v6() const noexcept;
            constexpr bool is_unspecified() const noexcept;
            constexpr bool is_loopback() const noexcept;
            constexpr bool is_multicast() const noexcept;
            string to_string() const;

          private:
            enum { none_ = 0, is_v4_, is_v6_ } type_; // ``['exposition only]``
            address_v4 v4_; // ``['exposition only]``
            address_v6 v6_; // ``['exposition only]``
          };

          // address comparisons:
          bool operator==(const address& a, const address& b) noexcept;
          bool operator!=(const address& a, const address& b) noexcept;
          bool operator< (const address& a, const address& b) noexcept;
          bool operator> (const address& a, const address& b) noexcept;
          bool operator<=(const address& a, const address& b) noexcept;
          bool operator>=(const address& a, const address& b) noexcept;

          // address creation:
          address make_address(const char* str);
          address make_address(const char* str, error_code& ec) noexcept;
          address make_address(string_view str);
          address make_address(string_view str, error_code& ec) noexcept;

          // address I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>& os, const address& addr);

        } // namespace ip
      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[section [^ip::address] constructors]
[xrefid internet.address.cons]

  constexpr address() noexcept;

[function_effects Constructs an object of class `address`, initializing `type_`
with value `none_`.]

[function_postconditions `is_v4() == false` and `is_v6() === false`.]

  constexpr address(const address& a) noexcept;

[function_postconditions `*this == a`]

  template<class T> constexpr address(const T& t) noexcept(``['see below]``);

[function_remarks This constructor shall not participate in overload resolution
unless `address_cast<address>(t)` is valid and yields an rvalue of type
`address`. The expression inside `noexcept` shall be equivalent to
`noexcept(address_cast<address>(t))`.]

[function_effects Constructs an object of type `address` with the result of the
expression `address_cast<address>(t)`.]

[function_throws Nothing unless the expression `address_cast<address>(t)`
throws an exception.]

[endsect]

[section [^ip::address] assignment]
[xrefid internet.address.assign]

  address& operator=(const address& a) noexcept;

[function_postconditions `*this == a`]

[function_returns `*this`]

[endsect]

[section [^ip::address] members]
[xrefid internet.address.members]

  constexpr bool is_v4() const noexcept;

[function_returns `type_ == is_v4_`.]

  constexpr bool is_v6() const noexcept;

[function_returns `type_ == is_v6_`.]

  constexpr bool is_unspecified() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_unspecified()`. If `is_v6()`,
returns `v6_.is_unspecified()`. Otherwise returns `false`.]

  constexpr bool is_loopback() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_loopback()`. If `is_v6()`,
returns `v6_.is_loopback()`. Otherwise returns `false`.]

  constexpr bool is_multicast() const noexcept;

[function_returns If `is_v4()`, returns `v4_.is_multicast()`. If `is_v6()`,
returns `v6_.is_multicast()`. Otherwise returns `false`.]

  string to_string() const;

[function_returns If `is_v4()`, returns `v4_.to_string()`. If `is_v6()`,
returns `v6_.to_string()`. Otherwise throws `bad_address_cast`.]

[endsect]

[section:ip__address__comparisons [^ip::address] comparisons]
[xrefid internet.address.comparisons]

  bool operator==(const address& a, const address& b) noexcept;

[function_returns [br]
 [mdash] if `a.type_ != b.type_`, `false`;[br]
 [mdash] if `a.is_v4()`, the result of `a.v4_ == b.v4_`;[br]
 [mdash] if `a.is_v6()`, the result of `a.v6_ == b.v6_`;[br]
 [mdash] otherwise, `true`.]

  bool operator!=(const address& a, const address& b) noexcept;

[function_returns `!(a == b)`.]

  bool operator< (const address& a, const address& b) noexcept;

[function_returns [br]
 [mdash] if `a.type_ < b.type_`, `true`;[br]
 [mdash] if `a.type_ > b.type_`, `false`;[br]
 [mdash] if `a.is_v4()`, the result of `a.v4_ < b.v4_`;[br]
 [mdash] if `a.is_v6()`, the result of `a.v6_ < b.v6_`;[br]
 [mdash] otherwise, `false`.]

  bool operator> (const address& a, const address& b) noexcept;

[function_returns `b < a`.]

  bool operator<=(const address& a, const address& b) noexcept;
  
[function_returns `!(b < a)`.]

  bool operator>=(const address& a, const address& b) noexcept;

[function_returns `!(a < b)`.]

[endsect]

[section:ip__address__creation [^ip::address] creation]
[xrefid internet.address.creation]

  address make_address(const char* str);
  address make_address(const char* str, error_code& ec) noexcept;
  address make_address(string_view str);
  address make_address(string_view str, error_code& ec) noexcept;

[function_effects Converts a textual representation of an address into an
object of class `address`, as if by calling:
``
  address a;
  address_v6 v6a = make_address_v6(str, ec);
  if (!ec)
    a = v6a;
  else
  {
    address_v4 v4a = make_address_v4(str, ec);
    if (!ec)
      a = v4a;
  }
``]

[function_returns `a`.]

[endsect]

[section:ip__address__io [^ip::address] I/O]
[xrefid internet.address.io]

  template<class CharT, class Traits>
    basic_ostream<CharT, Traits>& operator<<(
      basic_ostream<CharT, Traits>& os, const address& addr);

[function_effects Outputs the textual representation of the address to the
stream, as if it were implemented as follows:
``
  string s = addr.to_string();
  for (string::iterator i = s.begin(); i != s.end(); ++i)
    os << os.widen(*i);
``]

[function_returns `os`.]

[endsect]

[endsect]
