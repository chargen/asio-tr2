[library Networking Library Proposal (Revision 5)
    [quickbook 1.1]
    [id network]
]

[/-----------------------------------------------------------------------------]

[template std_note[text]
\[['Note:] [text] '''&mdash;'''['end note]\]
]

[template inline_note[text] \[['Note:] [text] '''&mdash;'''['end note]\] ]

[template std_example[text code]
\[['Example:] [text]
[code]
'''&mdash;'''['end example]\]
]

[template function_block[text]
[:[text]]
]

[template function_requires[text]
[:['Requires:] [text]]
]

[template function_effects[text]
[:['Effects:] [text]]
]

[template function_returns[text]
[:['Returns:] [text]]
]

[template function_throws[text]
[:['Throws:] [text]]
]

[template function_postconditions[text]
[:['Postconditions:] [text]]
]

[template function_error_conditions[text]
[:['Error conditions:] [text]]
]

[template function_completion_signature[text]
[:['Completion signature:] [text]]
]

[template function_complexity[text]
[:['Complexity:] [text]]
]

[template function_remarks[text]
[:['Remarks:] [text]]
]

[template function_notes[text]
[:['Notes:] [text]]
]

[template function_note[text]
[:\[['Note:] [text] '''&mdash;'''['end note]\]]
]

[template function_example[text]
[:\[['Example:] [text]
'''&mdash;'''['end example]\]]
]

[template function_type[text]
[:['Type:] [text]]
]

[template commentary[text]
[blurb [text]]
]

[template xrefid[text] '''<phrase role="xrefid">
<anchor id="'''[text]'''"/>
<link linkend="'''[text]'''">'''\[[text]\]'''</link>
<indexterm><primary>'''[text]'''</primary></indexterm>
</phrase>''']

[template xref[text]'''<link linkend="'''[text]'''">'''\[[text]\]'''</link>''']

[template mdash[] '''&mdash; ''']
[template indent[] '''&nbsp;&nbsp;&nbsp;&nbsp;''']
[template bullet[] [indent]'''&bull; ''']

[template half_open_range[text] '''&#91;'''[text])]

[template sub[x]'''<subscript>'''[x]'''</subscript>''']

[/-----------------------------------------------------------------------------]

[def __POSIX__ POSIX]
[def __Windows__ Windows]
[def __accept__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/accept.html accept]]
[def __bind__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/bind.html bind]]
[def __close__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/close.html close]]
[def __connect__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/connect.html connect]]
[def __fcntl__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/fcntl.html fcntl]]
[def __getaddrinfo__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html getaddrinfo]]
[def __gethostname__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/gethostname.html gethostname]]
[def __getnameinfo__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/getnameinfo.html getnameinfo]]
[def __getpeername__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/getpeername.html getpeername]]
[def __getsockname__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/getsockname.html getsockname]]
[def __getsockopt__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/getsockopt.html getsockopt]]
[def __inet_ntop__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/inet_ntop.html inet_ntop]]
[def __inet_pton__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/inet_pton.html inet_pton]]
[def __ioctl__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/ioctl.html ioctl]]
[def __listen__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/listen.html listen]]
[def __poll__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/poll.html poll]]
[def __recvfrom__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html recvfrom]]
[def __recvmsg__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html recvmsg]]
[def __select__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/select.html select]]
[def __sendmsg__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html sendmsg]]
[def __sendto__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/sendto.html sendto]]
[def __setsockopt__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/setsockopt.html setsockopt]]
[def __shutdown__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/shutdown.html shutdown]]
[def __sockatmark__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/sockatmark.html sockatmark]]
[def __socket__ [@http://www.opengroup.org/onlinepubs/9699919799/functions/socket.html socket]]
[def __errno_h__ [@http://www.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html `errno.h`]]
[def __netdb_h__ [@http://www.opengroup.org/onlinepubs/9699919799/basedefs/netdb.h.html `netdb.h`]]
[def __sys_socket_h__ [@http://www.opengroup.org/onlinepubs/9699919799/basedefs/sys_socket.h.html `sys/socket.h`]]
[def __netinet_in_h__ [@http://www.opengroup.org/onlinepubs/9699919799/basedefs/netinet_in.h.html `netinet/in.h`]]
[def __netinet_tcp_h__ [@http://www.opengroup.org/onlinepubs/9699919799/basedefs/netinet_tcp.h.html `netinet/tcp.h`]]
[def __dotdot__ ..]
[def __dotdotdot__ ...]
[def __empty_capture__ '''[]''']
[def __unspecified__ '''<emphasis>unspecified</emphasis>''']
[def __ifr__ '''<emphasis>DEDUCED</emphasis>''']
[def __ns__ net]
[def __versioned_ns__ net::v1]
[def __begin_versioned_ns__ '''<phrase role="keyword">namespace</phrase> <phrase role="identifier">net</phrase> <phrase role="special">{</phrase>
<phrase role="keyword">inline namespace</phrase> <phrase role="identifier">v1</phrase> <phrase role="special">{</phrase>''']
[def __end_versioned_ns__ '''<phrase role="special">}</phrase> <phrase role="comment">// inline namespace v1</phrase>
<phrase role="special">}</phrase> <phrase role="comment">// namespace net</phrase>''']

[/-----------------------------------------------------------------------------]

[template POSIX[] \[[link ref-POSIX POSIX]\]]
[template N4045[] \[[link ref-N4045 N4045]\]]
[template N4242[] \[[link ref-N4045 N4242]\]]
[template N4099[] \[[link ref-N4099 N4099]\]]
[template ACE[] \[[link ref-ACE ACE]\]]
[template SYMBIAN[] \[[link ref-SYMBIAN SYMBIAN]\]]
[template MSNET[] \[[link ref-MS-NET MS-NET]\]]
[template ESAPI[] \[[link ref-ES-API ES-API]\]]
[template UNPV1[] \[[link ref-UNPV1 UNPV1]\]]
[template POSA2[] \[[link ref-POSA2 POSA2]\]]
[template RFC821[] \[[link ref-RFC821 RFC821]\]]
[template RFC959[] \[[link ref-RFC959 RFC959]\]]
[template RFC2616[] \[[link ref-RFC2616 RFC2616]\]]
[template RFC2732[] \[[link ref-RFC2732 RFC2732]\]]
[template RFC3513[] \[[link ref-RFC3513 RFC3513]\]]

[/-----------------------------------------------------------------------------]

[section Introduction]

In the June 2014 committee meeting in Rapperswil, LEWG requested that
Boost.Asio-based N2175 ['Networking Library Proposal for TR2 (Revision 1)] be
updated for C++14 and brought forward as a proposed Networking Technical
Specification. This document is that revision. As well as updating the proposal
for C++14, it incorporates improvements to Asio that are based on the
widespread field experience accumulated since 2007.

The [@http://www.boost.org/libs/asio Boost.Asio] library, from which this
proposal is derived, has been deployed in numerous systems, from large
(including internet-facing HTTP servers, instant messaging gateways and
financial markets applications) to small (mobile phones and embedded systems).
The Asio library supports, or has been ported to, many operating systems
including Linux, Mac OS X, Windows (native), Windows Runtime, Solaris, FreeBSD,
NetBSD, OpenBSD, HP-UX, Tru64, AIX, iOS, Android, WinCE, Symbian, vxWorks and
QNX Neutrino.

[endsect]

[/-----------------------------------------------------------------------------]

[section Changes in this revision]

This revision contains numerous changes resulting from the LWG wording review
held in Cologne in February 2015. Please note, however, it does not yet contain
all of the wording corrections and suggestions from that meeting, nor have the
applied corrections and changes been reviewed. As the changes are too extensive
to list here, readers may wish to view the GitHub page for this proposal at
['[@https://github.com/chriskohlhoff/asio-tr2/]] for further information.

The purpose of this revision is to provide LEWG with up-to-date wording in
order to confirm and/or consider certain design choices, based on feedback from
Cologne. To facilitate this process, this revision contains some of the
suggested design changes from the wording review. There are two significant
design changes worth noting here.

First, the `basic_socket_acceptor` class's `accept` and `async_accept` member
functions have been changed to produce the incoming socket object by moving the
result, rather than by taking a socket object by non-const reference. For example,
a synchronous accept operation may now look like this:

  tcp::socket socket(my_acceptor.accept());
  // read and write on newly accepted socket ...

and an asynchronous accept operation like this:

  my_acceptor.async_accept(
      [](error_code ec, tcp::socket socket)
      {
        if (!ec)
        {
          // read and write on newly accepted socket
        }
      });

As a consequence of this change, the `basic_socket_streambuf` class no longer
inherits from `basic_socket` [mdash] it did so previously to allow users to
pass it to `accept()` or `async_accept()`. Instead, `basic_socket_streambuf`
and `basic_socket_iostream` are move-enabled and support the ability to
move-construct from a socket:

  tcp::iostream s(my_acceptor.accept());

Second, there was concern about the use of resource-owning iterators associated
with the `ip::basic_resolver` template, and the related single iterator
overloads of the free functions `connect` and `async_connect`. The resolver has
been changed so that its `resolve` operations now return a results class based
on the regular expression library's `match_results` template. This
`ip::basic_resolver_results` type satisfies the requirements of a sequence
container, except that only the operations defined for const-qualified sequence
containers are supported:

  for (auto& result : my_resolver.resolve("www.boost.org", "http"))
  {
    std::cout << result->endpoint() << ", ";
    std::cout << result->host_name() << ", ";
    std::cout << result->service_name() << std::endl;
  }

In addition, the single iterator overloads of the free functions `connect` and
`async_connect` have been removed and replaced with overloads that accept an
`EndpointSequence`. This ensures that the following simple usage idiom is still
supported:

  connect(my_socket, my_resolver.resolve("www.boost.org", "http"));

[endsect]

[/-----------------------------------------------------------------------------]

[section Reference implementation]

An almost complete implementation of the proposal text may be found in a
variant of Asio that stands alone from Boost. This variant is available at
['[@https://github.com/chriskohlhoff/asio/tree/master]].

[endsect]

[/-----------------------------------------------------------------------------]

[section Library examples]

Unfamiliar readers are encouraged to look to the
[@http://www.boost.org/libs/asio Boost.Asio] documentation and examples for a
more complete picture of the use of the library.

However, to give some idea of the flavour of the proposed library, consider the
following sample code. This is part of a server program that echoes the
characters it receives back to the client in upper case.

  template <typename Iterator>
  void uppercase(Iterator begin, Iterator end)
  {
    std::locale loc("");
    for (Iterator iter = begin; iter != end; ++iter)
      *iter = std::toupper(*iter, loc);
  }

  void sync_connection(tcp::socket& socket)
  {
    try
    {
      std::vector<char> buffer_space(1024);
      for (;;)
      {
        std::size_t length = socket.read_some(buffer(buffer_space));
        uppercase(buffer_space.begin(), buffer_space.begin() + length);
        write(socket, buffer(buffer_space, length));
      }
    }
    catch (std::system_error& e)
    {
      // ...
    }
  }

The synchronous operations used above are functions that do not return control
to the caller until the corresponding operating system operation completes. In
Asio-based programs their use cases typically fall into two categories:

* Simple programs that do not care about timeouts, or are happy to rely on the
  timeout behaviour provided by the underlying operating system.
* Programs that require fine grained control over system calls, and are aware
  of the conditions under which synchronous operations will or will not block.

Next, the equivalent code developed using asynchronous operations might look
something like this:

  class async_connection
    : public std::enable_shared_from_this<async_connection>
  {
  public:
    async_connection(tcp::socket socket)
      : socket_(std::move(socket))
    {
    }

    void start()
    {
      do_read();
    }

  private:
    void do_read()
    {
      auto self(shared_from_this());
      socket_.async_read_some(buffer(buffer_space_),
          [this, self](std::error_code ec, std::size_t length)
          {
            if (!ec)
            {
              uppercase(buffer_space_.begin(), buffer_space_.begin() + length);
              do_write(length);
            }
          });
    }

    void do_write(std::size_t length)
    {
      auto self(shared_from_this());
      async_write(socket_, buffer(buffer_space_, length),
          [this, self](std::error_code ec, std::size_t /*length*/)
          {
            if (!ec)
            {
              do_read();
            }
          });
    }

    tcp::socket socket_;
    std::vector<char> buffer_space_{1024};
  };

Asynchronous operations do not block the caller, but instead involve the
delivery of a notification to the program when the corresponding operating
system operation completes. Most non-trivial Asio-based programs will make use
of asynchronous operations.

While the code may appear more complex due to the inverted flow of control, it
allows a knowledgeable programmer to write code that will scale to a great many
concurrent connections. However, this proposal uses the asynchronous model
described in [N4045]. This is an extensible model that allows the asynchronous
operations to support a variety of composition and notification mechanisms, and
these mechanisms may alleviate this complexity. This includes futures:

  std::future<std::size_t> fut =
    socket.async_read_some(buffer(buffer_space), use_future);

  // ...

  std::size_t length = fut.get();

and, through library extensions, coroutines:

  void coro_connection(tcp::socket& socket, yield_context yield)
  {
    try
    {
      std::vector<char> buffer_space(1024);
      for (;;)
      {
        std::size_t length = socket.async_read_some(buffer(buffer_space), yield);
        uppercase(buffer_space.begin(), buffer_space.begin() + length);
        async_write(socket, buffer(buffer_space, length), yield);
      }
    }
    catch (std::system_error& e)
    {
      // ...
    }
  }

Finally, for many applications, networking is not a core feature, nor is it
seen as a core competency of the application’s programmers. To cater to these
use cases, the proposal provides a high-level interface to TCP sockets that is
designed around the familiar C++ I/O streams framework.

Using the library in this way is as easy as opening a stream object with
the remote host’s details:

  tcp::iostream s("www.boost.org", "http");

Once connected, you send and receive any data as needed. In this case you send
a request:

  s << "GET / HTTP/1.0\r\n";
  s << "Host: www.boost.org\r\n";
  s << "Accept: */*\r\n";
  s << "Connection: close\r\n\r\n";

Then receive and process the response:

  std::string header;
  while (std::getline(s, header) && header != "\r")
    std::cout << header << "\n";
  std::cout << s.rdbuf();

You can set a timeout to detect unresponsive connections:

  s.expires_after(std::chrono::seconds(60));

And, if at any time there is an error, the `tcp::iostream` class’s `error()` member
function may be used to obtain an `error_code` that identifies the reason for
failure:

  if (!s)
  {
    std::cout << "Unable to connect: " << s.error().message() << "\n";
    return 1;
  }

[endsect]

[/-----------------------------------------------------------------------------]

[section Scope]

Problem areas addressed by this proposal include:

* Networking using TCP and UDP, including support for multicast.
* Client and server applications.
* Scalability to handle many concurrent connections.
* Protocol independence between IPv4 and IPv6.
* Name resolution (i.e. DNS).
* Timers.

Features that are considered outside the scope of this proposal include:

* Protocol implementations such as HTTP, SMTP or FTP.
* Encryption (e.g. SSL, TLS).
* Operating system specific demultiplexing APIs.
* Support for realtime environments.
* QoS-enabled sockets.
* Other TCP/IP protocols such as ICMP.
* Functions and classes for enumerating network interfaces.
* Other forms of asynchronous I/O, such as files. (However, the asynchronous
  model defined below is capable of supporting these facilities.)

[endsect]

[/-----------------------------------------------------------------------------]

[section Target audience]

The bulk of the library interface is intended for use by developers with at
least some understanding of networking concepts (or a willingness to learn). A
high level iostreams interface supports simple use cases and permits novices to
develop network code without needing to get into too much depth.

[endsect]

[/-----------------------------------------------------------------------------]

[section Related work]

The interface is based on the BSD sockets API, which is widely implemented and
supported by extensive literature. It is also used as the basis of networking
APIs in other languages (e.g. Java). Unsafe practices of the BSD sockets API,
e.g. lack of compile-time type safety, are not included.

Asynchronous support is derived from the Proactor design pattern as implemented
by the ADAPTIVE Communication Environment [ACE], and is influenced by the
design of the Symbian C++ sockets API [SYMBIAN], which supports synchronous and
asynchronous operations side-by-side. The Microsoft .NET socket classes [MSNET]
and the Extended Sockets API [ESAPI] developed by The Open Group support
similar styles of network programming.

[endsect]

[/-----------------------------------------------------------------------------]

[section Impact on the standard]

This is a pure library proposal. It does not add any new language features, nor
does it alter any existing standard library headers. It makes additions to
experimental headers that may also be modified by other Technical
Specifications.

This library can be implemented using compilers that conform to the C++14
standard. An implementation of this library requires operating system-specific
functions that lie outside the C++14 standard.

[endsect]

[/-----------------------------------------------------------------------------]

[section Relationship to other proposals]

The asynchronous operations defined in this proposal use the asynchronous model
described in [N4045]. With the extensible asynchronous model presented in that
paper, the user has the ability to select an asynchronous approach that is
appropriate to each use case. With these library foundations, a single
extensible asynchronous model can support a variety of composition methods,
including:

* Callbacks, where minimal runtime penalty is desirable.
* Futures, and not just std::future but also future classes supplied by other
  libraries.
* Coroutines or resumable functions, without adding new keywords to the language.

To facilitate the coordination of asynchronous operations in multithreaded
programs, the asynchronous model also utilises the executors design described
in [N4242].

As executors and the extensible asynchronous model are a prerequisite for the
networking library, the proposed text below incorporates a complete
specification of these facilities.

[endsect]

[/-----------------------------------------------------------------------------]

[section Proposed text]

[commentary Grey-shaded italic text is commentary on the proposal. It is not to
be added to the TS.]

[include:scope scope.qbk]
[include:conformance conformance.qbk]
[include:references references.qbk]
[include:namespaces namespaces.qbk]
[include:definitions definitions.qbk]
[include:plans plans.qbk]
[include:feature_test feature_test.qbk]
[include:description description.qbk]
[include:error_reporting error_reporting.qbk]

[section Library summary]
[xrefid summary]

[table Networking library summary
  [[Clause][Header(s)]]
  [
    [[link network.convenience Convenience header]]
    [`<experimental/net>`]
  ]
  [
    [[link network.forward Forward declarations]]
    [`<experimental/netfwd>`]
  ]
  [
    [[link network.async Asynchronous model]]
    [`<experimental/executor>`]
  ]
  [
    [[link network.basic_io_services Basic I/O services]]
    [`<experimental/io_context>`]
  ]
  [
    [[link network.timers Timers]]
    [`<experimental/timer>`]
  ]
  [
    [[link network.buffers Buffers]]
    [`<experimental/buffer>`]
  ]
  [
    [
      [link network.sockets Sockets]\n
      [link network.socket_streams Socket iostreams]\n
    ]
    [`<experimental/socket>`]
  ]
  [
    [
      [link network.internet_protocol Internet protocol]\n
    ]
    [`<experimental/internet>`]
  ]
]

Throughout this Technical Specification, the names of the template parameters
are used to express type requirements, as listed in the table below.

[table Template parameters and type requirements
  [[template parameter name][type requirements]]
  [
    [`AcceptableProtocol`]
    [[link requirements.acceptable_protocol acceptable protocol]]
  ]
  [
    [`Allocator`]
    [C++Std, \[allocator.requirements\]]
  ]
  [
    [`AsyncReadStream`]
    [[link requirements.async_read_stream buffer-oriented asynchronous read stream]]
  ]
  [
    [`AsyncWriteStream`]
    [[link requirements.async_write_stream buffer-oriented asynchronous write stream]]
  ]
  [
    [`Clock`]
    [C++Std, \[time.clock.req\]]
  ]
  [
    [`CompletionToken`]
    [[link requirements.completion_token completion token]]
  ]
  [
    [`ConnectCondition`]
    [[link requirements.connect_condition connect condition]]
  ]
  [
    [`ConstBufferSequence`]
    [[link requirements.const_buffers constant buffer sequence]]
  ]
  [
    [`DynamicBuffer`]
    [[link requirements.dynamic_buffers dynamic buffer]]
  ]
  [
    [`ExecutionContext`]
    [[link requirements.execution_context execution context]]
  ]
  [
    [`Executor`]
    [[link requirements.executor executor]]
  ]
  [
    [`GettableSocketOption`]
    [[link requirements.gettable_socket_option gettable socket option]]
  ]
  [
    [`InternetProtocol`]
    [[link requirements.internet_protocol Internet protocol]]
  ]
  [
    [`IoControlCommand`]
    [[link requirements.io_control_command I/O control command]]
  ]
  [
    [`MutableBufferSequence`]
    [[link requirements.mutable_buffers mutable buffer sequence]]
  ]
  [
    [`ProtoAllocator`]
    [[link requirements.proto_allocator proto-allocator]]
  ]
  [
    [`Protocol`]
    [[link requirements.protocol protocol]]
  ]
  [
    [`Service`]
    [[link requirements.service service]]
  ]
  [
    [`SettableSocketOption`]
    [[link requirements.settable_socket_option settable socket option]]
  ]
  [
    [`Signature`]
    [[link requirements.signature signature]]
  ]
  [
    [`SyncReadStream`]
    [[link requirements.sync_read_stream buffer-oriented synchronous read stream]]
  ]
  [
    [`SyncWriteStream`]
    [[link requirements.sync_write_stream buffer-oriented synchronous write stream]]
  ]
  [
    [`WaitTraits`]
    [[link requirements.wait_traits wait traits]]
  ]
]

[endsect]

[section:convenience Convenience header]
[xrefid convenience.hdr]
[include:headers headers/networking/net.qbk]
[endsect]

[section:forward Forward declarations]
[xrefid fwd.decl]
[include:headers headers/networking/netfwd.qbk]
[endsect]

[section:async Asynchronous model]
[xrefid async]
[include:headers headers/networking/executor.qbk]
[section:async_requirements Requirements]
[xrefid async.reqmts]
[include:requirements requirements/proto_allocator.qbk]
[include:requirements requirements/asynchronous_operations.qbk]
[include:requirements requirements/executor.qbk]
[include:requirements requirements/execution_context.qbk]
[include:requirements requirements/service.qbk]
[include:requirements requirements/signature.qbk]
[endsect]
[include:classes classes/async_result.qbk]
[include:classes classes/async_completion.qbk]
[include:classes classes/associated_allocator.qbk]
[include:functions functions/get_associated_allocator.qbk]
[include:classes classes/execution_context.qbk]
[include:classes classes/execution_context__service.qbk]
[include:classes classes/is_executor.qbk]
[include:classes classes/executor_arg_t.qbk]
[include:classes classes/uses_executor.qbk]
[include:classes classes/associated_executor.qbk]
[include:functions functions/get_associated_executor.qbk]
[include:classes classes/executor_binder.qbk]
[include:functions functions/bind_executor.qbk]
[include:classes classes/executor_work_guard.qbk]
[include:functions functions/make_work_guard.qbk]
[include:classes classes/system_executor.qbk]
[include:classes classes/bad_executor.qbk]
[include:classes classes/executor.qbk]
[include:functions functions/dispatch.qbk]
[include:functions functions/post.qbk]
[include:functions functions/defer.qbk]
[include:classes classes/strand.qbk]
[include:classes classes/use_future_t.qbk]
[include:classes classes/async_result_packaged_task.qbk]
[endsect]

[section:basic_io_services Basic I/O services]
[xrefid io_context]
[include:headers headers/networking/io_context.qbk]
[include:classes classes/io_context.qbk]
[include:classes classes/io_context__executor_type.qbk]
[endsect]

[section:timers Timers]
[xrefid timer]
This clause defines components for performing timer operations.
[std_example Performing a synchronous wait operation on a timer:
``
  io_context c;
  steady_timer t(c);
  t.expires_after(seconds(5));
  t.wait();
``]
[std_example Performing an asynchronous wait operation on a timer:
``
  void handler(error_code ec) { __dotdotdot__ }
  __dotdotdot__
  io_context c;
  steady_timer t(c);
  t.expires_after(seconds(5));
  t.async_wait(handler);
  i.run();
``]
[include:headers headers/networking/timer.qbk]
[section:timers_requirements Requirements]
[xrefid timer.reqmts]
[include:requirements requirements/wait_traits.qbk]
[endsect]
[include:classes classes/wait_traits.qbk]
[include:classes classes/basic_waitable_timer.qbk]
[endsect]

[section:buffers Buffers]
[xrefid buffer]
[include:headers headers/networking/buffer.qbk]
[section:buffers_requirements Requirements]
[xrefid buffer.reqmts]
[include:requirements requirements/mutable_buffers.qbk]
[include:requirements requirements/const_buffers.qbk]
[include:requirements requirements/dynamic_buffers.qbk]
[include:requirements requirements/synchronous_read_operations.qbk]
[include:requirements requirements/asynchronous_read_operations.qbk]
[include:requirements requirements/synchronous_write_operations.qbk]
[include:requirements requirements/asynchronous_write_operations.qbk]
[include:requirements requirements/sync_read_stream.qbk]
[include:requirements requirements/async_read_stream.qbk]
[include:requirements requirements/sync_write_stream.qbk]
[include:requirements requirements/async_write_stream.qbk]
[endsect]
[include:classes classes/mutable_buffer.qbk]
[include:classes classes/const_buffer.qbk]
[include:classes classes/buffer_type_traits.qbk]
[include:functions functions/buffer_sequence_access.qbk]
[include:functions functions/buffer_size.qbk]
[include:functions functions/buffer_copy.qbk]
[include:functions functions/buffer_arithmetic.qbk]
[include:functions functions/buffer.qbk]
[include:classes classes/dynamic_vector_buffer.qbk]
[include:classes classes/dynamic_string_buffer.qbk]
[include:functions functions/dynamic_buffer.qbk]
[include:classes classes/transfer_all.qbk]
[include:classes classes/transfer_at_least.qbk]
[include:classes classes/transfer_exactly.qbk]
[include:functions functions/read.qbk]
[include:functions functions/async_read.qbk]
[include:functions functions/write.qbk]
[include:functions functions/async_write.qbk]
[include:functions functions/read_until.qbk]
[include:functions functions/async_read_until.qbk]
[endsect]

[section:sockets Sockets]
[xrefid socket]
[include:headers headers/networking/socket.qbk]
[section:sockets_requirements Requirements]
[xrefid socket.reqmts]
[include:requirements requirements/native_handles.qbk]
[include:requirements requirements/endpoint.qbk]
[include:requirements requirements/protocol.qbk]
[include:requirements requirements/acceptable_protocol.qbk]
[include:requirements requirements/gettable_socket_option.qbk]
[include:requirements requirements/settable_socket_option.qbk]
[include:requirements requirements/io_control_command.qbk]
[include:requirements requirements/connect_condition.qbk]
[endsect]
[include:classes classes/socket_errc.qbk]
[include:classes classes/socket_base.qbk]
[include:classes classes/socket_base__bool_socket_options.qbk]
[include:classes classes/socket_base__int_socket_options.qbk]
[include:classes classes/socket_base__linger.qbk]
[include:classes classes/basic_socket.qbk]
[include:classes classes/basic_datagram_socket.qbk]
[include:classes classes/basic_stream_socket.qbk]
[include:classes classes/basic_socket_acceptor.qbk]
[endsect]

[section:socket_streams Socket iostreams]
[xrefid socket.iostreams]
[include:classes classes/basic_socket_streambuf.qbk]
[include:classes classes/basic_socket_iostream.qbk]
[endsect]

[section:socket_algorithms Socket algorithms]
[xrefid socket.algo]
[include:functions functions/connect.qbk]
[include:functions functions/async_connect.qbk]
[endsect]

[section:internet_protocol Internet protocol]
[xrefid internet]
[include:headers headers/networking/internet.qbk]
[section:internet_protocol_requirements Requirements]
[xrefid internet.reqmts]
[include:requirements requirements/internet_protocol.qbk]
[endsect]
[include:classes classes/ip__resolver_errc.qbk]
[include:classes classes/ip__address.qbk]
[include:classes classes/ip__address_v4.qbk]
[include:classes classes/ip__address_v6.qbk]
[include:classes classes/ip__bad_address_cast.qbk]
[include:classes classes/hash_ip.qbk]
[include:classes classes/ip__basic_address_iterator.qbk]
[include:classes classes/ip__basic_address_range.qbk]
[include:classes classes/ip__network_v4.qbk]
[include:classes classes/ip__network_v6.qbk]
[include:classes classes/ip__basic_endpoint.qbk]
[include:classes classes/ip__basic_resolver_entry.qbk]
[include:classes classes/ip__basic_resolver_results.qbk]
[include:classes classes/ip__resolver_base.qbk]
[include:classes classes/ip__basic_resolver.qbk]
[include:functions functions/ip__host_name.qbk]
[include:classes classes/ip__tcp.qbk]
[include:classes classes/ip__tcp__no_delay.qbk]
[include:classes classes/ip__udp.qbk]
[include:classes classes/ip__v6_only.qbk]
[include:classes classes/ip__unicast__hops.qbk]
[include:classes classes/ip__multicast__group_socket_options.qbk]
[include:classes classes/ip__multicast__outbound_interface.qbk]
[include:classes classes/ip__multicast__hops.qbk]
[include:classes classes/ip__multicast__enable_loopback.qbk]
[endsect]

[section Index]
'''<index><title>Cross references</title></index>'''
[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Acknowledgements]

In the eleven years since Asio's inception, hundreds of people have contributed
to its development through design review, patches, feature suggestions, bug
reports, and usage feedback from the field. With respect to the 2014 refresh of
the Networking Library Proposal, the author would particularly like to thank
Jamie Allsop for providing feedback during the drafting process, and Oliver
Kowalke for contributing towards the design and implementation of the CIDR
support.

Thanks go to Marshall Clow, Jens Maurer, Arash Partow, Jamie Allsop, Dietmar
Kühl, Detlef Vollmann, Jonathan Wakely, Mikael Kilpeläinen, Jens Weller,
Michael Wong, Eric Fisselier, and Jeffrey Yasskin for participating in the
Cologne wording review, and also to Roger Orr for some pre-Cologne review
feedback.

[endsect]

[/-----------------------------------------------------------------------------]

[section References]

[#ref-POSIX] \[POSIX\] ['ISO/IEC 9945:2003], ['IEEE Std 1003.1-2001], and ['The
Open Group Base Specifications, Issue 6]. Also known as ['The Single Unix
Specification, Version 3].

[#ref-N4045] \[N4045\] Kohlhoff, Christopher,
['Library Foundations for Asynchronous Operations, Revision 2], 2014.

[#ref-N4242] \[N4242\] Kohlhoff, Christopher,
['Executors and Asynchronous Operations, Revision 1], 2014.

[#ref-N4099] \[N4099\]
['Draft Filesystem Technical Specification], 2014.

[#ref-ACE] \[ACE\] Schmidt, Douglas C.,
['ADAPTIVE Communication Environment],
[@http://www.cs.wustl.edu/~schmidt/ACE.html].

[#ref-SYMBIAN] \[SYMBIAN\] Symbian Ltd,
['Sockets Client],
[@http://www.symbian.com/developer/techlib/v70sdocs/doc_source/reference/cpp/SocketsClient/index.html].

[#ref-MS-NET] \[MS-NET\] Microsoft Corporation,
['.NET Framework Class Library, Socket Class],
[@http://msdn2.microsoft.com/en-us/library/system.net.sockets.socket.aspx].

[#ref-ES-API] \[ES-API\] The Interconnect Software Consortium / The Open Group,
['Extended Sockets API (ES-API), Issue 1.0], 2005,
[@http://opengroup.org/icsc/uploads/40/6415/ES_API_1_0.pdf].

[#ref-UNPV1] \[UNPV1\] Stevens, W. Richard,
['UNIX Network Programming, Volume 1, 2nd Edition], Prentice Hall, 1998.

[#ref-POSA2] \[POSA2\] Schmidt, Douglas C. et al,
['Pattern Oriented Software Architecture, Volume 2], Wiley, 2000.

[#ref-RFC821] \[RFC821\] Postel, J.,
['RFC 821: Simple Mail Transfer Protocol], 1982,
[@http://www.ietf.org/rfc/rfc0821.txt].

[#ref-RFC959] \[RFC959\] Postel, J. and Reynolds, J.,
['RFC 959: File Transfer Protocol (FTP)], 1985,
[@http://www.ietf.org/rfc/rfc0959.txt].

[#ref-RFC2616] \[RFC2616\] Fielding, R. et al,
['RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1], 1999,
[@http://www.ietf.org/rfc/rfc2616.txt].

[#ref-RFC2732] \[RFC2732\] Hinden, R., Carpenter, B. and Masinter, L.,
['RFC 2732: Format for Literal IPv6 Addresses in URL's], 1999,
[@http://www.ietf.org/rfc/rfc2732.txt].

[#ref-RFC3513] \[RFC3513\] Hinden, R. and Deering, S.,
['RFC 3513: Internet Protocol Version 6 (IPv6) Addressing Architecture], 2003,
[@http://www.ietf.org/rfc/rfc3513.txt].

[endsect]
