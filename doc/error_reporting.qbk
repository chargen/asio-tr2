[section Error reporting]
[xrefid err.report]

[section Synchronous operations]
[xrefid err.report.sync]

Most synchronous network library functions provide two overloads, one that
throws an exception to report system errors, and another that sets an
`error_code` (C++ Std, [syserr]).

[commentary Check whether it is "most" overloads, "some" or "all".]

[std_note This supports two common use cases:[br][br]

[mdash] Uses where system errors are truly exceptional and indicate a serious
failure. Throwing an exception is the most appropriate response.[br][br]

[mdash] Uses where system errors are routine and do not necessarily represent
failure. Returning an error code is the most appropriate response. This allows
application specific error handling, including simply ignoring the
error.[br][br]]

Functions [*not] having an argument of type `error_code&` report errors as
follows, unless otherwise specified:

[mdash] When a call by the implementation to an operating system or other
underlying API results in an error that prevents the function from meeting its
specifications, the function exits via an exception of a type that would match
a handler of type `system_error`.

[mdash] Failure to allocate storage is reported by throwing an exception as
described in the C++ standard (C++14 \[res.on.exception.handling\]).

[mdash] Destructors throw nothing.

Functions having an argument of type `error_code&` report errors as follows,
unless otherwise specified:

[mdash] If a call by the implementation to an operating system or other
underlying API results in an error that prevents the function from meeting its
specifications, the `error_code&` argument is set as appropriate for the
specific error. Otherwise, `clear()` is called on the `error_code&` argument.

Where a function is specified as two overloads, with and without an argument
of type `error_code&`:

  ``[*['R f]]``(``['[*A1]]`` a1, ``['[*A2]]`` a2, ..., ``['[*AN]]`` aN);
  ``[*['R f]]``(``['[*A1]]`` a1, ``['[*A2]]`` a2, ..., ``['[*AN]]`` aN, error_code& ec);

then, when [*['R]] is non-`void`, the effects of the first overload are as
if:

  error_code ec;
  ``['[*R]]`` r(``['[*f]]``(a1, a2, ..., aN, ec));
  if (ec) throw system_error(ec, __func__);
  return r;

otherwise, when [*['R]] is `void`, the effects of the first overload are
as if:

  error_code ec;
  ``['[*f]]``(a1, a2, ..., aN, ec);
  if (ec) throw system_error(ec, __func__);

except that the type thrown may differ as specified above.

[endsect]

[section Asynchronous operations]
[xrefid err.report.async]

Asynchronous network library functions are identified by having the prefix
`async_` and take a completion handler [xref async.reqmts.async.token]. These
asynchronous operations report errors as follows:

[mdash] If a call by the implementation to an operating system or other
underlying API results in an error that prevents the asynchronous operation
from meeting its specifications, the completion handler is invoked with an
`error_code` value `ec` that is set as appropriate for the specific error.
Otherwise, the `error_code` value `ec` is set such that `!ec` is true.

[mdash] Asynchronous operations shall not fail with an error condition that
indicates interruption by a signal [inline_note Such as __POSIX__ `EINTR`].
Asynchronous operations shall not fail with any error condition associated with
non-blocking operations [inline_note Such as __POSIX__ `EWOULDBLOCK`, `EAGAIN`
or `EINPROGRESS`; __Windows__ `WSAEWOULDBLOCK` or `WSAEINPROGRESS`].

[endsect]

[section Error conditions]
[xrefid err.report.conditions]

Unless otherwise specified, when the behavior of a synchronous or asynchronous
operation is defined "as if" implemented by a __POSIX__ function, the
`error_code` produced by the function shall meet the following requirements:

[mdash] If the failure condition is one that is listed by __POSIX__ for that
function, the `error_code` shall compare equal to the error's corresponding
`enum class errc` (C++14 \[syserr\]) or [link classes.ip__resolver_errc `enum
class resolver_errc`] constant.

[mdash] Otherwise, the `error_code` shall be set to an implementation-defined
value that reflects the underlying operating system error.

[std_example The __POSIX__ specification for __shutdown__ lists `EBADF` as one
of its possible errors. If a function that is specified "as if" implemented by
__shutdown__ fails with `EBADF` then the following condition holds for the
`error_code` value `ec`:..`ec == errc::bad_file_descriptor`]

When the description of a function contains the element ['Error conditions],
this lists conditions where the operation may fail. The conditions are listed,
together with a suitable explanation, as `enum class` constants. Unless
otherwise specified, this list is a subset of the failure conditions associated
with the function.

[endsect]

[endsect]
