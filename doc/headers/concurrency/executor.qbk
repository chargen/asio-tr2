[section:executor Header [^<experimental/executor>] synopsis]
[xrefid async.synop]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    template<class CompletionToken, class Signature, class = void>
      class ``[link classes.async_result async_result]``;

    template<class CompletionToken, class Signature>
      struct ``[link classes.async_completion async_completion]``;

    template<class T, class ProtoAllocator = allocator<void>>
      struct ``[link classes.associated_allocator associated_allocator]``;

    template<class T, class ProtoAllocator = allocator<void>>
      using associated_allocator_t = typename associated_allocator<T, ProtoAllocator>::type;

    ``// [link functions.get_associated_allocator get_associated_allocator]:``

    template<class T>
      associated_allocator_t<decay_t<T>>
        get_associated_allocator(T&& t) noexcept;
    template<class T, class ProtoAllocator>
      associated_allocator_t<decay_t<T>, ProtoAllocator>
        get_associated_allocator(T&& t, const ProtoAllocator& a) noexcept;

    enum class fork_event {
      prepare,
      parent,
      child
    };

    class ``[link classes.execution_context execution_context]``;

    class service_already_exists;

    template<class Service> Service& use_service(execution_context& ctx);
    template<class Service, class... Args> Service&
      make_service(execution_context& ctx, Args&&... args);
    template<class Service> bool has_service(execution_context& ctx) noexcept;

    template<class T> struct ``[link classes.is_executor is_executor]``;

    struct ``[link classes.executor_arg_t executor_arg_t]`` { };
    constexpr executor_arg_t executor_arg = executor_arg_t();

    template<class T, class Executor> struct ``[link classes.uses_executor uses_executor]``;

    template<class T, class Executor = system_executor>
      struct ``[link classes.associated_executor associated_executor]``;

    template<class T, class Executor = system_executor>
      using associated_executor_t = typename associated_executor<T, Executor>::type;

    ``// [link functions.get_associated_executor get_associated_executor]:``

    template<class T>
      associated_executor_t<decay_t<T>>
        get_associated_executor(T&& t) noexcept;
    template<class T, class Executor>
      associated_executor_t<decay_t<T>, Executor>
        get_associated_executor(T&& t, const Executor& ex) noexcept;
    template<class T, class ExecutionContext>
      associated_executor_t<T, typename ExecutionContext::executor_type>
        get_associated_executor(const T& t, ExecutionContext& ctx) noexcept;

    template<class T, class Executor>
      class ``[link classes.executor_binder executor_binder]``;

    template<class T, class Executor, class Signature>
      class async_result<executor_binder<T, Executor>, Signature>;

    template<class T, class Executor, class ProtoAllocator>
      struct associated_allocator<executor_binder<T, Executor>, ProtoAllocator>;

    template<class T, class Executor, class Executor1>
      struct associated_executor<executor_binder<T, Executor>, Executor1>;

    ``// [link functions.bind_executor bind_executor]:``

    template<class Executor, class T>
      executor_binder<decay_t<T>, Executor>
        bind_executor(const Executor& ex, T&& t);
    template<class ExecutionContext, class T>
      executor_binder<decay_t<T>, typename ExecutionContext::executor_type>
        bind_executor(ExecutionContext& ctx, T&& t);

    template<class Executor>
      class ``[link classes.executor_work_guard executor_work_guard]``;

    ``// [link functions.make_work_guard make_work_guard]:``

    template<class Executor>
      executor_work_guard<Executor>
        make_work_guard(const Executor& ex);
    template<class T>
      executor_work_guard<associated_executor_t<decay_t<T>>>
        make_work_guard(T&& t);
    template<class T, class U>
      auto make_work_guard(T&& t, U&& u)
        -> decltype(make_work_guard(get_associated_executor(forward<T>(t), forward<U>(u))));

    class ``[link classes.system_executor system_executor]``;
    class ``[link classes.system_context system_context]``;

    bool operator==(const system_executor&, const system_executor&);
    bool operator!=(const system_executor&, const system_executor&);

    class ``[link classes.bad_executor bad_executor]``;

    class ``[link classes.executor executor]``;

    bool operator==(const executor& a, const executor& b) noexcept;
    bool operator==(const executor& e, nullptr_t) noexcept;
    bool operator==(nullptr_t, const executor& e) noexcept;
    bool operator!=(const executor& a, const executor& b) noexcept;
    bool operator!=(const executor& e, nullptr_t) noexcept;
    bool operator!=(nullptr_t, const executor& e) noexcept;

    ``// [link functions.dispatch dispatch]:``

    template<class CompletionToken>
      __ifr__ dispatch(CompletionToken&& token);
    template<class Executor, class CompletionToken>
      __ifr__ dispatch(const Executor& ex, CompletionToken&& token);
    template<class ExecutionContext, class CompletionToken>
      __ifr__ dispatch(ExecutionContext& ctx, CompletionToken&& token);

    ``// [link functions.post post]:``

    template<class CompletionToken>
      __ifr__ post(CompletionToken&& token);
    template<class Executor, class CompletionToken>
      __ifr__ post(const Executor& ex, CompletionToken&& token);
    template<class ExecutionContext, class CompletionToken>
      __ifr__ post(ExecutionContext& ctx, CompletionToken&& token);

    ``// [link functions.defer defer]:``

    template<class CompletionToken>
      __ifr__ defer(CompletionToken&& token);
    template<class Executor, class CompletionToken>
      __ifr__ defer(const Executor& ex, CompletionToken&& token);
    template<class ExecutionContext, class CompletionToken>
      __ifr__ defer(ExecutionContext& ctx, CompletionToken&& token);

    template<class Executor>
      class ``[link classes.strand strand]``;

    template<class Executor>
      bool operator==(const strand<Executor>& a, const strand<Executor>& b);
    template<class Executor>
      bool operator!=(const strand<Executor>& a, const strand<Executor>& b);

    template<class ProtoAllocator = allocator<void>>
      class ``[link classes.use_future_t use_future_t]``;

    constexpr use_future_t<> use_future = use_future_t<>();

    template<class ProtoAllocator, class Result, class... Args>
      class async_result<use_future_t<ProtoAllocator>, Result(Args...)>;

    template<class R, class... Args, class Signature>
      class ``[link classes.async_result_packaged_task async_result<packaged_task<Result(Args...)>, Signature>]``;

  __end_versioned_ns__
  } // namespace experimental

    template<class Allocator>
      struct uses_allocator<experimental::__versioned_ns__::executor, Allocator>
        : true_type {};

  } // namespace std

[endsect]
