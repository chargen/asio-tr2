[section Header [^<internet>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {
        namespace ip {

          enum class resolver_errc {
            host_not_found = ``['implementation defined]``, // ``['EAI_NONAME]``
            host_not_found_try_again = ``['implementation defined]``, // ``['EAI_AGAIN]``
            service_not_found = ``['implementation defined]`` // ``['EAI_SERVICE]``
          };

          const error_category& resolver_category() noexcept;

          error_code make_error_code(resolver_errc e) noexcept;
          error_condition make_error_condition(resolver_errc e) noexcept;

          struct v4_mapped_t {};
          constexpr v4_mapped_t v4_mapped;

          class ``[link classes.ip__address address]``;
          class ``[link classes.ip__address_v4 address_v4]``;
          class ``[link classes.ip__address_v6 address_v6]``;

          class ``[link classes.ip__bad_address_cast bad_address_cast]``;

          // ``[link classes.ip__address__comparisons address comparisons]``:
          bool operator==(const address&, const address&) noexcept;
          bool operator!=(const address&, const address&) noexcept;
          bool operator< (const address&, const address&) noexcept;
          bool operator> (const address&, const address&) noexcept;
          bool operator<=(const address&, const address&) noexcept;
          bool operator>=(const address&, const address&) noexcept;

          // ``[link classes.ip__address_v4__comparisons address_v4 comparisons]``:
          bool operator==(const address_v4&, const address_v4&) noexcept;
          bool operator!=(const address_v4&, const address_v4&) noexcept;
          bool operator< (const address_v4&, const address_v4&) noexcept;
          bool operator> (const address_v4&, const address_v4&) noexcept;
          bool operator<=(const address_v4&, const address_v4&) noexcept;
          bool operator>=(const address_v4&, const address_v4&) noexcept;

          // ``[link classes.ip__address_v6__comparisons address_v6 comparisons]``:
          bool operator==(const address_v6&, const address_v6&) noexcept;
          bool operator!=(const address_v6&, const address_v6&) noexcept;
          bool operator< (const address_v6&, const address_v6&) noexcept;
          bool operator> (const address_v6&, const address_v6&) noexcept;
          bool operator<=(const address_v6&, const address_v6&) noexcept;
          bool operator>=(const address_v6&, const address_v6&) noexcept;

          // ``[link classes.ip__address__creation address creation]``:
          address make_address(const char*);
          address make_address(const char*, error_code&) noexcept;
          address make_address(const string&);
          address make_address(const string&, error_code&) noexcept;

          // ``[link classes.ip__address_v4__creation address_v4 creation]``:
          constexpr address_v4 make_address_v4(const address_v4::bytes_type&);
          constexpr address_v4 make_address_v4(unsigned long);
          constexpr address_v4 make_address_v4(v4_mapped_t, const address_v6&);
          address_v4 make_address_v4(const char*);
          address_v4 make_address_v4(const char*, error_code&) noexcept;
          address_v4 make_address_v4(const string&);
          address_v4 make_address_v4(const string&, error_code&) noexcept;

          // ``[link classes.ip__address_v6__creation address_v6 creation]``:
          constexpr address_v6 make_address_v6(const address_v6::bytes_type&, unsigned long = 0);
          constexpr address_v6 make_address_v6(v4_mapped_t, const address_v4&) noexcept;
          address_v6 make_address_v6(const char*);
          address_v6 make_address_v6(const char*, error_code&) noexcept;
          address_v6 make_address_v6(const string&);
          address_v6 make_address_v6(const string&, error_code&) noexcept;

          // ``[link classes.ip__address__io address I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address&);

          // ``[link classes.ip__address_v4__io address_v4 I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v4&);

          // ``[link classes.ip__address_v6__io address_v6 I/O]``:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v6&);

          // ``[link functions.ip__address_cast address conversions]``:
          template<class T> constexpr T address_cast(const address&) noexcept(``['see below]``);
          template<class T> constexpr T address_cast(const address_v4&) noexcept(``['see below]``);
          template<class T> constexpr T address_cast(const address_v6&) noexcept(``['see below]``);

          template<class InternetProtocol>
            class ``[link classes.ip__basic_endpoint basic_endpoint]``;

          // basic_endpoint comparisons:
          template<class InternetProtocol>
            bool operator==(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator!=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator< (const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator> (const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator<=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator>=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);

          // basic_endpoint I/O:
          template<class CharT, class Traits, class InternetProtocol>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&,
              const basic_endpoint<InternetProtocol>&);

          class ``[link classes.ip__resolver_query_base resolver_query_base]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_query basic_resolver_query]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_entry basic_resolver_entry]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_iterator basic_resolver_iterator]``;

          template<class InternetProtocol>
            class ``[link classes.ip__basic_resolver basic_resolver]``;

          string ``[link functions.ip__host_name host_name]``();
          string ``[link functions.ip__host_name host_name]``(error_code&);

          class ``[link classes.ip__tcp tcp]``;

          // tcp comparisons:
          bool operator==(const tcp& a, const tcp& b);
          bool operator!=(const tcp& a, const tcp& b);
          bool operator< (const tcp& a, const tcp& b);
          bool operator> (const tcp& a, const tcp& b);
          bool operator<=(const tcp& a, const tcp& b);
          bool operator>=(const tcp& a, const tcp& b);

          class ``[link classes.ip__udp udp]``;

          // udp comparisons:
          bool operator==(const udp& a, const udp& b);
          bool operator!=(const udp& a, const udp& b);
          bool operator< (const udp& a, const udp& b);
          bool operator> (const udp& a, const udp& b);
          bool operator<=(const udp& a, const udp& b);
          bool operator>=(const udp& a, const udp& b);

          class ``[link classes.ip__v6_only v6_only]``;

          namespace unicast {

            class ``[link classes.ip__unicast__hops hops]``;

          } // namespace unicast

          namespace multicast {

            class ``[link classes.ip__multicast__group_socket_options join_group]``;

            class ``[link classes.ip__multicast__group_socket_options leave_group]``;

            class ``[link classes.ip__multicast__outbound_interface outbound_interface]``;

            class ``[link classes.ip__multicast__hops hops]``;

            class ``[link classes.ip__multicast__enable_loopback enable_loopback]``;

          } // namespace multicast
        } // namespace ip
      } // inline namespace network_v1
    } // namespace experimental

    template<> struct is_error_condition_enum<
      experimental::network_v1::ip::resolver_errc>
        : public true_type {};

    // ``[link classes.hash hash support]``
    template<class T> struct hash;
    template<> struct hash<experimental::network_v1::ip::address>;
    template<> struct hash<experimental::network_v1::ip::address_v4>;
    template<> struct hash<experimental::network_v1::ip::address_v6>;

  } // namespace std

[endsect]
