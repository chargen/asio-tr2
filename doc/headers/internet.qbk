[section Header [^<internet>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {
        namespace ip {

          class ``[link classes.ip__address address]``;

          // address comparisons:
          bool operator==(const address&, const address&);
          bool operator!=(const address&, const address&);
          bool operator< (const address&, const address&);
          bool operator> (const address&, const address&);
          bool operator<=(const address&, const address&);
          bool operator>=(const address&, const address&);

          // address I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address&);

          class ``[link classes.ip__address_v4 address_v4]``;

          // address_v4 comparisons:
          bool operator==(const address_v4&, const address_v4&);
          bool operator!=(const address_v4&, const address_v4&);
          bool operator< (const address_v4&, const address_v4&);
          bool operator> (const address_v4&, const address_v4&);
          bool operator<=(const address_v4&, const address_v4&);
          bool operator>=(const address_v4&, const address_v4&);

          // address_v4 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v4&);

          class ``[link classes.ip__address_v6 address_v6]``;

          // address_v6 comparisons:
          bool operator==(const address_v6&, const address_v6&);
          bool operator!=(const address_v6&, const address_v6&);
          bool operator< (const address_v6&, const address_v6&);
          bool operator> (const address_v6&, const address_v6&);
          bool operator<=(const address_v6&, const address_v6&);
          bool operator>=(const address_v6&, const address_v6&);

          // address_v6 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v6&);

          template<class InternetProtocol>
            class ``[link classes.ip__basic_endpoint basic_endpoint]``;

          // basic_endpoint comparisons:
          template<class InternetProtocol>
            bool operator==(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator!=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator< (const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator> (const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator<=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);
          template<class InternetProtocol>
            bool operator>=(const basic_endpoint<InternetProtocol>&,
                            const basic_endpoint<InternetProtocol>&);

          // basic_endpoint I/O:
          template<class CharT, class Traits, class InternetProtocol>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&,
              const basic_endpoint<InternetProtocol>&);

          class ``[link classes.ip__resolver_query_base resolver_query_base]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_query basic_resolver_query]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_entry basic_resolver_entry]``;

          template<class InternetProtocol>
            ``[link classes.ip__basic_resolver_iterator basic_resolver_iterator]``;

          template<class InternetProtocol>
            class ``[link classes.ip__basic_resolver basic_resolver]``;

          string ``[link functions.ip__host_name host_name]``();
          string ``[link functions.ip__host_name host_name]``(error_code&);

          class ``[link classes.ip__tcp tcp]``;

          // tcp comparisons:
          bool operator==(const tcp& a, const tcp& b);
          bool operator!=(const tcp& a, const tcp& b);
          bool operator< (const tcp& a, const tcp& b);
          bool operator> (const tcp& a, const tcp& b);
          bool operator<=(const tcp& a, const tcp& b);
          bool operator>=(const tcp& a, const tcp& b);

          class ``[link classes.ip__udp udp]``;

          // udp comparisons:
          bool operator==(const udp& a, const udp& b);
          bool operator!=(const udp& a, const udp& b);
          bool operator< (const udp& a, const udp& b);
          bool operator> (const udp& a, const udp& b);
          bool operator<=(const udp& a, const udp& b);
          bool operator>=(const udp& a, const udp& b);

          class ``[link classes.ip__v6_only v6_only]``;

          namespace unicast {

            class ``[link classes.ip__unicast__hops hops]``;

          } // namespace unicast

          namespace multicast {

            class ``[link classes.ip__multicast__group_socket_options join_group]``;

            class ``[link classes.ip__multicast__group_socket_options leave_group]``;

            class ``[link classes.ip__multicast__outbound_interface outbound_interface]``;

            class ``[link classes.ip__multicast__hops hops]``;

            class ``[link classes.ip__multicast__enable_loopback enable_loopback]``;

          } // namespace multicast
        } // namespace ip
      } // inline namespace network_v1
    } // namespace experimental
  } // namespace std

[endsect]
