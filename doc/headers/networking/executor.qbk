[section Header [^<experimental/executor>] synopsis]

  namespace std {
    namespace experimental {
      __begin_versioned_ns__

        enum class fork_event {
          prepare,
          parent,
          child
        };

        class ``[link classes.execution_context execution_context]``;

        class service_already_exists;

        template<class Service> Service& use_service(execution_context& ctx);
        template<class Service, class... Args> Service&
          make_service(execution_context& ctx, Args&&... args);
        template<class Service> bool has_service(execution_context& ctx) noexcept;

        template<class T> struct ``[link classes.is_executor is_executor]`` : false_type {};

        struct ``[link classes.executor_arg_t executor_arg_t]`` { };
        constexpr executor_arg_t executor_arg = executor_arg_t();

        template<class T, class Executor> struct ``[link classes.uses_executor uses_executor]``;

        template<class T, class Executor = system_executor>
          struct ``[link classes.associated_executor associated_executor]``;

        template<class T, class Executor = system_executor>
          using associated_executor_t = typename associated_executor<T, Executor>::type;

        template<class T, class Executor> struct ``[link classes.executor_wrapper executor_wrapper]``;

        template<class T, class Executor, class Signature>
          struct handler_type<executor_wrapper<T, Executor>, Signature>;

        template<class T, class Executor>
          class async_result<executor_wrapper<T, Executor>>;

        template<class T, class Executor, class Allocator>
          struct associated_allocator<executor_wrapper<T, Executor>, Allocator>;

        template<class T, class Executor, class Executor1>
          struct associated_executor<executor_wrapper<T, Executor>, Executor1>;

        template<class T, class Executor> struct ``[link classes.executor_work executor_work]``;

        class ``[link classes.system_executor system_executor]``;

        bool operator==(const system_executor&, const system_executor&);
        bool operator!=(const system_executor&, const system_executor&);

        template<> struct is_executor<system_executor> : true_type {};

        ``// [link functions.wrap wrap]:``

        template<class Executor, class T>
          executor_wrapper<decay_t<T>, Executor> wrap(const Executor& ex, T&& t);
        template<class ExecutionContext, class CompletionToken>
          executor_wrapper<decay_t<T>, typename ExecutionContext::executor_type>
            wrap(ExecutionContext& ctx, T&& t);

        ``// [link functions.dispatch dispatch]:``

        template<class CompletionToken>
          auto dispatch(CompletionToken&& token);
        template<class Executor, class CompletionToken>
          auto dispatch(const Executor& ex, CompletionToken&& token);
        template<class ExecutionContext, class CompletionToken>
          auto dispatch(ExecutionContext& ctx, CompletionToken&& token);

        ``// [link functions.post post]:``

        template<class CompletionToken>
          auto post(CompletionToken&& token);
        template<class Executor, class CompletionToken>
          auto post(const Executor& ex, CompletionToken&& token);
        template<class ExecutionContext, class CompletionToken>
          auto post(ExecutionContext& ctx, CompletionToken&& token);

        ``// [link functions.defer defer]:``

        template<class CompletionToken>
          auto defer(CompletionToken&& token);
        template<class Executor, class CompletionToken>
          auto defer(const Executor& ex, CompletionToken&& token);
        template<class ExecutionContext, class CompletionToken>
          auto defer(ExecutionContext& ctx, CompletionToken&& token);

      __end_versioned_ns__
    } // namespace experimental
  } // namespace std

[endsect]
