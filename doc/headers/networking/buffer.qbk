[section Header [^<experimental/buffer>] synopsis]
[xrefid buffer.synop]

  namespace std {
  namespace experimental {
  __begin_versioned_ns__

    enum class stream_errc {
      eof = ``['implementation defined]``,
      not_found = ``['implementation defined]``
    };

    const error_category& stream_category() noexcept;

    error_code make_error_code(stream_errc e) noexcept;
    error_condition make_error_condition(stream_errc e) noexcept;

    class ``[link classes.mutable_buffer mutable_buffer]``;
    class ``[link classes.const_buffer const_buffer]``;

    ``// [link classes.buffer_type_traits buffer type traits]:``

    template<class T> is_mutable_buffer_sequence;
    template<class T> is_const_buffer_sequence;
    template<class T> is_dynamic_buffer;

    ``// [link functions.buffer_sequence_access buffer sequence access]:``

    const mutable_buffer* buffer_sequence_begin(const mutable_buffer& b);
    const const_buffer* buffer_sequence_begin(const const_buffer& b);
    const mutable_buffer* buffer_sequence_end(const mutable_buffer& b);
    const const_buffer* buffer_sequence_end(const const_buffer& b);
    template <class C> auto buffer_sequence_begin(C& c) -> decltype(c.begin());
    template <class C> auto buffer_sequence_begin(const C& c) -> decltype(c.begin());
    template <class C> auto buffer_sequence_end(C& c) -> decltype(c.end());
    template <class C> auto buffer_sequence_end(const C& c) -> decltype(c.end());

    ``// [link functions.buffer_size buffer size]:``

    template<class ConstBufferSequence>
      size_t buffer_size(const ConstBufferSequence& buffers) noexcept;

    ``// [link functions.buffer_copy buffer copy]:``

    template<class MutableBufferSequence, class ConstBufferSequence>
      size_t buffer_copy(const MutableBufferSequence& dest,
                         const ConstBufferSequence& source) noexcept;
    template<class MutableBufferSequence, class ConstBufferSequence>
      size_t buffer_copy(const MutableBufferSequence& dest,
                         const ConstBufferSequence& source,
                         max_size) noexcept;

    ``// [link functions.buffer_arithmetic buffer arithmetic]:``

    mutable_buffer operator+(const mutable_buffer& b, size_t n) noexcept;
    mutable_buffer operator+(size_t n, const mutable_buffer& b) noexcept;
    const_buffer operator+(const const_buffer&, size_t n) noexcept;
    const_buffer operator+(size_t, const const_buffer&) noexcept;

    ``// [link functions.buffer buffer creation]:``

    mutable_buffer buffer(void* p, size_t n) noexcept;
    const_buffer buffer(const void* p, size_t n) noexcept;

    mutable_buffer buffer(const mutable_buffer& b) noexcept;
    mutable_buffer buffer(const mutable_buffer& b, size_t n) noexcept;
    const_buffer buffer(const const_buffer& b) noexcept;
    const_buffer buffer(const const_buffer& b, size_t n) noexcept;

    template<class T, size_t N>
      mutable_buffer buffer(T (&data)[N]) noexcept;
    template<class T, size_t N>
      const_buffer buffer(const T (&data)[N]) noexcept;
    template<class T, size_t N>
      mutable_buffer buffer(array<T, N>& data) noexcept;
    template<class T, size_t N>
      const_buffer buffer(array<const T, N>& data) noexcept;
    template<class T, size_t N>
      const_buffer buffer(const array<T, N>& data) noexcept;
    template<class T, class Allocator>
      mutable_buffer buffer(vector<T, Allocator>& data) noexcept;
    template<class T, class Allocator>
      const_buffer buffer(const vector<T, Allocator>& data) noexcept;
    template<class CharT, class Traits, class Allocator>
      mutable_buffer buffer(basic_string<CharT, Traits, Allocator>& data) noexcept;
    template<class CharT, class Traits>
      const_buffer buffer(basic_string_view<CharT, Traits> data) noexcept;

    template<class T, size_t N>
      mutable_buffer buffer(T (&data)[N], size_t n) noexcept;
    template<class T, size_t N>
      const_buffer buffer(const T (&data)[N], size_t n) noexcept;
    template<class T, size_t N>
      mutable_buffer buffer(array<T, N>& data, size_t n) noexcept;
    template<class T, size_t N>
      const_buffer buffer(array<const T, N>& data, size_t n) noexcept;
    template<class T, size_t N>
      const_buffer buffer(const array<T, N>& data, size_t n) noexcept;
    template<class T, class Allocator>
      mutable_buffer buffer(vector<T, Allocator>& data, size_t n) noexcept;
    template<class T, class Allocator>
      const_buffer buffer(const vector<T, Allocator>& data, size_t n) noexcept;
    template<class CharT, class Traits, class Allocator>
      mutable_buffer buffer(basic_string<CharT, Traits, Allocator>& data,
                            size_t n) noexcept;
    template<class CharT, class Traits>
      const_buffer buffer(basic_string_view<CharT, Traits> data,
                          size_t n) noexcept;

    template<class T, class Allocator>
      class ``[link classes.dynamic_vector_buffer dynamic_vector_buffer]``;

    template<class CharT, class Traits, class Allocator>
      class ``[link classes.dynamic_string_buffer dynamic_string_buffer]``;

    ``// [link functions.dynamic_buffer dynamic buffer creation]:``

    template<class T, class Allocator>
      dynamic_vector_buffer<T, Allocator>
        dynamic_buffer(vector<T, Allocator>& vec) noexcept;
    template<class T, class Allocator>
      dynamic_vector_buffer<T, Allocator>
        dynamic_buffer(vector<T, Allocator>& vec, size_t n) noexcept;

    template<class CharT, class Traits, class Allocator>
      dynamic_string_buffer<CharT, Traits, Allocator>
        dynamic_buffer(basic_string<CharT, Traits, Allocator>& str) noexcept;
    template<class CharT, class Traits, class Allocator>
      dynamic_string_buffer<CharT, Traits, Allocator>
        dynamic_buffer(basic_string<CharT, Traits, Allocator>& str, size_t n) noexcept;

    class ``[link classes.transfer_all transfer_all]``;
    class ``[link classes.transfer_at_least transfer_at_least]``;
    class ``[link classes.transfer_exactly transfer_exactly]``;

    ``// [link functions.read synchronous read operations]:``

    template<class SyncReadStream, class MutableBufferSequence>
      size_t read(SyncReadStream& stream,
                  const MutableBufferSequence& buffers);
    template<class SyncReadStream, class MutableBufferSequence>
      size_t read(SyncReadStream& stream,
                  const MutableBufferSequence& buffers, error_code& ec);
    template<class SyncReadStream, class MutableBufferSequence,
      class CompletionCondition>
        size_t read(SyncReadStream& stream,
                    const MutableBufferSequence& buffers,
                    CompletionCondition completion_condition);
    template<class SyncReadStream, class MutableBufferSequence,
      class CompletionCondition>
        size_t read(SyncReadStream& stream,
                    const MutableBufferSequence& buffers,
                    CompletionCondition completion_condition,
                    error_code& ec);

    template<class SyncReadStream, class DynamicBuffer>
      size_t read(SyncReadStream& stream, DynamicBuffer&& b);
    template<class SyncReadStream, class DynamicBuffer>
      size_t read(SyncReadStream& stream, DynamicBuffer&& b, error_code& ec);
    template<class SyncReadStream, class DynamicBuffer, class CompletionCondition>
      size_t read(SyncReadStream& stream, DynamicBuffer&& b,
                  CompletionCondition completion_condition);
    template<class SyncReadStream, class DynamicBuffer, class CompletionCondition>
      size_t read(SyncReadStream& stream, DynamicBuffer&& b,
                  CompletionCondition completion_condition, error_code& ec);

    ``// [link functions.async_read asynchronous read operations]:``

    template<class AsyncReadStream, class MutableBufferSequence,
      class CompletionToken>
        __ifr__ async_read(AsyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        CompletionToken&& token);
    template<class AsyncReadStream, class MutableBufferSequence,
      class CompletionCondition, class CompletionToken>
        __ifr__ async_read(AsyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        CompletionCondition completion_condition,
                        CompletionToken&& token);

    template<class AsyncReadStream, class DynamicBuffer, class CompletionToken>
      __ifr__ async_read(AsyncReadStream& stream,
                      DynamicBuffer&& b, CompletionToken&& token);
    template<class AsyncReadStream, class DynamicBuffer,
      class CompletionCondition, class CompletionToken>
        __ifr__ async_read(AsyncReadStream& stream,
                        DynamicBuffer&& b,
                        CompletionCondition completion_condition,
                        CompletionToken&& token);

    ``// [link functions.write synchronous write operations]:``

    template<class SyncWriteStream, class ConstBufferSequence>
      size_t write(SyncWriteStream& stream,
                   const ConstBufferSequence& buffers);
    template<class SyncWriteStream, class ConstBufferSequence>
      size_t write(SyncWriteStream& stream,
                   const ConstBufferSequence& buffers, error_code& ec);
    template<class SyncWriteStream, class ConstBufferSequence,
      class CompletionCondition>
        size_t write(SyncWriteStream& stream,
                     const ConstBufferSequence& buffers,
                     CompletionCondition completion_condition);
    template<class SyncWriteStream, class ConstBufferSequence,
      class CompletionCondition>
        size_t write(SyncWriteStream& stream,
                     const ConstBufferSequence& buffers,
                     CompletionCondition completion_condition,
                     error_code& ec);

    template<class SyncWriteStream, class DynamicBuffer>
      size_t write(SyncWriteStream& stream, DynamicBuffer&& b);
    template<class SyncWriteStream, class DynamicBuffer>
      size_t write(SyncWriteStream& stream, DynamicBuffer&& b, error_code& ec);
    template<class SyncWriteStream, class DynamicBuffer, class CompletionCondition>
      size_t write(SyncWriteStream& stream, DynamicBuffer&& b,
                   CompletionCondition completion_condition);
    template<class SyncWriteStream, class DynamicBuffer, class CompletionCondition>
      size_t write(SyncWriteStream& stream, DynamicBuffer&& b,
                   CompletionCondition completion_condition, error_code& ec);

    ``// [link functions.async_write asynchronous write operations]:``

    template<class AsyncWriteStream, class ConstBufferSequence,
      class CompletionToken>
        __ifr__ async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionToken&& token);
    template<class AsyncWriteStream, class ConstBufferSequence,
      class CompletionCondition, class CompletionToken>
        __ifr__ async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionCondition completion_condition,
                         CompletionToken&& token);

    template<class AsyncWriteStream, class DynamicBuffer, class CompletionToken>
      __ifr__ async_write(AsyncWriteStream& stream,
                       DynamicBuffer&& b, CompletionToken&& token);
    template<class AsyncWriteStream, class DynamicBuffer,
      class CompletionCondition, class CompletionToken>
        __ifr__ async_write(AsyncWriteStream& stream,
                         DynamicBuffer&& b,
                         CompletionCondition completion_condition,
                         CompletionToken&& token);

    ``// [link functions.read_until synchronous delimited read operations]:``

    template<class SyncReadStream, class DynamicBuffer>
      size_t read_until(SyncReadStream& s, DynamicBuffer&& b, char delim);
    template<class SyncReadStream, class DynamicBuffer>
      size_t read_until(SyncReadStream& s, DynamicBuffer&& b,
                        char delim, error_code& ec);
    template<class SyncReadStream, class DynamicBuffer>
      size_t read_until(SyncReadStream& s, DynamicBuffer&& b, string_view delim);
    template<class SyncReadStream, class DynamicBuffer>
      size_t read_until(SyncReadStream& s, DynamicBuffer&& b,
                        string_view delim, error_code& ec);

    ``// [link functions.async_read_until asynchronous delimited read operations]:``

    template<class AsyncReadStream, class DynamicBuffer, class CompletionToken>
      __ifr__ async_read_until(AsyncReadStream& s,
                            DynamicBuffer&& b, char delim,
                            CompletionToken&& token);
    template<class AsyncReadStream, class DynamicBuffer, class CompletionToken>
      __ifr__ async_read_until(AsyncReadStream& s,
                            DynamicBuffer&& b, string_view delim,
                            CompletionToken&& token);

  __end_versioned_ns__
  } // namespace experimental

    template<> struct is_error_code_enum<
      experimental::__versioned_ns__::stream_errc>
        : public true_type {};

  } // namespace std

[endsect]
