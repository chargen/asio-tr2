[section Header [^<?>] synopsis]

  namespace std {
    namespace tr2 {
      namespace sys {

        unspecified transfer_all();

        unspecified transfer_at_least(size_t);

        template<class Allocator = std::allocator<char> >
          class basic_fifobuf;

        typedef basic_fifobuf<> fifobuf;

        // synchronous read operations:
        template<class SyncReadStream, class MutableBuffers>
          size_t read(SyncReadStream& stream, const MutableBuffers& buffers);
        template<class SyncReadStream, class MutableBuffers,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBuffers& buffers,
                        CompletionCondition completion_condition);
        template<class SyncReadStream, class MutableBuffers,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBuffers& buffers,
                        CompletionCondition completion_condition,
                        error_code& ec);
        template<class SyncReadStream, class Allocator>
          size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& sb);
        template<class SyncReadStream, class Allocator,
          class CompletionCondition>
            size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& sb,
                        CompletionCondition completion_condition);
        template<class SyncReadStream, class Allocator,
          class CompletionCondition>
            size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& sb,
                        CompletionCondition completion_condition,
                        error_code& ec);

        // asynchronous read operations:
        template<class AsyncReadStream, class MutableBuffers, class ReadHandler>
          size_t async_read(AsyncReadStream& stream,
                            const MutableBuffers& buffers, ReadHandler handler);
        template<class AsyncReadStream, class MutableBuffers,
          class CompletionCondition, class ReadHandler>
            size_t async_read(AsyncReadStream& stream,
                              const MutableBuffers& buffers,
                              CompletionCondition completion_condition,
                              ReadHandler handler);
        template<class AsyncReadStream, class Allocator, class ReadHandler>
          size_t async_read(AsyncReadStream& stream,
                            basic_fifobuf<Allocator>& sb,
                            ReadHandler handler);
        template<class AsyncReadStream, class Allocator,
          class CompletionCondition, class ReadHandler>
            size_t async_read(AsyncReadStream& stream,
                              basic_fifobuf<Allocator>& sb,
                              CompletionCondition completion_condition,
                              ReadHandler handler);

        // synchronous write operations:
        template<class SyncWriteStream, class ConstBuffers>
          size_t write(SyncWriteStream& stream, const ConstBuffers& buffers);
        template<class SyncWriteStream, class ConstBuffers,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBuffers& buffers,
                         CompletionCondition completion_condition);
        template<class SyncWriteStream, class ConstBuffers,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBuffers& buffers,
                         CompletionCondition completion_condition,
                         error_code& ec);
        template<class SyncWriteStream, class Allocator>
          size_t write(SyncWriteStream& stream, basic_fifobuf<Allocator>& sb);
        template<class SyncWriteStream, class Allocator,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         basic_fifobuf<Allocator>& sb,
                         CompletionCondition completion_condition);
        template<class SyncWriteStream, class Allocator,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         basic_fifobuf<Allocator>& sb,
                         CompletionCondition completion_condition,
                         error_code& ec);

        // asynchronous write operations:
        template<class AsyncWriteStream, class ConstBuffers, class WriteHandler>
          size_t async_write(AsyncWriteStream& stream,
                             const ConstBuffers& buffers, WriteHandler handler);
        template<class AsyncWriteStream, class ConstBuffers,
          class CompletionCondition, class WriteHandler>
            size_t async_write(AsyncWriteStream& stream,
                               const ConstBuffers& buffers,
                               CompletionCondition completion_condition,
                               WriteHandler handler);
        template<class AsyncWriteStream, class Allocator, class WriteHandler>
          size_t async_write(AsyncWriteStream& stream,
                             basic_fifobuf<Allocator>& sb,
                             WriteHandler handler);
        template<class AsyncWriteStream, class Allocator,
          class CompletionCondition, class WriteHandler>
            size_t async_write(AsyncWriteStream& stream,
                               basic_fifobuf<Allocator>& sb,
                               CompletionCondition completion_condition,
                               WriteHandler handler);

        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            char delim);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            char delim, error_code& ec);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            const string& delim);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            const string& delim, error_code& ec);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            const regex& expr);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& sb,
                            const regex& expr, error_code& ec);

        template <class AsyncReadStream, class Allocator, class ReadHandler>
          void async_read_until(AsyncReadStream& s,
                                basic_fifobuf<Allocator>& sb, char delim,
                                ReadHandler handler);
        template <class AsyncReadStream, class Allocator, class ReadHandler>
          void async_read_until(AsyncReadStream& s,
                                basic_fifobuf<Allocator>& sb,
                                const string& delim, ReadHandler handler);
        template <class AsyncReadStream, class Allocator, class ReadHandler>
          void async_read_until(AsyncReadStream& s,
                                basic_fifobuf<Allocator>& sb,
                                const regex& expr, ReadHandler handler);

      } // namespace sys
    } // namespace tr2
  } // namespace std

The `CompletionCondition` parameter is used whenever an algorithm expects a
function object that when applied to an `error_code` and number of bytes as a
`size_t` returns a value testable as `true`. In other words, if an algorithm
takes `CompletionCondition completion_condition` as its argument, it should
work correctly in the construct `if (completion_condition(ec, bc)){...}`, where
`ec` is of type `const error_code` and `bc` is of type `size_t`.

[endsect]
