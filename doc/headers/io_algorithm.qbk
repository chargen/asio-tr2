[section Header [^<?>] synopsis]

  namespace std {
    namespace tr2 {
      namespace sys {

        unspecified transfer_all();

        unspecified transfer_at_least(size_t);

        // synchronous read operations:
        template<class SyncReadStream, class MutableBuffers>
          size_t read(SyncReadStream& stream, const MutableBuffers& buffers);
        template<class SyncReadStream, class MutableBuffers,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBuffers& buffers,
                        CompletionCondition completion_condition);
        template<class SyncReadStream, class MutableBuffers,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBuffers& buffers,
                        CompletionCondition completion_condition,
                        error_code& ec);

        // asynchronous read operations:
        template<class AsyncReadStream, class MutableBuffers, class Handler>
          size_t async_read(AsyncReadStream& stream,
                            const MutableBuffers& buffers, Handler handler);
        template<class AsyncReadStream, class MutableBuffers,
          class CompletionCondition, class Handler>
            size_t async_read(AsyncReadStream& stream,
                              const MutableBuffers& buffers,
                              CompletionCondition completion_condition,
                              Handler handler);

        // synchronous write operations:
        template<class SyncWriteStream, class ConstBuffers>
          size_t write(SyncWriteStream& stream, const ConstBuffers& buffers);
        template<class SyncWriteStream, class ConstBuffers,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBuffers& buffers,
                         CompletionCondition completion_condition);
        template<class SyncWriteStream, class ConstBuffers,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBuffers& buffers,
                         CompletionCondition completion_condition,
                         error_code& ec);

        // asynchronous write operations:
        template<class AsyncWriteStream, class ConstBuffers, class Handler>
          size_t async_write(AsyncWriteStream& stream,
                             const ConstBuffers& buffers, Handler handler);
        template<class AsyncWriteStream, class ConstBuffers,
          class CompletionCondition, class Handler>
            size_t async_write(AsyncWriteStream& stream,
                               const ConstBuffers& buffers,
                               CompletionCondition completion_condition,
                               Handler handler);

      } // namespace sys
    } // namespace tr2
  } // namespace std

Throughout this clause, the names of the template parameters are used to
express type requirements. If an algorithm's template parameter is
`SyncReadStream`, the actual template argument shall satisfy the requirements
of a [link requirements.sync_read_stream synchronous read stream]. If an
algorithm's template parameter is `AsyncReadStream`, the actual template
argument shall satify the requirements of an [link
requirements.async_read_stream asynchronous read stream]. If an algorithm's
template parameter is `SyncWriteStream`, the actual template argument shall
satisfy the requirements of a [link requirements.sync_write_stream synchronous
write stream]. If an algorithm's template parameter is `AsyncWriteStream`, the
actual template argument shall satisfy the requirements of an [link
requirements.async_write_stream asynchronous write stream]. If an algorithm's
template parameter is `MutableBuffers`, the actual template argument shall
satisfy the requirements of a [link requirements.mutable_buffers mutable
buffers] object. If an algorithm's template parameter is `ConstBuffers`, the
actual template argument shall satisfy the requirements of a [link
requirements.const_buffers constant buffers] object.

The `CompletionCondition` parameter is used whenever an algorithm expects a
function object that when applied to an `error_code` and number of bytes as a
`size_t` returns a value testable as `true`. In other words, if an algorithm
takes `CompletionCondition completion_condition` as its argument, it should
work correctly in the construct `if (completion_condition(ec, bc)){...}`, where
`ec` is of type `const error_code` and `bc` is of type `size_t`.

[endsect]
