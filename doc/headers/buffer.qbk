[section Header [^<buffer>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        enum class stream_errc {
          eof = ``['implementation defined]``,
          not_found = ``['implementation defined]``
        };

        const error_category& stream_category() noexcept;

        error_code make_error_code(stream_errc e) noexcept;
        error_condition make_error_condition(stream_errc e) noexcept;

        class ``[link classes.mutable_buffer mutable_buffer]``;

        template<class T> T buffer_cast(const mutable_buffer& b);
        size_t buffer_size(const mutable_buffer& b);
        mutable_buffer operator+(const mutable_buffer& b, size_t n);
        mutable_buffer operator+(size_t n, const mutable_buffer& b);

        class ``[link classes.const_buffer const_buffer]``;

        template<class T> T buffer_cast(const const_buffer& b);
        size_t buffer_size(const const_buffer&);
        const_buffer operator+(const const_buffer&, size_t n);
        const_buffer operator+(size_t, const const_buffer&);

        class ``[link classes.mutable_buffers_1 mutable_buffers_1]``;

        class ``[link classes.const_buffers_1 const_buffers_1]``;

        ``// [link functions.buffer buffer creation functions]:``

        mutable_buffers_1 buffer(void* p, size_t n);
        const_buffers_1 buffer(const void* p, size_t n);

        mutable_buffers_1 buffer(const mutable_buffer& b);
        mutable_buffers_1 buffer(const mutable_buffer& b, size_t n);
        const_buffers_1 buffer(const const_buffer& b);
        const_buffers_1 buffer(const const_buffer& b, size_t n);

        template<class T, size_t N>
          mutable_buffers_1 buffer(T (&arr)[N]);
        template<class T, size_t N>
          mutable_buffers_1 buffer(T (&arr)[N], size_t n);
        template<class T, size_t N>
          const_buffers_1 buffer(const T (&arr)[N]);
        template<class T, size_t N>
          const_buffers_1 buffer(const T (&arr)[N], size_t n);

        template<class T, size_t N>
          mutable_buffers_1 buffer(array<T, N>& arr);
        template<class T, size_t N>
          mutable_buffers_1 buffer(array<T, N>& arr, size_t n);
        template<class T, size_t N>
          const_buffers_1 buffer(array<const T, N>& arr);
        template<class T, size_t N>
          const_buffers_1 buffer(array<const T, N>& arr, size_t n);
        template<class T, size_t N>
          const_buffers_1 buffer(const array<T, N>& arr);
        template<class T, size_t N>
          const_buffers_1 buffer(const array<T, N>& arr, size_t n);

        template<class T, class Allocator>
          mutable_buffers_1 buffer(vector<T, Allocator>&);
        template<class T, class Allocator>
          mutable_buffers_1 buffer(vector<T, Allocator>&, size_t n);
        template<class T, class Allocator>
          const_buffers_1 buffer(const vector<T, Allocator>&);
        template<class T, class Allocator>
          const_buffers_1 buffer(const vector<T, Allocator>&, size_t n);

        template<class CharT, class Traits, class Allocator>
          mutable_buffers_1 buffer(basic_string<CharT, Traits, Allocator>&);
        template<class CharT, class Traits, class Allocator>
          mutable_buffers_1 buffer(basic_string<CharT, Traits, Allocator>&,
                                   size_t n);
        template<class CharT, class Traits, class Allocator>
          const_buffers_1 buffer(const basic_string<CharT, Traits, Allocator>&);
        template<class CharT, class Traits, class Allocator>
          const_buffers_1 buffer(const basic_string<CharT, Traits, Allocator>&,
                                 size_t n);

        template<class Allocator = std::allocator<char> >
          class ``[link classes.basic_fifobuf basic_fifobuf]``;

        typedef basic_fifobuf<> fifobuf;

        class ``[link classes.transfer_all transfer_all]``;
        class ``[link classes.transfer_at_least transfer_at_least]``;

        ``// [link functions.read synchronous read operations]:``

        template<class SyncReadStream, class MutableBufferSequence>
          size_t read(SyncReadStream& stream,
                      const MutableBufferSequence& buffers);
        template<class SyncReadStream, class MutableBufferSequence>
          size_t read(SyncReadStream& stream,
                      const MutableBufferSequence& buffers, error_code& ec);
        template<class SyncReadStream, class MutableBufferSequence,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        CompletionCondition completion_condition);
        template<class SyncReadStream, class MutableBufferSequence,
          class CompletionCondition>
            size_t read(SyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        CompletionCondition completion_condition,
                        error_code& ec);
        template<class SyncReadStream, class Allocator>
          size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& fb);
        template<class SyncReadStream, class Allocator>
          size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& fb,
                      error_code& ec);
        template<class SyncReadStream, class Allocator,
          class CompletionCondition>
            size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& fb,
                        CompletionCondition completion_condition);
        template<class SyncReadStream, class Allocator,
          class CompletionCondition>
            size_t read(SyncReadStream& stream, basic_fifobuf<Allocator>& fb,
                        CompletionCondition completion_condition,
                        error_code& ec);

        ``// [link functions.async_read asynchronous read operations]:``

        template<class AsyncReadStream, class MutableBufferSequence,
          class ReadHandler>
            size_t async_read(AsyncReadStream& stream,
                              const MutableBufferSequence& buffers,
                              ReadHandler handler);
        template<class AsyncReadStream, class MutableBufferSequence,
          class CompletionCondition, class ReadHandler>
            size_t async_read(AsyncReadStream& stream,
                              const MutableBufferSequence& buffers,
                              CompletionCondition completion_condition,
                              ReadHandler handler);
        template<class AsyncReadStream, class Allocator, class ReadHandler>
          size_t async_read(AsyncReadStream& stream,
                            basic_fifobuf<Allocator>& fb,
                            ReadHandler handler);
        template<class AsyncReadStream, class Allocator,
          class CompletionCondition, class ReadHandler>
            size_t async_read(AsyncReadStream& stream,
                              basic_fifobuf<Allocator>& fb,
                              CompletionCondition completion_condition,
                              ReadHandler handler);

        ``// [link functions.write synchronous write operations]:``

        template<class SyncWriteStream, class ConstBufferSequence>
          size_t write(SyncWriteStream& stream,
                       const ConstBufferSequence& buffers);
        template<class SyncWriteStream, class ConstBufferSequence>
          size_t write(SyncWriteStream& stream,
                       const ConstBufferSequence& buffers, error_code& ec);
        template<class SyncWriteStream, class ConstBufferSequence,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionCondition completion_condition);
        template<class SyncWriteStream, class ConstBufferSequence,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionCondition completion_condition,
                         error_code& ec);
        template<class SyncWriteStream, class Allocator>
          size_t write(SyncWriteStream& stream, basic_fifobuf<Allocator>& fb);
        template<class SyncWriteStream, class Allocator>
          size_t write(SyncWriteStream& stream, basic_fifobuf<Allocator>& fb,
                       error_code& ec);
        template<class SyncWriteStream, class Allocator,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         basic_fifobuf<Allocator>& fb,
                         CompletionCondition completion_condition);
        template<class SyncWriteStream, class Allocator,
          class CompletionCondition>
            size_t write(SyncWriteStream& stream,
                         basic_fifobuf<Allocator>& fb,
                         CompletionCondition completion_condition,
                         error_code& ec);

        ``// [link functions.async_write asynchronous write operations]:``

        template<class AsyncWriteStream, class ConstBufferSequence,
          class WriteHandler>
            size_t async_write(AsyncWriteStream& stream,
                               const ConstBufferSequence& buffers,
                               WriteHandler handler);
        template<class AsyncWriteStream, class ConstBufferSequence,
          class CompletionCondition, class WriteHandler>
            size_t async_write(AsyncWriteStream& stream,
                               const ConstBufferSequence& buffers,
                               CompletionCondition completion_condition,
                               WriteHandler handler);
        template<class AsyncWriteStream, class Allocator, class WriteHandler>
          size_t async_write(AsyncWriteStream& stream,
                             basic_fifobuf<Allocator>& fb,
                             WriteHandler handler);
        template<class AsyncWriteStream, class Allocator,
          class CompletionCondition, class WriteHandler>
            size_t async_write(AsyncWriteStream& stream,
                               basic_fifobuf<Allocator>& fb,
                               CompletionCondition completion_condition,
                               WriteHandler handler);

        ``// [link functions.read_until synchronous delimited read operations]:``

        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                            char delim);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                            char delim, error_code& ec);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                            const string& delim);
        template <class SyncReadStream, class Allocator>
          size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                            const string& delim, error_code& ec);

        ``// [link functions.async_read_until asynchronous delimited read operations]:``

        template <class AsyncReadStream, class Allocator, class ReadHandler>
          void async_read_until(AsyncReadStream& s,
                                basic_fifobuf<Allocator>& fb, char delim,
                                ReadHandler handler);
        template <class AsyncReadStream, class Allocator, class ReadHandler>
          void async_read_until(AsyncReadStream& s,
                                basic_fifobuf<Allocator>& fb,
                                const string& delim, ReadHandler handler);

      } // inline namespace network_v1
    } // namespace experimental

    template <> struct is_error_code_enum<
      experimental::network_v1::stream_errc>
        : public true_type {};

  } // namespace std

[endsect]
