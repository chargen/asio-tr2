[section Header [^<buffer>] synopsis]

  namespace std {
    namespace tr2 {
      namespace sys {

        class ``[link classes.mutable_buffer mutable_buffer]``;

        template<class T> T buffer_cast(const mutable_buffer&);
        size_t buffer_size(const mutable_buffer&);
        mutable_buffer operator+(const mutable_buffer&, size_t);
        mutable_buffer operator+(size_t, const mutable_buffer&);

        class ``[link classes.const_buffer const_buffer]``;

        template<class T> T buffer_cast(const const_buffer&);
        size_t buffer_size(const const_buffer&);
        const_buffer operator+(const const_buffer&, size_t);
        const_buffer operator+(size_t, const const_buffer&);

        class ``[link classes.mutable_buffers_1 mutable_buffers_1]``;

        class ``[link classes.const_buffers_1 const_buffers_1]``;

        mutable_buffers_1 buffer(void*, size_t);
        const_buffers_1 buffer(const void*, size_t);

        mutable_buffers_1 buffer(const mutable_buffer&);
        mutable_buffers_1 buffer(const mutable_buffer&, size_t);
        const_buffers_1 buffer(const const_buffer&);
        const_buffers_1 buffer(const const_buffer&, size_t);

        template<class T, size_t N>
          mutable_buffers_1 buffer(T (&)[N]);
        template<class T, size_t N>
          mutable_buffers_1 buffer(T (&)[N], size_t);
        template<class T, size_t N>
          const_buffers_1 buffer(const T (&)[N]);
        template<class T, size_t N>
          const_buffers_1 buffer(const T (&)[N], size_t);

        template<class T, size_t N>
          mutable_buffers_1 buffer(array<T, N>&);
        template<class T, size_t N>
          mutable_buffers_1 buffer(array<T, N>&, size_t);
        template<class T, size_t N>
          const_buffers_1 buffer(array<const T, N>&);
        template<class T, size_t N>
          const_buffers_1 buffer(array<const T, N>&, size_t);
        template<class T, size_t N>
          const_buffers_1 buffer(const array<T, N>&);
        template<class T, size_t N>
          const_buffers_1 buffer(const array<T, N>&, size_t);

        template<class T, class Allocator>
          mutable_buffers_1 buffer(vector<T, Allocator>&);
        template<class T, class Allocator>
          mutable_buffers_1 buffer(vector<T, Allocator>&, size_t);
        template<class T, class Allocator>
          const_buffers_1 buffer(const vector<T, Allocator>&);
        template<class T, class Allocator>
          const_buffers_1 buffer(const vector<T, Allocator>&, size_t);

        template<class CharT, class Traits, class Allocator>
          const_buffers_1 buffer(const basic_string<CharT, Traits, Allocator>&);
        template<class CharT, class Traits, class Allocator>
          const_buffers_1 buffer(const basic_string<CharT, Traits, Allocator>&,
                                 size_t);

      } // namespace sys
    } // namespace tr2
  } // namespace std

[endsect]
