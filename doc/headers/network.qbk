[section Header [^<network>] synopsis]

  namespace std {
    namespace tr2 {
      namespace sys {

        class ``[link classes.socket_base socket_base]``;

        template<class Protocol, class SocketService>
          class ``[link classes.basic_socket basic_socket]``;

        template<class Protocol> class datagram_socket_service;

        template<class Protocol,
          class DatagramSocketService = datagram_socket_service<Protocol> >
            class ``[link classes.basic_datagram_socket basic_datagram_socket]``;

        template<class Protocol> class stream_socket_service;

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class ``[link classes.basic_stream_socket basic_stream_socket]``;

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class basic_socket_streambuf;

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class basic_socket_iostream;

        template<class Protocol> class socket_acceptor_service;

        template<class Protocol,
          class AcceptorService = socket_acceptor_service<Protocol> >
            class ``[link classes.basic_socket_acceptor basic_socket_acceptor]``;

        template<class ResolverProtocol> class ``[link classes.resolver_service resolver_service]``;

        template<class ResolverProtocol,
          class ResolverService = resolver_service<ResolverProtocol> >
            class ``[link classes.basic_resolver basic_resolver]``;

        namespace ip {

          class ``[link classes.ip__address address]``;

          // address comparisons:
          bool operator==(const address&, const address&);
          bool operator!=(const address&, const address&);
          bool operator< (const address&, const address&);
          bool operator> (const address&, const address&);
          bool operator<=(const address&, const address&);
          bool operator>=(const address&, const address&);

          // address I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address&);

          class ``[link classes.ip__address_v4 address_v4]``;

          // address_v4 comparisons:
          bool operator==(const address_v4&, const address_v4&);
          bool operator!=(const address_v4&, const address_v4&);
          bool operator< (const address_v4&, const address_v4&);
          bool operator> (const address_v4&, const address_v4&);
          bool operator<=(const address_v4&, const address_v4&);
          bool operator>=(const address_v4&, const address_v4&);

          // address_v4 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v4&);

          class ``[link classes.ip__address_v6 address_v6]``;

          // address_v6 comparisons:
          bool operator==(const address_v6&, const address_v6&);
          bool operator!=(const address_v6&, const address_v6&);
          bool operator< (const address_v6&, const address_v6&);
          bool operator> (const address_v6&, const address_v6&);
          bool operator<=(const address_v6&, const address_v6&);
          bool operator>=(const address_v6&, const address_v6&);

          // address_v6 I/O:
          template<class CharT, class Traits>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const address_v6&);

          template<class Protocol> class ``[link classes.ip__basic_endpoint basic_endpoint]``;

          // basic_endpoint comparisons:
          template<class Protocol>
            bool operator==(const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);
          template<class Protocol>
            bool operator!=(const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);
          template<class Protocol>
            bool operator< (const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);
          template<class Protocol>
            bool operator> (const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);
          template<class Protocol>
            bool operator<=(const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);
          template<class Protocol>
            bool operator>=(const basic_endpoint<Protocol>&,
                            const basic_endpoint<Protocol>&);

          // basic_endpoint I/O:
          template<class CharT, class Traits, class Protocol>
            basic_ostream<CharT, Traits>& operator<<(
              basic_ostream<CharT, Traits>&, const basic_endpoint<Protocol>&);

          class ``[link classes.ip__resolver_query_base resolver_query_base]``;

          template<class Protocol> ``[link classes.ip__basic_resolver_query basic_resolver_query]``;

          template<class Protocol> ``[link classes.ip__basic_resolver_entry basic_resolver_entry]``;

          template<class Protocol> ``[link classes.ip__basic_resolver_iterator basic_resolver_iterator]``;

          string host_name();
          string host_name(error_code&);

          class ``[link classes.ip__tcp tcp]``;

          class ``[link classes.ip__udp udp]``;

          class ``[link classes.ip__v6_only v6_only]``;

          namespace unicast {

            class ``[link classes.ip__unicast__hops hops]``;

          } // namespace unicast

          namespace multicast {

            class ``[link classes.ip__multicast__join_group join_group]``;

            class ``[link classes.ip__multicast__leave_group leave_group]``;

            class outbound_interface;

            class ``[link classes.ip__multicast__hops hops]``;

            class ``[link classes.ip__multicast__enable_loopback enable_loopback]``;

          } // namespace multicast
        } // namespace ip
      } // namespace sys
    } // namespace tr2
  } // namespace std

[endsect]
