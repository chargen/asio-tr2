[section Header [^<async>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        template <class CompletionToken, class Signature, class = void>
          struct ``[link classes.handler_type handler_type]``;

        template <class CompletionToken, class Signature>
          using handler_type_t =
            typename handler_type<CompletionToken, Signature>::type;

        template <class Handler> class ``[link classes.async_result async_result]``;

        template <class CompletionToken, class Signature>
          struct ``[link classes.async_completion async_completion]``;

        enum class fork_event {
          prepare,
          parent,
          child
        };

        class ``[link classes.execution_context execution_context]``;

        class service_already_exists;

        template <class Service> Service& use_service(execution_context& ctx);
        template <class Service, class... Args> Service&
          make_service(execution_context& ctx, Args&&... args);
        template <class Service> bool has_service(execution_context& ctx);

      } // inline namespace network_v1
    } // namespace experimental
  } // namespace std

[endsect]
