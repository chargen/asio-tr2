[section Header [^<socket>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        enum class socket_errc {
          already_open = ``['implementation defined]``
        };

        const error_category& socket_category() noexcept;

        error_code make_error_code(socket_errc e) noexcept;
        error_condition make_error_condition(socket_errc e) noexcept;

        // Sockets:

        class ``[link classes.socket_base socket_base]``;

        template<class Protocol, class SocketService>
          class ``[link classes.basic_socket basic_socket]``;

        template<class Protocol> class ``[link classes.datagram_socket_service datagram_socket_service]``;

        template<class Protocol,
          class DatagramSocketService = datagram_socket_service<Protocol> >
            class ``[link classes.basic_datagram_socket basic_datagram_socket]``;

        template<class Protocol> class ``[link classes.stream_socket_service stream_socket_service]``;

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class ``[link classes.basic_stream_socket basic_stream_socket]``;

        template<class Protocol> class ``[link classes.socket_acceptor_service socket_acceptor_service]``;

        template<class Protocol,
          class SocketAcceptorService = socket_acceptor_service<Protocol> >
            class ``[link classes.basic_socket_acceptor basic_socket_acceptor]``;

        // Socket streams:

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class ``[link classes.basic_socket_streambuf basic_socket_streambuf]``;

        template<class Protocol,
          class StreamSocketService = stream_socket_service<Protocol> >
            class ``[link classes.basic_socket_iostream basic_socket_iostream]``;

      } // inline namespace network_v1
    } // namespace experimental

    template <> struct is_error_code_enum<
      experimental::network_v1::socket_errc>
        : public true_type {};

  } // namespace std

[endsect]
