[section Header [^<socket>] synopsis]

  namespace std {
    namespace experimental {
      inline namespace network_v1 {

        enum class socket_errc {
          already_open = ``['implementation defined]``,
          not_found = ``['implementation defined]``
        };

        const error_category& socket_category() noexcept;

        error_code make_error_code(socket_errc e) noexcept;
        error_condition make_error_condition(socket_errc e) noexcept;

        // Sockets:

        class ``[link classes.socket_base socket_base]``;

        template<class Protocol>
          class ``[link classes.basic_socket basic_socket]``;

        template<class Protocol>
          class ``[link classes.basic_datagram_socket basic_datagram_socket]``;

        template<class Protocol>
          class ``[link classes.basic_stream_socket basic_stream_socket]``;

        template<class Protocol>
          class ``[link classes.basic_socket_acceptor basic_socket_acceptor]``;

        // Socket streams:

        template<class Protocol, class Clock = chrono::steady_clock,
          class WaitTraits = wait_traits<Clock>>
            class ``[link classes.basic_socket_streambuf basic_socket_streambuf]``;

        template<class Protocol, class Clock = chrono::steady_clock,
          class WaitTraits = wait_traits<Clock>>
            class ``[link classes.basic_socket_iostream basic_socket_iostream]``;

        ``// [link functions.connect synchronous connect operations]:``

        template<class Protocol, class InputIterator>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first);
        template<class Protocol, class InputIterator>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first,
                                error_code& ec);

        template<class Protocol, class InputIterator>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first, InputIterator last);
        template<class Protocol, class InputIterator>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first, InputIterator last,
                                error_code& ec);

        template<class Protocol, class InputIterator, class ConnectCondition>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first,
                                ConnectCondition c);
        template<class Protocol, class InputIterator, class ConnectCondition>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first,
                                ConnectCondition c,
                                error_code& ec);

        template<class Protocol, class InputIterator, class ConnectCondition>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first, InputIterator last,
                                ConnectCondition c);
        template<class Protocol, class InputIterator, class ConnectCondition>
          InputIterator connect(basic_socket<Protocol>& s,
                                InputIterator first, InputIterator last,
                                ConnectCondition c,
                                error_code& ec);

        ``// [link functions.async_connect asynchronous connect operations]:``

        template<class Protocol, class InputIterator, class CompletionToken>
          auto async_connect(basic_socket<Protocol>& s,
                             InputIterator first,
                             CompletionToken&& token);

        template<class Protocol, class InputIterator, class CompletionToken>
          auto async_connect(basic_socket<Protocol>& s,
                             InputIterator first, InputIterator last,
                             CompletionToken&& token);

        template<class Protocol, class InputIterator,
          class ConnectCondition, class CompletionToken>
            auto async_connect(basic_socket<Protocol>& s,
                               InputIterator first,
                               ConnectCondition c,
                               CompletionToken&& token);

        template<class Protocol, class InputIterator,
          class ConnectCondition, class CompletionToken>
            auto async_connect(basic_socket<Protocol>& s,
                               InputIterator first, InputIterator last,
                               ConnectCondition c,
                               CompletionToken&& token);

      } // inline namespace network_v1
    } // namespace experimental

    template<> struct is_error_code_enum<
      experimental::network_v1::socket_errc>
        : public true_type {};

  } // namespace std

[endsect]
