[library Networking Library Proposal for TR2
    [quickbook 1.1]
    [id tr2network]
    [last-revision $Date: 2006/09/08 11:36:45 $]
]

[/-----------------------------------------------------------------------------]

[template std_note[text]
\[['Note:] [text] '''&mdash;'''['end note]\]
]

[template inline_note[text] \[['Note:] [text] '''&mdash;'''['end note]\] ]

[template std_example[text code]
\[['Example:] [text]
[code]
'''&mdash;'''['end example]\]
]

[template function_block[text]
[:[text]]
]

[template function_requires[text]
[:['Requires:] [text]]
]

[template function_effects[text]
[:['Effects:] [text]]
]

[template function_returns[text]
[:['Returns:] [text]]
]

[template function_throws[text]
[:['Throws:] [text]]
]

[template function_postconditions[text]
[:['Postconditions:] [text]]
]

[template function_complexity[text]
[:['Complexity:] [text]]
]

[template function_notes[text]
[:['Notes:] [text]]
]

[template function_note[text]
[:\[['Note:] [text] '''&mdash;'''['end note]\]]
]

[template function_example[text]
[:\[['Example:] [text]
'''&mdash;'''['end example]\]]
]

[template commentary[text]
[blurb [text]]
]

[template mdash[] '''&mdash; ''']

[/-----------------------------------------------------------------------------]

[def __POSIX__ /POSIX/]
[def __Windows__ /Windows/]
[def __accept__ [@http://www.opengroup.org/onlinepubs/000095399/functions/accept.html `accept()`]]
[def __bind__ [@http://www.opengroup.org/onlinepubs/000095399/functions/bind.html `bind()`]]
[def __close__ [@http://www.opengroup.org/onlinepubs/000095399/functions/close.html `close()`]]
[def __connect__ [@http://www.opengroup.org/onlinepubs/000095399/functions/connect.html `connect()`]]
[def __fcntl__ [@http://www.opengroup.org/onlinepubs/000095399/functions/fcntl.html `fcntl()`]]
[def __getaddrinfo__ [@http://www.opengroup.org/onlinepubs/000095399/functions/getaddrinfo.html `getaddrinfo()`]]
[def __gethostname__ [@http://www.opengroup.org/onlinepubs/000095399/functions/gethostname.html `gethostname()`]]
[def __getnameinfo__ [@http://www.opengroup.org/onlinepubs/000095399/functions/getnameinfo.html `getnameinfo()`]]
[def __getpeername__ [@http://www.opengroup.org/onlinepubs/000095399/functions/getpeername.html `getpeername()`]]
[def __getsockname__ [@http://www.opengroup.org/onlinepubs/000095399/functions/getsockname.html `getsockname()`]]
[def __getsockopt__ [@http://www.opengroup.org/onlinepubs/000095399/functions/getsockopt.html `getsockopt()`]]
[def __inet_ntop__ [@http://www.opengroup.org/onlinepubs/000095399/functions/inet_ntop.html `inet_ntop()`]]
[def __inet_pton__ [@http://www.opengroup.org/onlinepubs/000095399/functions/inet_pton.html `inet_pton()`]]
[def __ioctl__ [@http://www.opengroup.org/onlinepubs/000095399/functions/ioctl.html `ioctl()`]]
[def __listen__ [@http://www.opengroup.org/onlinepubs/000095399/functions/listen.html `listen()`]]
[def __recvfrom__ [@http://www.opengroup.org/onlinepubs/000095399/functions/recvfrom.html `recvfrom()`]]
[def __recvmsg__ [@http://www.opengroup.org/onlinepubs/000095399/functions/recvmsg.html `recvmsg()`]]
[def __sendmsg__ [@http://www.opengroup.org/onlinepubs/000095399/functions/sendto.html `sendmsg()`]]
[def __sendto__ [@http://www.opengroup.org/onlinepubs/000095399/functions/sendto.html `sendto()`]]
[def __setsockopt__ [@http://www.opengroup.org/onlinepubs/000095399/functions/setsockopt.html `setsockopt()`]]
[def __shutdown__ [@http://www.opengroup.org/onlinepubs/000095399/functions/shutdown.html `shutdown()`]]
[def __sockatmark__ [@http://www.opengroup.org/onlinepubs/000095399/functions/sockatmark.html `sockatmark()`]]
[def __socket__ [@http://www.opengroup.org/onlinepubs/000095399/functions/socket.html `socket()`]]
[def __errno_h__ [@http://www.opengroup.org/onlinepubs/000095399/basedefs/errno.h.html `errno.h`]]
[def __netdb_h__ [@http://www.opengroup.org/onlinepubs/000095399/basedefs/netdb.h.html `netdb.h`]]
[def __sys_socket_h__ [@http://www.opengroup.org/onlinepubs/000095399/basedefs/sys/socket.h.html `sys/socket.h`]]
[def __netinet_in_h__ [@http://www.opengroup.org/onlinepubs/000095399/basedefs/netinet/in.h.html `netinet/in.h`]]
[def __netinet_tcp_h__ [@http://www.opengroup.org/onlinepubs/000095399/basedefs/netinet/tcp.h.html `netinet/tcp.h`]]
[def __dotdotdot__ ...]

[/-----------------------------------------------------------------------------]

[template POSIX[] \[[link ref-POSIX POSIX]\] ]
[template N1975[] \[[link ref-N1975 N1975]\] ]
[template N2058[] \[[link ref-N2058 N2058]\] ]
[template N2066[] \[[link ref-N2066 N2066]\] ]
[template ACE[] \[[link ref-ACE ACE]\] ]
[template SYMBIAN[] \[[link ref-SYMBIAN SYMBIAN]\] ]
[template MSNET[] \[[link ref-MS-NET MS-NET]\] ]
[template ESAPI[] \[[link ref-ES-API ES-API]\] ]
[template POSA2[] \[[link ref-POSA2 POSA2]\] ]
[template RFC821[] \[[link ref-RFC821 RFC821]\] ]
[template RFC959[] \[[link ref-RFC959 RFC959]\] ]
[template RFC2616[] \[[link ref-RFC2616 RFC2616]\] ]
[template RFC2732[] \[[link ref-RFC2732 RFC2732]\] ]
[template RFC3513[] \[[link ref-RFC3513 RFC3513]\] ]

[/-----------------------------------------------------------------------------]

[section Overview]

This document proposes a networking library for TR2. The library supports
several levels of use, ranging from entry-level to advanced.

To give some idea of the flavour of the proposed library, consider the
following sample code. This is part of a server program that echoes characters
it receives back to the client in upper case:

  namespace sys = std::tr2::sys;

  template <typename Iterator>
  void uppercase(Iterator begin, Iterator end)
  {
    std::locale loc("");
    for (Iterator iter = begin; iter != end; ++iter)
      *iter = std::toupper(*iter, loc);
  }

  void do_sync(
      sys::ip::tcp::socket& socket,
      std::vector<char>& buffer_space)
  {
    try
    {
      for (;;)
      {
        std::size_t count = socket.read_some(sys::buffer(buffer_space));
        uppercase(buffer_space.begin(), buffer_space.begin() + count);
        sys::write(socket, sys::buffer(buffer_space, count));
      }
    }
    catch (sys::system_error& e)
    {
    }
  }

The synchronous approach used above is straightforward to understand and easy
for programmers at any level of ability to write.

Next, the equivalent code developed using asynchronous operations:

  void do_async(
      sys::ip::tcp::socket& socket,
      std::vector<char>& buffer_space)
  {
    socket.async_read_some(sys::buffer(buffer_space),
        std::tr1::bind(handle_read, _1, _2,
          std::tr1::ref(socket), std::tr1::ref(buffer_space)));
  }

  void handle_read(
      sys::error_code ec,
      std::size_t count,
      sys::ip::tcp::socket& socket,
      std::vector<char>& buffer_space)
  {
    if (!ec)
    {
      uppercase(buffer_space.begin(), buffer_space.begin() + count);
      sys::async_write(socket, sys::buffer(buffer_space, count),
          std::tr1::bind(handle_write, _1,
            std::tr1::ref(socket), std::tr1::ref(buffer_space)));
    }
  }

  void handle_write(
      sys::error_code ec,
      sys::ip::tcp::socket& socket,
      std::vector<char>& buffer_space)
  {
    if (!ec)
    {
      socket.async_read_some(sys::buffer(buffer_space),
          std::tr1::bind(handle_read, _1, _2,
            std::tr1::ref(socket), std::tr1::ref(buffer_space)));
    }
  }

This code may appear more complex due to the inverted flow of control, but it
allows a knowledgeable programmer to write code that will scale to a great many
concurrent connections. The synchronous code requires one thread for each
connection, and on most platforms threads are a limited resource. The
asynchronous approach described in this proposal has been exercised in
production HTTP servers to thousands of concurrent connections, and similar
echo servers have been tested to tens of thousands, while using only one
thread.

[endsect]

[/-----------------------------------------------------------------------------]

[section Motivation and Scope]

[section Scope]

Problem areas addressed by this proposal include:

* Networking using TCP and UDP, including support for multicast.
* Client and server applications.
* Scalability to handle many concurrent connections.
* Protocol independence between IPv4 and IPv6.
* Name resolution (i.e. DNS).
* Timers.

Features that are considered outside the scope of this proposal include:

* Protocol implementations such as HTTP, SMTP or FTP.
* Encryption (e.g. SSL, TLS).
* Operating system specific demultiplexing APIs.
* Support for realtime environments.
* QoS-enabled sockets.
* Other TCP/IP protocols such as ICMP.

[endsect]

[section Target Audience]

The bulk of the library interface is intended for use by developers with at
least some understanding of networking concepts (or a willingness to learn). A
high level iostreams interface supports simple use cases and permits novices to
develop network code without needing to get into too much depth.

[endsect]

[section Reference Implementation]

The Boost.Asio library, from which this proposal is derived, has been deployed
in a number of production systems, such as internet-facing HTTP servers,
instant messaging gateways and finance applications.

The Boost.Asio library has been used on the following platforms:

* Win32 using Visual C++ 7.1 and Visual C++ 8.0.
* Win32 using Borland C++Builder 6 patch 4.
* Win32 using MinGW.
* Win32 using Cygwin.
* Linux (2.4 or 2.6 kernels) using g++ 3.3 or later.
* Solaris using g++ 3.3 or later.
* Mac OS X 10.4 using g++ 3.3 or later.
* QNX Neutrino 6.3 using g++ 3.3 or later.
* FreeBSD using g++ 3.3 or later.

[endsect]

[section Related Work]

The interface is based on the BSD sockets API, which is widely implemented and
supported by extensive literature. It is also used as the basis of networking
APIs in other languages (e.g. Java). Unsafe practices of the BSD sockets API,
e.g. lack of compile-time type safety, are not included.

Asynchronous support is derived from the Proactor design pattern as implemented
by the ADAPTIVE Communication Environment [ACE], and is influenced by the
design of the Symbian C++ sockets API [SYMBIAN], which supports synchronous and
asynchronous operations side-by-side. The Microsoft .NET socket classes [MSNET]
and the Extended Sockets API [ESAPI] developed by The Open Group support
similar styles of network programming.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Impact On the Standard]

This is a pure library proposal. It does not add any new language features, nor
does it alter any existing standard library headers.

This library can be implemented using compilers that conform to the C++03
standard. An implementation of this library requires operating system-specific
functions that lie outside the C++03 standard.

[section Relationship to TR1]

This proposal uses the TR1 libraries for fixed size arrays and regular
expressions. Programs developed using the proposed library typically make
extensive use of TR1 function object binders.

[endsect]

[section Relationship to Threading and Memory Model Proposals]

This proposal does not require, and would not be coupled to, hypothetical
standard library support for threading. The interface is intended to support
implementations on platforms where threads are not available.

However, the library interface is designed to allow the effective utilisation
of threading if available, and its behaviour with respect to threads is clearly
defined. In particular, the proposal will attempt to address:

* Thread safety of classes and functions defined in the interface.

* The threads from which an implementation is permitted to call user code, and
  when.

* The relationship between asynchronous operation initiation, completion, and
  inter-thread memory visibility.

[endsect]

[section Relationship to Date-Time Library Proposal]

This proposal uses classes defined in the Proposal to Add Date-Time to the C++
Standard Library [N2058].

[endsect]

[section Relationship to Filesystem Library Proposal]

The classes defined in the Diagnostics Library chapter of the Filesystem
Library Proposal [N1975], and updated by [N2066], are used in this proposal.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Design Decisions]

[include:design design/bsd_sockets.qbk]
[include:design design/async.qbk]
[include:design design/iostreams.qbk]
[include:design design/posix.qbk]
[include:design design/threads.qbk]
[include:design design/strands.qbk]
[include:design design/buffers.qbk]
[include:design design/allocation.qbk]
[include:design design/line_based.qbk]

[section Other Design Decisions]

The following list summarises some other design decisions made in the
development of the library:

* Flaws in BSD socket API [mdash] type safety
* Asynchronous pros and cons
* Should acceptor set reuse_address or not
* Services
* Signals
* Why read/async_read/write/async_write are needed
* Protocol independence
* No string constructors for IP address classes
* Timers, monotonic time
* Suppression of connection aborted error for accept operation
* Socket option requirements to allow extensibility
* ioctl provided for platform specific use, e.g. QoS settings
* Non-blocking flag is simulated
* WSAEMSGSIZE mapping on Windows to no error, set message_truncated
* Why ip::multicast::outbound_interface is settable only.

Contact the author for more information.

[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Proposed Text for the Standard]

[commentary Grey-shaded italic text is commentary on the proposal. It is not to
be added to the TR.]

This clause describes components that C++ programs may use to perform network
operations.

[commentary The Filesystem Library Proposal [N1975] adds introductory text to
the TR to establish a relationship to __POSIX__ [POSIX]. This proposal uses the
relationship to similarly define behaviour "as if" implemented by __POSIX__,
except that the requirements for error reporting are stricter than those
outlined in [N1975].]

The following subclauses describe components for I/O services, timers, buffer
management, sockets, endpoint resolution, iostreams, and internet protocol, as
summarised in the table below:

[table Table--Networking library summary
  [[Subclause][Header(s)]]
  [
    [[link tr2network.basic_io_services Basic I/O services]]
    [`<io_service>`]
  ]
  [
    [[link tr2network.timers Timers]]
    [`<timer>`]
  ]
  [
    [[link tr2network.buffers Buffers]]
    [`<buffer>`]
  ]
  [
    [
      [link tr2network.sockets Sockets]\n
      [link tr2network.socket_streams Socket streams]\n
      [link tr2network.internet_protocol Internet protocol]\n
    ]
    [`<network>`]
  ]
]

Throughout this clause, the names of the template parameters are used to
express type requirements, as listed in the table below.

[table Table--Template parameters and type requirements
  [[template parameter name][type requirements]]
  [
    [`AcceptHandler`]
    [[link requirements.accept_handler accept handler]]
  ]
  [
    [`AsyncReadStream`]
    [[link requirements.async_read_stream buffer-oriented asynchronous read stream]]
  ]
  [
    [`AsyncWriteStream`]
    [[link requirements.async_write_stream buffer-oriented asynchronous write stream]]
  ]
  [
    [`CompletionHandler`]
    [[link requirements.completion_handler completion handler]]
  ]
  [
    [`ConnectHandler`]
    [[link requirements.connect_handler connect handler]]
  ]
  [
    [`ConstBufferSequence`]
    [[link requirements.const_buffers constant buffer sequence]]
  ]
  [
    [`ConvertibleToConstBuffer`]
    [[link requirements.convertible_to_const_buffer convertible to a
    constant buffer]]
  ]
  [
    [`ConvertibleToMutableBuffer`]
    [[link requirements.convertible_to_mutable_buffer convertible to a
    mutable buffer]]
  ]
  [
    [`DatagramSocketService`]
    [[link requirements.datagram_socket_service datagram socket service]]
  ]
  [
    [`GettableSocketOption`]
    [[link requirements.gettable_socket_option gettable socket option]]
  ]
  [
    [`Handler`]
    [[link requirements.handler handler]]
  ]
  [
    [`InternetProtocol`]
    [[link requirements.internet_protocol Internet protocol]]
  ]
  [
    [`IoControlCommand`]
    [[link requirements.io_control_command I/O control command]]
  ]
  [
    [`IoObjectService`]
    [[link requirements.io_object_service I/O object service]]
  ]
  [
    [`MutableBufferSequence`]
    [[link requirements.mutable_buffers mutable buffer sequence]]
  ]
  [
    [`Protocol`]
    [[link requirements.protocol protocol]]
  ]
  [
    [`ReadHandler`]
    [[link requirements.read_handler read handler]]
  ]
  [
    [`ResolveHandler`]
    [[link requirements.resolve_handler resolve handler]]
  ]
  [
    [`ResolverService`]
    [[link requirements.resolver_service resolver service]]
  ]
  [
    [`Service`]
    [[link requirements.service service]]
  ]
  [
    [`SettableSocketOption`]
    [[link requirements.settable_socket_option settable socket option]]
  ]
  [
    [`SocketAcceptorService`]
    [[link requirements.socket_acceptor_service socket acceptor service]]
  ]
  [
    [`SocketService`]
    [[link requirements.socket_service socket service]]
  ]
  [
    [`StreamSocketService`]
    [[link requirements.stream_socket_service stream socket service]]
  ]
  [
    [`SyncReadStream`]
    [[link requirements.sync_read_stream buffer-oriented synchronous read stream]]
  ]
  [
    [`SyncWriteStream`]
    [[link requirements.sync_write_stream buffer-oriented synchronous write stream]]
  ]
  [
    [`TimerService`]
    [[link requirements.timer_service timer service]]
  ]
  [
    [`TimeTraits`]
    [[link requirements.time_traits time traits]]
  ]
  [
    [`WaitHandler`]
    [[link requirements.wait_handler wait handler]]
  ]
  [
    [`WriteHandler`]
    [[link requirements.write_handler write handler]]
  ]
]

[include:definitions definitions.qbk]

[section Diagnostics library]
[commentary The following text is intended as an addition to the Diagnostics
Library chapter defined in \[N1975\] and modified by \[N2066\].]
[include:headers headers/system_error.qbk]
[include:globals globals/errno_errors.qbk]
[include:globals globals/getaddrinfo_errors.qbk]
[include:globals globals/misc_errors.qbk]
[endsect]

[section:basic_io_services Basic I/O services]
[include:headers headers/io_service.qbk]
[section:basic_io_services_requirements Requirements]
[include:requirements requirements/handler.qbk]
[include:requirements requirements/completion_handler.qbk]
[include:requirements requirements/service.qbk]
[include:requirements requirements/io_object_service.qbk]
[include:requirements requirements/thread_safety.qbk]
[include:requirements requirements/synchronous_operations.qbk]
[include:requirements requirements/asynchronous_operations.qbk]
[endsect]
[include:classes classes/io_service.qbk]
[include:classes classes/io_service__service.qbk]
[include:classes classes/io_service__id.qbk]
[include:classes classes/io_service__work.qbk]
[include:classes classes/io_service__strand.qbk]
[include:functions functions/handler_hooks.qbk]
[include:classes classes/basic_io_object.qbk]
[endsect]

[section:timers Timers]
This subclause defines components for performing timer operations.
[std_example Performing a synchronous wait operation on a timer:
``
  io_service i;
  deadline_timer t(i);
  t.expires_from_now(seconds(5));
  t.wait();
``]
[std_example Performing an asynchronous wait operation on a timer:
``
  void handler(error_code ec) { __dotdotdot__ }
  __dotdotdot__
  io_service i;
  deadline_timer t(i);
  t.expires_from_now(seconds(5));
  t.async_wait(handler);
  i.run();
``]
[include:headers headers/timer.qbk]
[section:timers_requirements Requirements]
[include:requirements requirements/time_traits.qbk]
[include:requirements requirements/wait_handler.qbk]
[include:requirements requirements/timer_service.qbk]
[endsect]
[include:classes classes/time_traits.qbk]
[include:classes classes/deadline_timer_service.qbk]
[include:classes classes/basic_deadline_timer.qbk]
[endsect]

[section:buffers Buffers]
[include:headers headers/buffer.qbk]
[section:buffers_requirements Requirements]
[include:requirements requirements/convertible_to_mutable_buffer.qbk]
[include:requirements requirements/mutable_buffers.qbk]
[include:requirements requirements/convertible_to_const_buffer.qbk]
[include:requirements requirements/const_buffers.qbk]
[include:requirements requirements/sync_read_stream.qbk]
[include:requirements requirements/async_read_stream.qbk]
[include:requirements requirements/sync_write_stream.qbk]
[include:requirements requirements/async_write_stream.qbk]
[endsect]
[include:classes classes/mutable_buffer.qbk]
[include:classes classes/const_buffer.qbk]
[include:classes classes/mutable_buffers_1.qbk]
[include:classes classes/const_buffers_1.qbk]
[include:functions functions/buffer.qbk]
[include:classes classes/basic_fifobuf.qbk]
[include:classes classes/transfer_all.qbk]
[include:classes classes/transfer_at_least.qbk]
[include:functions functions/read.qbk]
[include:functions functions/async_read.qbk]
[include:functions functions/write.qbk]
[include:functions functions/async_write.qbk]
[include:functions functions/read_until.qbk]
[include:functions functions/async_read_until.qbk]
[endsect]

[include:headers headers/network.qbk]

[section:sockets Sockets]
[section:sockets_requirements Requirements]
[include:requirements requirements/extensibility.qbk]
[include:requirements requirements/endpoint.qbk]
[include:requirements requirements/protocol.qbk]
[include:requirements requirements/socket_service.qbk]
[include:requirements requirements/datagram_socket_service.qbk]
[include:requirements requirements/stream_socket_service.qbk]
[include:requirements requirements/socket_acceptor_service.qbk]
[include:requirements requirements/gettable_socket_option.qbk]
[include:requirements requirements/settable_socket_option.qbk]
[include:requirements requirements/io_control_command.qbk]
[include:requirements requirements/read_handler.qbk]
[include:requirements requirements/write_handler.qbk]
[include:requirements requirements/accept_handler.qbk]
[include:requirements requirements/connect_handler.qbk]
[endsect]
[include:classes classes/socket_base.qbk]
[include:classes classes/socket_base__bool_socket_options.qbk]
[include:classes classes/socket_base__int_socket_options.qbk]
[include:classes classes/socket_base__linger.qbk]
[include:classes classes/basic_socket.qbk]
[include:classes classes/datagram_socket_service.qbk]
[include:classes classes/basic_datagram_socket.qbk]
[include:classes classes/stream_socket_service.qbk]
[include:classes classes/basic_stream_socket.qbk]
[include:classes classes/socket_acceptor_service.qbk]
[include:classes classes/basic_socket_acceptor.qbk]
[endsect]

[section:socket_streams Socket streams]
[include:classes classes/basic_socket_streambuf.qbk]
[include:classes classes/basic_socket_iostream.qbk]
[endsect]

[section:internet_protocol Internet protocol]
[section:internet_protocol_requirements Requirements]
[include:requirements requirements/internet_protocol.qbk]
[include:requirements requirements/resolver_service.qbk]
[include:requirements requirements/resolve_handler.qbk]
[endsect]
[include:classes classes/ip__address.qbk]
[include:classes classes/ip__address_v4.qbk]
[include:classes classes/ip__address_v6.qbk]
[include:classes classes/ip__basic_endpoint.qbk]
[include:classes classes/ip__resolver_query_base.qbk]
[include:classes classes/ip__basic_resolver_entry.qbk]
[include:classes classes/ip__basic_resolver_iterator.qbk]
[include:classes classes/ip__basic_resolver_query.qbk]
[include:classes classes/ip__resolver_service.qbk]
[include:classes classes/ip__basic_resolver.qbk]
[include:functions functions/ip__host_name.qbk]
[include:classes classes/ip__tcp.qbk]
[include:classes classes/ip__tcp__no_delay.qbk]
[include:classes classes/ip__udp.qbk]
[include:classes classes/ip__v6_only.qbk]
[include:classes classes/ip__unicast__hops.qbk]
[include:classes classes/ip__multicast__group_socket_options.qbk]
[include:classes classes/ip__multicast__outbound_interface.qbk]
[include:classes classes/ip__multicast__hops.qbk]
[include:classes classes/ip__multicast__enable_loopback.qbk]
[endsect]

[endsect]

[/-----------------------------------------------------------------------------]

[section Open Issues]

* Impact of trapping signed char implementations on streambuf and iostream support.

[endsect]

[/-----------------------------------------------------------------------------]

[section Acknowledgements]

/TODO/

[endsect]

[/-----------------------------------------------------------------------------]

[section References]

[#ref-POSIX] \[POSIX\] ['ISO/IEC 9945:2003], ['IEEE Std 1003.1-2001], and ['The
Open Group Base Specifications, Issue 6]. Also known as ['The Single Unix
Specification, Version 3].

[#ref-N1975] \[N1975\] Dawes, Beman,
['Filesystem Library Proposal for TR2 (Revision 3)], 2006

[#ref-N2058] \[N2058\] Garland, Jeff,
['Proposal to Add Date-Time to the C++ Standard Library], 2006

[#ref-N2066] \[N2066\] Dawes, Beman,
['TR2 Diagnostics Enhancements], 2006

[#ref-ACE] \[ACE\] Schmidt, Douglas C.,
['ADAPTIVE Communication Environment],
[@http://www.cs.wustl.edu/~schmidt/ACE.html]

[#ref-SYMBIAN] \[SYMBIAN\] Symbian Ltd,
['Sockets Client],
[@http://www.symbian.com/developer/techlib/v70sdocs/doc_source/reference/cpp/SocketsClient/index.html]

[#ref-MS-NET] \[MS-NET\] Microsoft Corporation,
['.NET Framework Class Library, Socket Class],
[@http://msdn2.microsoft.com/en-us/library/system.net.sockets.socket.aspx]

[#ref-ES-API] \[ES-API\] The Interconnect Software Consortium / The Open Group,
['Extended Sockets API (ES-API), Issue 1.0], 2005,
[@http://opengroup.org/icsc/uploads/40/6415/ES_API_1_0.pdf]

[#ref-POSA2] \[POSA2\] Schmidt, Douglas C. et al,
['Pattern Oriented Software Architecture, Volume 2], Wiley, 2000

[#ref-RFC821] \[RFC821\] Postel, J.,
['RFC 821: Simple Mail Transfer Protocol], 1982,
[@http://www.ietf.org/rfc/rfc0821.txt]

[#ref-RFC959] \[RFC959\] Postel, J. and Reynolds, J.,
['RFC 959: File Transfer Protocol (FTP)], 1985,
[@http://www.ietf.org/rfc/rfc0959.txt]

[#ref-RFC2616] \[RFC2616\] Fielding, R. et al,
['RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1], 1999,
[@http://www.ietf.org/rfc/rfc2616.txt]

[#ref-RFC2732] \[RFC2732\] Hinden, R., Carpenter, B. and Masinter, L.,
['RFC 2732: Format for Literal IPv6 Addresses in URL's], 1999,
[@http://www.ietf.org/rfc/rfc2732.txt]

[#ref-RFC3513] \[RFC3513\] Hinden, R. and Deering, S.,
['RFC 3513: Internet Protocol Version 6 (IPv6) Addressing Architecture], 2003,
[@http://www.ietf.org/rfc/rfc3513.txt]

[endsect]
