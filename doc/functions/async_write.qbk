[section:async_write Asynchronous write operations]
[xrefid buffer.async.write]

  template<class AsyncWriteStream, class ConstBufferSequence,
    class CompletionToken>
      __ifr__ async_write(AsyncWriteStream& stream,
                       const ConstBufferSequence& buffers,
                       CompletionToken&& token);
  template<class AsyncWriteStream, class ConstBufferSequence,
    class CompletionCondition, class CompletionToken>
      __ifr__ async_write(AsyncWriteStream& stream,
                       const ConstBufferSequence& buffers,
                       CompletionCondition completion_condition,
                       CompletionToken&& token);

[function_block A [link requirements.read_write_operations write operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing zero or more asynchronous operations on
the stream using the stream's `async_write_some` member function (henceforth
referred to as asynchronous write_some operations).]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous write_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous write_some operation, and the total number of bytes transferred in
the asynchronous write operation so far. The function object return value
specifies the maximum number of bytes to be write on the subsequent asynchronous
write_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block [mdash] the total number of bytes transferred is equal to
`buffer_size(buffers)`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure the `AsyncWriteStream` object `stream`
is valid until the completion handler for the asynchronous operation is
invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous write_some operation, and
`n` is the total number of bytes transferred.]

[function_remarks This function shall not participate in overload resolution
unless `is_const_buffer_sequence<ConstBufferSequence>::value` is `true`.]

  template<class AsyncWriteStream, class DynamicBuffer, class CompletionToken>
    __ifr__ async_write(AsyncWriteStream& stream,
                     DynamicBuffer&& b, CompletionToken&& token);
  template<class AsyncWriteStream, class DynamicBuffer,
    class CompletionCondition, class CompletionToken>
      __ifr__ async_write(AsyncWriteStream& stream,
                       DynamicBuffer&& b,
                       CompletionCondition completion_condition,
                       CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing zero or more asynchronous write_some
operations on the stream.]

[function_block Data is written from the [link requirements.dynamic_buffers
dynamic buffer] object `b`. A [link requirements.const_buffers constant buffer
sequence] is obtained using `b.data()`. After the data has been written to the
stream, the implementation performs `b.consume(n)`, where `n` is the number of
bytes successfully written.]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous write_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous write_some operation, and the total number of bytes transferred in
the asynchronous write operation so far. The function object return value
specifies the maximum number of bytes to be write on the subsequent asynchronous
write_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block [mdash] `b.size() == 0`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure both the `AsyncWriteStream` object
`stream` and the memory associated with the dynamic buffer `b` are valid until
the completion handler for the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous write_some operation, and
`n` is the total number of bytes transferred.]

[function_remarks This function shall not participate in overload resolution
unless `is_dynamic_buffer<DynamicBuffer>::value` is `true`.]

[endsect]
