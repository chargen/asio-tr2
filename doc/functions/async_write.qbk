[section:async_write Asynchronous write operations]

  template<class AsyncWriteStream, class ConstBufferSequence,
    class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         WriteHandler handler);
  template<class AsyncWriteStream, class ConstBufferSequence,
    class CompletionCondition, class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionCondition completion_condition,
                         WriteHandler handler);

[function_block An [link requirements.asynchronous_write_operations asynchronous
write operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing zero or more asynchronous operations on
the stream using the stream's `async_write_some` member function (henceforth
referred to as asynchronous write_some operations).]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous write_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous write_some operation, and the total number of bytes transferred in
the asynchronous write operation so far. The function object return value
specifies the maximum number of bytes to be write on the subsequent asynchronous
write_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block [mdash] the total number of bytes transferred is equal to
`buffer_size(buffers)`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure the `AsyncWriteStream` object `stream`
is valid until the handler for the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous write_some operation, and
`n` is the total number of bytes transferred.]

  template<class AsyncWriteStream, class Allocator, class WriteHandler>
    size_t async_write(AsyncWriteStream& stream,
                       basic_fifobuf<Allocator>& fb,
                       WriteHandler handler);
  template<class AsyncWriteStream, class Allocator,
    class CompletionCondition, class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         basic_fifobuf<Allocator>& fb,
                         CompletionCondition completion_condition,
                         WriteHandler handler);

[function_block An [link requirements.asynchronous_operations asynchronous
operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing zero or more asynchronous write_some
operations on the stream.]

[function_block Data is written from the `basic_fifobuf<>` object `fb`. A [link
requirements.const_buffers constant buffer sequence] is obtained prior to each
`async_write_some` call using `fb.data()`. After the completion of each
asynchronous write_some operation, the implementation performs
`fb.consume(n)`, where `n` is the value passed to the asynchronous write_some
operation's completion handler.]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous write_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous write_some operation, and the total number of bytes transferred in
the asynchronous write operation so far. The function object return value
specifies the maximum number of bytes to be write on the subsequent asynchronous
write_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is empty, that is
`fb.size() == 0`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure both the `AsyncWriteStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, the [link
requirements.write_handler `WriteHandler`] object `handler` is invoked with the
`error_code` value from the most recent asynchronous write_some operation,
and the total number of bytes transferred.]

[endsect]
