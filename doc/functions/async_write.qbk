[section:async_write Asynchronous write operations]

  template<class AsyncWriteStream, class ConstBufferSequence,
    class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         WriteHandler handler);
  template<class AsyncWriteStream, class ConstBufferSequence,
    class CompletionCondition, class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         const ConstBufferSequence& buffers,
                         CompletionCondition completion_condition,
                         WriteHandler handler);

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing one or more asynchronous operations on
the stream using the stream's `async_write_some` member function (henceforth
referred to as asynchronous /write_some/ operations). The operation is
performed via the `io_service` object `stream.io_service()` and behaves
according to [link requirements.asynchronous_operations asynchronous operation]
requirements.]

[function_block The [link requirements.const_buffers constant buffer sequence]
`buffers` specifies memory where the data to be written is located. The
asynchronous write operation shall always write a buffer in the sequence
completely before proceeding to the next.]

[function_block The implementation shall maintain one or more copies of
`buffers` until such time as the write operation no longer requires access to
the memory specified by the buffers in the sequence. The program must ensure
the memory is valid until:]

[function_block - the last copy of `buffers` is destroyed, or]

[function_block - the handler for the asynchronous operation is invoked,]

[function_block whichever comes first.]

[function_block The `completion_condition` parameter specifies a function
object to be called after the completion of each asynchronous /write_some/
operation. The function object is passed the `error_code` value from completion
handler of the most recent asynchronous /write_some/ operation, and the total
number of bytes transferred in the asynchronous write operation so far.
Overloads where a completion condition is not specified behave as if called
with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block - all buffers in the constant buffer sequence `buffers` have
been written; or]

[function_block - the completion condition returns true.]

[function_block The program must ensure the `AsyncWriteStream` object `stream`
is valid until the handler for the asynchronous operation is invoked.]

[function_block Any implementation-defined handler objects passed to
asynchronous /write_some/ operations shall implement `io_handler_allocate`,
`io_handler_deallocate` and `io_handler_invoke` such that the calls are
forwarded to the equivalent functions for the object `handler`.]

[function_block On completion of the asynchronous operation, the [link
requirements.write_handler `WriteHandler`] object `handler` is invoked with the
`error_code` value from the most recent asynchronous /write_some/ operation,
and the total number of bytes transferred.]

  template<class AsyncWriteStream, class Allocator, class WriteHandler>
    size_t async_write(AsyncWriteStream& stream,
                       basic_fifobuf<Allocator>& fb,
                       WriteHandler handler);
  template<class AsyncWriteStream, class Allocator,
    class CompletionCondition, class WriteHandler>
      size_t async_write(AsyncWriteStream& stream,
                         basic_fifobuf<Allocator>& fb,
                         CompletionCondition completion_condition,
                         WriteHandler handler);

[function_effects Initiates an asynchronous operation to write data to the
[link requirements.async_write_stream buffer-oriented asynchronous write
stream] object `stream` by performing one or more asynchronous /write_some/
operations on the stream. The operation is performed via the `io_service`
object `stream.io_service()` and behaves according to [link
requirements.asynchronous_operations asynchronous operation] requirements.]

[function_block Data is written from the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_write_some` call using `fb.data()`. After the completion of each
asynchronous /write_some/ operation, the implementation performs
`fb.consume(n)`, where `n` is the value passed to the asynchronous /write_some/
operation's completion handler.]

[function_block The `completion_condition` parameter specifies a function
object to be called after the completion of each asynchronous /write_some/
operation. The function object is passed the `error_code` value from completion
handler of the most recent asynchronous /write_some/ operation, and the total
number of bytes transferred in the asynchronous write operation so far.
Overloads where a completion condition is not specified behave as if called
with an object of class `transfer_all`.]

[function_block The asynchronous write operation continues until:]

[function_block - the `basic_fifobuf<>` object `fb` is empty, that is
`fb.size() == 0`; or]

[function_block - the completion condition returns true.]

[function_block The program must ensure both the `AsyncWriteStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block Any implementation-defined handler objects passed to
asynchronous /write_some/ operations shall implement `io_handler_allocate`,
`io_handler_deallocate` and `io_handler_invoke` such that the calls are
forwarded to the equivalent functions for the object `handler`.]

[function_block On completion of the asynchronous operation, the [link
requirements.write_handler `WriteHandler`] object `handler` is invoked with the
`error_code` value from the most recent asynchronous /write_some/ operation,
and the total number of bytes transferred.]

[endsect]
