[section:async_read Asynchronous read operations]

  template<class AsyncReadStream, class MutableBufferSequence,
    class ReadHandler>
      size_t async_read(AsyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        ReadHandler handler);
  template<class AsyncReadStream, class MutableBufferSequence,
    class CompletionCondition, class ReadHandler>
      size_t async_read(AsyncReadStream& stream,
                        const MutableBufferSequence& buffers,
                        CompletionCondition completion_condition,
                        ReadHandler handler);

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing one or more asynchronous operations on the stream
using the stream's `async_read_some` member function (henceforth referred to as
asynchronous /read_some/ operations). The operation is performed via the
`io_service` object `stream.io_service()` and behaves according to [link
requirements.asynchronous_operations asynchronous operation] requirements.]

[function_block The [link requirements.mutable_buffers mutable buffer sequence]
`buffers` specifies memory where the data should be placed. The asynchronous
read operation shall always fill a buffer in the sequence completely before
proceeding to the next.]

[function_block The implementation shall maintain one or more copies of
`buffers` until such time as the read operation no longer requires access to
the memory specified by the buffers in the sequence. The program must ensure
the memory is valid until:]

[function_block [mdash] the last copy of `buffers` is destroyed, or]

[function_block [mdash] the handler for the asynchronous operation is invoked,]

[function_block whichever comes first.]

[function_block The `completion_condition` parameter specifies a function
object to be called after the completion of each asynchronous /read_some/
operation. The function object is passed the `error_code` value from completion
handler of the most recent asynchronous /read_some/ operation, and the total
number of bytes transferred in the asynchronous read operation so far.
Overloads where a completion condition is not specified behave as if called
with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] all buffers in the mutable buffer sequence `buffers`
have been filled; or]

[function_block [mdash] the completion condition returns true.]

[function_block The program must ensure the `AsyncReadStream` object `stream`
is valid until the handler for the asynchronous operation is invoked.]

[function_block Any implementation-defined handler objects passed to
asynchronous /read_some/ operations shall implement `io_handler_allocate`,
`io_handler_deallocate` and `io_handler_invoke` such that the calls are
forwarded to the equivalent functions for the object `handler`.]

[function_block On completion of the asynchronous operation, the [link
requirements.read_handler `ReadHandler`] object `handler` is invoked with the
`error_code` value from the most recent asynchronous /read_some/ operation, and
the total number of bytes transferred.]

  template<class AsyncReadStream, class Allocator, class ReadHandler>
    size_t async_read(AsyncReadStream& stream,
                      basic_fifobuf<Allocator>& fb,
                      ReadHandler handler);
  template<class AsyncReadStream, class Allocator,
    class CompletionCondition, class ReadHandler>
      size_t async_read(AsyncReadStream& stream,
                        basic_fifobuf<Allocator>& fb,
                        CompletionCondition completion_condition,
                        ReadHandler handler);

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing one or more asynchronous /read_some/ operations
on the stream. The operation is performed via the `io_service` object
`stream.io_service()` and behaves according to [link
requirements.asynchronous_operations asynchronous operation] requirements.]

[function_block Data is placed into the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_read_some` call using `fb.prepare(min(N, fb.max_size() - fb.size()))`,
where `N` is a suitable implementation-defined value. After the completion of
each asynchronous /read_some/ operation, the implementation performs
`fb.commit(n)`, where `n` is the value passed to the asynchronous /read_some/
operation's completion handler.]

[function_block The `completion_condition` parameter specifies a function
object to be called after the completion of each asynchronous /read_some/
operation. The function object is passed the `error_code` value from completion
handler of the most recent asynchronous /read_some/ operation, and the total
number of bytes transferred in the asynchronous read operation so far.
Overloads where a completion condition is not specified behave as if called
with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is full, that is
`fb.size() == fb.max_size()`; or]

[function_block [mdash] the completion condition returns true.]

[function_block The program must ensure both the `AsyncReadStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block Any implementation-defined handler objects passed to
asynchronous /read_some/ operations shall implement `io_handler_allocate`,
`io_handler_deallocate` and `io_handler_invoke` such that the calls are
forwarded to the equivalent functions for the object `handler`.]

[function_block On completion of the asynchronous operation, the [link
requirements.read_handler `ReadHandler`] object `handler` is invoked with the
`error_code` value from the most recent asynchronous /read_some/ operation, and
the total number of bytes transferred.]

[endsect]
