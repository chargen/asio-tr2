[section:async_read Asynchronous read operations]

  template<class AsyncReadStream, class MutableBufferSequence,
    class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      const MutableBufferSequence& buffers,
                      CompletionToken&& token);
  template<class AsyncReadStream, class MutableBufferSequence,
    class CompletionCondition, class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      const MutableBufferSequence& buffers,
                      CompletionCondition completion_condition,
                      CompletionToken&& token);

[function_block An [link requirements.asynchronous_read_operations asynchronous
read operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing zero or more asynchronous operations on the
stream using the stream's `async_read_some` member function (henceforth
referred to as asynchronous read_some operations).]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous read_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous read_some operation, and the total number of bytes transferred in
the asynchronous read operation so far. The function object return value
specifies the maximum number of bytes to be read on the subsequent asynchronous
read_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the total number of bytes transferred is equal to
`buffer_size(buffers)`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure the `AsyncReadStream` object `stream`
is valid until the handler for the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous read_some operation, and
`n` is the total number of bytes transferred.]

[function_remarks This function shall not participate in overload resolution
unless `is_mutable_buffer_sequence<MutableBufferSequence>::value` is true.]

  template<class AsyncReadStream, class DynamicBufferSequence,
    class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      DynamicBufferSequence&& b,
                      CompletionToken&& token);
  template<class AsyncReadStream, class DynamicBufferSequence,
    class CompletionCondition, class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      DynamicBufferSequence&& b,
                      CompletionCondition completion_condition,
                      CompletionToken&& token);

[function_block An [link requirements.asynchronous_operations asynchronous
operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing one or more asynchronous read_some operations
on the stream.]

[function_block Data is placed into the [link requirements.dynamic_buffers
dynamic buffer sequence] object `b`. A [link requirements.mutable_buffers
mutable buffer sequence] is obtained prior to each `async_read_some` call using
`b.prepare(N)`, where `N` is an unspecified value such that `N <= max_size() -
size()`. [inline_note Implementations are encouraged to use `b.capacity()` when
determining `N`, to minimize the number of asynchronous read_some operations
performed on the stream.] After the completion of each asynchronous read_some
operation, the implementation performs `b.commit(n)`, where `n` is the value
passed to the asynchronous read_some operation's completion handler.]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous read_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous read_some operation, and the total number of bytes transferred in
the asynchronous read operation so far. The function object return value
specifies the maximum number of bytes to be read on the subsequent asynchronous
read_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] `b.size() == b.max_size()`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure both the `AsyncReadStream` object
`stream` and the memory associated with the dynamic buffer sequence `b` are
valid until the handler for the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous read_some operation, and
`n` is the total number of bytes transferred.]

[function_remarks This function shall not participate in overload resolution
unless `is_dynamic_buffer_sequence<DynamicBufferSequence>::value` is true.]

[endsect]
