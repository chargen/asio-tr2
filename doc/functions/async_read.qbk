[section:async_read Asynchronous read operations]

  template<class AsyncReadStream, class MutableBufferSequence,
    class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      const MutableBufferSequence& buffers,
                      CompletionToken&& token);
  template<class AsyncReadStream, class MutableBufferSequence,
    class CompletionCondition, class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      const MutableBufferSequence& buffers,
                      CompletionCondition completion_condition,
                      CompletionToken&& token);

[function_block An [link requirements.asynchronous_read_operations asynchronous
read operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing zero or more asynchronous operations on the
stream using the stream's `async_read_some` member function (henceforth
referred to as asynchronous read_some operations).]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous read_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous read_some operation, and the total number of bytes transferred in
the asynchronous read operation so far. The function object return value
specifies the maximum number of bytes to be read on the subsequent asynchronous
read_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the total number of bytes transferred is equal to
`buffer_size(buffers)`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure the `AsyncReadStream` object `stream`
is valid until the handler for the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous read_some operation, and
`n` is the total number of bytes transferred.]

  template<class AsyncReadStream, class Allocator, class CompletionToken>
    auto async_read(AsyncReadStream& stream,
                    basic_fifobuf<Allocator>& fb,
                    CompletionToken&& token);
  template<class AsyncReadStream, class Allocator,
    class CompletionCondition, class CompletionToken>
      auto async_read(AsyncReadStream& stream,
                      basic_fifobuf<Allocator>& fb,
                      CompletionCondition completion_condition,
                      CompletionToken&& token);

[function_block An [link requirements.asynchronous_operations asynchronous
operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing one or more asynchronous read_some operations
on the stream.]

[function_block Data is placed into the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_read_some` call using `fb.prepare(min(N, fb.max_size() - fb.size()))`,
where `N` is a suitable implementation-defined value. After the completion of
each asynchronous read_some operation, the implementation performs
`fb.commit(n)`, where `n` is the value passed to the asynchronous read_some
operation's completion handler.]

[function_block The `completion_condition` parameter specifies a function
object to be called prior to each asynchronous read_some operation. The
function object is passed the `error_code` value from the most recent
asynchronous read_some operation, and the total number of bytes transferred in
the asynchronous read operation so far. The function object return value
specifies the maximum number of bytes to be read on the subsequent asynchronous
read_some operation. Overloads where a completion condition is not specified
behave as if called with an object of class `transfer_all`.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is full, that is
`fb.size() == fb.max_size()`; or]

[function_block [mdash] the completion condition returns `0`.]

[function_block The program must ensure both the `AsyncReadStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, `ec` is the
`error_code` value from the most recent asynchronous read_some operation, and
`n` is the total number of bytes transferred.]

[endsect]
