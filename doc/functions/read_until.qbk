[section:read_until Synchronous delimited read operations]

  template<class SyncReadStream, class Allocator>
    size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                      char delim);
  template<class SyncReadStream, class Allocator>
    size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                      char delim, error_code& ec);
  template<class SyncReadStream, class Allocator>
    size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                      const string& delim);
  template<class SyncReadStream, class Allocator>
    size_t read_until(SyncReadStream& s, basic_fifobuf<Allocator>& fb,
                      const string& delim, error_code& ec);

[function_effects Reads data from the [link requirements.sync_read_stream
buffer-oriented synchronous read stream] object `stream` by performing zero or
more calls to the stream's `read_some` member function, until the
`basic_fifobuf<>` object's input sequence contains the specified delimiter
`delim`.]

[function_block Data is placed into the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`read_some` call using `fb.prepare(min(N, fb.max_size() - fb.size()))`, where
`N` is a suitable implementation-defined value. After each `read_some` call,
the implementation performs `fb.commit(n)`, where `n` is the return value from
`read_some`.]

[function_block The synchronous read operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object's input sequence contains
the delimiter `delim`; or]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is full, that is
`fb.size() == fb.max_size()`.]

[function_block On exit, if the `basic_fifobuf<>` object's input sequence
contains the delimiter, `ec` shall contain a value such that the expression
`!ec` is true. Otherwise, if the `basic_fifobuf<>` object is full, `ec` shall
contain the `error_code` value `stream_errc::not_found`. If the
`basic_fifobuf<>` object is not full, `ec` contains the `error_code` from the
most recent `read_some` call.]

[function_returns The number of bytes in the `basic_fifobuf<>` object's input
sequence up to and including the delimiter, if present. Otherwise returns `0`.]

[endsect]
