[section:read_until Synchronous delimited read operations]
[xrefid buffer.read.until]

  template<class SyncReadStream, class DynamicBuffer>
    size_t read_until(SyncReadStream& s, DynamicBuffer&& b, char delim);
  template<class SyncReadStream, class DynamicBuffer>
    size_t read_until(SyncReadStream& s, DynamicBuffer&& b,
                      char delim, error_code& ec);
  template<class SyncReadStream, class DynamicBuffer>
    size_t read_until(SyncReadStream& s, DynamicBuffer&& b, string_view delim);
  template<class SyncReadStream, class DynamicBuffer>
    size_t read_until(SyncReadStream& s, DynamicBuffer&& b,
                      string_view delim, error_code& ec);

[function_effects Reads data from the [link requirements.sync_read_stream
buffer-oriented synchronous read stream] object `stream` by performing zero or
more calls to the stream's `read_some` member function, until the input
sequence of the [link requirements.dynamic_buffers dynamic buffer] object `b`
contains the specified delimiter `delim`.]

[function_block Data is placed into the dynamic buffer object `b`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`read_some` call using `b.prepare(N)`, where `N` is an unspecified value such
that `N <= max_size() - size()`. [inline_note Implementations are encouraged to
use `b.capacity()` when determining `N`, to minimize the number of `read_some`
calls performed on the stream.] After each `read_some` call, the implementation
performs `b.commit(n)`, where `n` is the return value from `read_some`.]

[function_block The synchronous read_until operation continues until:]

[function_block [mdash] the input sequence of `b` contains the delimiter
`delim`; or]

[function_block [mdash] `b.size() == b.max_size()`; or]

[function_block [mdash] an synchronous read_some operation fails.]

[function_block On exit, if the input sequence of `b` contains the delimiter,
`ec` is set such that `!ec` is `true`. Otherwise, if `b.size() == b.max_size()`,
`ec` is set such that `ec == stream_errc::not_found`. If `b.size() <
b.max_size()`, `ec` contains the `error_code` from the most recent `read_some`
call.]

[function_returns The number of bytes in the input sequence of `b` up to and
including the delimiter, if present. [inline_note On completion, the buffer may
contain additional bytes following the delimiter.] Otherwise returns `0`.]

[endsect]
