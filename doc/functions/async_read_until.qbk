[section:async_read_until Asynchronous delimited read operations]
[xrefid buffer.async.read.until]

  template<class AsyncReadStream, class DynamicBuffer, class CompletionToken>
    __ifr__ async_read_until(AsyncReadStream& s,
                          DynamicBuffer&& b, char delim,
                          CompletionToken&& token);
  template<class AsyncReadStream, class DynamicBuffer, class CompletionToken>
    __ifr__ async_read_until(AsyncReadStream& s,
                          DynamicBuffer&& b, string_view delim,
                          CompletionToken&& token);

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing zero or more asynchronous read_some operations on
the stream, until the readable bytes of the [link requirements.dynamic_buffers
dynamic buffer] object `b` contain the specified delimiter `delim`.]

[function_block Data is placed into the dynamic buffer object `b`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_read_some` call using `b.prepare(N)`, where `N` is an unspecified value
such that `N <= max_size() - size()`. [inline_note Implementations are
encouraged to use `b.capacity()` when determining `N`, to minimize the number
of asynchronous read_some operations performed on the stream.] After the
completion of each asynchronous read_some operation, the implementation
performs `b.commit(n)`, where `n` is the value passed to the asynchronous
read_some operation's completion handler.]

[function_block The asynchronous read_until operation continues until:]

[function_block [mdash] the readable bytes of `b` contain the delimiter
`delim`; or]

[function_block [mdash] `b.size() == b.max_size()`; or]

[function_block [mdash] an asynchronous read_some operation fails.]

[function_block The program shall ensure the `AsyncReadStream` object `stream`
is valid until the completion handler for the asynchronous operation is
invoked.]

[function_block If `delim` is of type `string_view`, the implementation copies
the underlying sequence of characters prior to initiating an asynchronous
read_some operation on the stream. [inline_note This means that the caller is
not required to guarantee the validity of the delimiter string after the call
to `async_read_until` returns.]]

[function_block On completion of the asynchronous operation, if the readable
bytes of `b` contain the delimiter, `ec` is set such that `!ec` is `true`.
Otherwise, if `b.size() == b.max_size()`, `ec` is set such that `ec ==
stream_errc::not_found`. If `b.size() < b.max_size()`, `ec` is the `error_code`
from the most recent asynchronous read_some operation. `n` is the number of
readable bytes in `b` up to and including the delimiter, if present, otherwise
`0`.]

[endsect]
