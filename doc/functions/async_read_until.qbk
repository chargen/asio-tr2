[section:async_read_until Asynchronous delimited read operations]

  template<class AsyncReadStream, class Allocator, class CompletionToken>
    auto async_read_until(AsyncReadStream& s,
                          basic_fifobuf<Allocator>& fb, char delim,
                          CompletionToken&& token);
  template<class AsyncReadStream, class Allocator, class CompletionToken>
    auto async_read_until(AsyncReadStream& s,
                          basic_fifobuf<Allocator>& fb,
                          const string& delim, CompletionToken&& token);

[function_block An [link requirements.asynchronous_operations asynchronous
operation].]

[function_completion_signature `void(error_code ec, size_t n)`.]

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing zero or more asynchronous read_some operations on
the stream, until the `basic_fifobuf<>` object's input sequence contains the
specified delimiter `delim`.]

[function_block Data is placed into the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_read_some` call using `fb.prepare(min(N, fb.max_size() - fb.size()))`,
where `N` is a suitable implementation-defined value. After the completion of
each asynchronous read_some operation, the implementation performs
`fb.commit(n)`, where `n` is the value passed to the asynchronous read_some
operation's completion handler.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object's input sequence contains
the delimiter `delim`; or]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is full, that is
`fb.size() == fb.max_size()`.]

[function_block The program must ensure both the `AsyncReadStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block On completion of the asynchronous operation, if the
`basic_fifobuf<>` object's input sequence contains the delimiter, `ec` is set
such that `!ec` is true. Otherwise, if the `basic_fifobuf<>` object is full,
`ec` is set such that `ec == stream_errc::not_found`. If the `basic_fifobuf<>`
object is not full, `ec` contains the `error_code` from the most recent
asynchronous read_some operation. `n` shall contain the number of bytes in the
`basic_fifobuf<>` object's input sequence up to and including the delimiter, if
present, otherwise `0`.]

[endsect]
