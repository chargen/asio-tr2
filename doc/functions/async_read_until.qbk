[section:async_read_until Asynchronous delimited read operations]

  template <class AsyncReadStream, class Allocator, class ReadHandler>
    void async_read_until(AsyncReadStream& s,
                          basic_fifobuf<Allocator>& fb, char delim,
                          ReadHandler handler);
  template <class AsyncReadStream, class Allocator, class ReadHandler>
    void async_read_until(AsyncReadStream& s,
                          basic_fifobuf<Allocator>& fb,
                          const string& delim, ReadHandler handler);

[function_effects Initiates an asynchronous operation to read data from the
[link requirements.async_read_stream buffer-oriented asynchronous read stream]
object `stream` by performing zero or more asynchronous /read_some/ operations
on the stream, until the `basic_fifobuf<>` object's input sequence contains the
specified delimiter `delim`. The operation is performed via the `io_service`
object `stream.get_io_service()` and behaves according to [link
requirements.asynchronous_operations asynchronous operation] requirements.]

[function_block Data is placed into the `basic_fifobuf<>` object `fb`. A [link
requirements.mutable_buffers mutable buffer sequence] is obtained prior to each
`async_read_some` call using `fb.prepare(min(N, fb.max_size() - fb.size()))`,
where `N` is a suitable implementation-defined value. After the completion of
each asynchronous /read_some/ operation, the implementation performs
`fb.commit(n)`, where `n` is the value passed to the asynchronous /read_some/
operation's completion handler.]

[function_block The asynchronous read operation continues until:]

[function_block [mdash] the `basic_fifobuf<>` object's input sequence contains
the delimiter `delim`; or]

[function_block [mdash] the `basic_fifobuf<>` object `fb` is full, that is
`fb.size() == fb.max_size()`.]

[function_block The program must ensure both the `AsyncReadStream` object
`stream` and the `basic_fifobuf<>` object `fb` are valid until the handler for
the asynchronous operation is invoked.]

[function_block Any implementation-defined handler objects passed to
asynchronous /read_some/ operations shall implement `io_handler_allocate`,
`io_handler_deallocate` and `io_handler_invoke` such that the calls are
forwarded to the equivalent functions for the object `handler`.]

[function_block On completion of the asynchronous operation, the [link
requirements.read_handler `ReadHandler`] object `handler` is invoked with an
`error_code` value `ec` and a number of bytes `s`. If the `basic_fifobuf<>`
object's input sequence contains the delimiter, `ec` shall contain a value such
that the expression `!ec` is true. Otherwise, if the `basic_fifobuf<>` object
is full, `ec` shall contain the `error_code` value `TBD_errc::not_found`. If the
`basic_fifobuf<>` object is not full, `ec` contains the `error_code` from the
most recent asynchronous /read_some/ operation. `s` shall contain the number of
bytes in the `basic_fifobuf<>` object's input sequence up to and including the
delimiter, if present, otherwise `0`.]

[endsect]
