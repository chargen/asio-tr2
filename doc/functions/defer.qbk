[section:defer Function [^defer]]
[xrefid async.defer]

  template<class CompletionToken>
    __ifr__ defer(CompletionToken&& token);

[function_effects\n
[mdash] Constructs an object `completion` of type
`async_completion<CompletionToken, void()>`, initialized with
`forward<CompletionToken>(token)`.\n
[mdash] Performs `ex.defer(std::move(completion.completion_handler), alloc)`,
where `ex` is the result of
`get_associated_executor(completion.completion_handler)`, and `alloc` is the
result of `get_associated_allocator(completion.completion_handler)`.]

[function_returns `completion.result.get()`.]

  template<class Executor, class CompletionToken>
    __ifr__ defer(const Executor& ex, CompletionToken&& token);

[function_effects\n
[mdash] Constructs an object `completion` of type
`async_completion<CompletionToken, void()>`, initialized with
`forward<CompletionToken>(token)`.\n
[mdash] Constructs a function object `f` containing as members:\n
  [bullet] a copy of the completion handler `h`, initialized with
  `std::move(completion.completion_handler)`,\n
  [bullet] an `executor_work_guard` object `w` for the completion handler's
  associated executor, initialized with `make_work_guard(h)`,\n
[indent]and where the effect of `f()` is:\n
  [bullet] `w.get_executor().dispatch(std::move(h), alloc)`, where `alloc` is
  the result of `get_associated_allocator(h)`, followed by\n
  [bullet] `w.reset()`.\n
[mdash] Performs `ex.defer(std::move(f), alloc)`, where `alloc` is the result
of `get_associated_allocator(completion.completion_handler)` prior to the
construction of `f`.]

[function_returns `completion.result.get()`.]

[function_remarks This function shall not participate in overload resolution
unless `is_executor<Executor>::value` is `true`.]

  template<class ExecutionContext, class CompletionToken>
    __ifr__ defer(ExecutionContext& ctx, CompletionToken&& token);

[function_returns `std::experimental::__ns__::defer(ctx.get_executor(),
forward<CompletionToken>(token))`.]

[function_remarks This function shall not participate in overload resolution
unless `is_convertible<ExecutionContext&, execution_context&>::value` is
`true`.]

[endsect]
