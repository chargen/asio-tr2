[section:connect Synchronous connect operations]
[xrefid socket.algo.connect]

  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first);
  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first,
                          error_code& ec);

[function_requires A default-constructed object of type `InputIterator` is an
end-of-sequence iterator.]

[function_returns `connect(s, first, InputIterator(), ec)`.]

  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last);
  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          error_code& ec);

[function_effects If `s.is_open()` is `true`, performs `s.close(ec)`. Performs
`ec.clear()`. Returns the first iterator `i` in the range [half_open_range
`first`,`last`] for which the synchronous operation `s.connect(*i, ec)`
succeeds. If no such iterator is found, `ec` contains the error code produced
by the last unsuccessful connect operation and the function returns `last`.]

[function_error_conditions\n
[mdash] `socket_errc::not_found` [mdash] if `first == last`.]

  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first,
                          ConnectCondition c);
  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first,
                          ConnectCondition c, error_code& ec);

[function_requires A default-constructed object of type `InputIterator` is an
end-of-sequence iterator.]

[function_returns `connect(s, first, InputIterator(), c, ec)`.]

  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          ConnectCondition c);
  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          ConnectCondition c, error_code& ec);

[function_requires `ConnectCondition` is a function object type meeting
CopyConstructible requirements (C++ Std \[copyconstructible\]).]

[function_effects If `s.is_open()` is `true`, performs `s.close(ec)`. Performs
`ec.clear()`. Returns the first iterator `i` in the range [half_open_range
`first`,`last`] for which `c(ec, *i)` yields `true` and, if so, for which the
synchronous operation `s.connect(*i, ec)` succeeds. If no such iterator is
found, `ec` contains the error code produced by the last unsuccessful connect
operation and the function returns `last`.]

[function_error_conditions\n
[mdash] `socket_errc::not_found` [mdash] if `first == last` or if the function
object `c` returned `false` for all iterators in the range.]

[endsect]
