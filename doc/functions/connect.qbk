[section:connect Synchronous connect operations]
[xrefid socket.algo.connect]

  template<class Protocol, class EndpointSequence>
    typename Protocol::endpoint connect(basic_socket<Protocol>& s,
                                        const EndpointSequence& endpoints);
  template<class Protocol, class InputIterator>
    typename Protocol::endpoint connect(basic_socket<Protocol>& s,
                                        const EndpointSequence& endpoints,
                                        error_code& ec);

[function_returns `connect(s, endpoints, __empty_capture__(auto, auto){ return
true; }, ec)`.]

  template<class Protocol, class EndpointSequence, class ConnectCondition>
    typename Protocol::endpoint connect(basic_socket<Protocol>& s,
                                        const EndpointSequence& endpoints,
                                        ConnectCondition c);
  template<class Protocol, class InputIterator, class ConnectCondition>
    typename Protocol::endpoint connect(basic_socket<Protocol>& s,
                                        const EndpointSequence& endpoints,
                                        ConnectCondition c, error_code& ec);

[function_effects Performs `ec.clear()`, then finds the first element `ep` in
the sequence `endpoints` for which:\n
[mdash] `c(ec, ep)` yields `true`;\n
[mdash] `s.close(ec)` succeeds;\n
[mdash] `s.open(ep.protocol(), ec)` succeeds; and\n
[mdash] `s.connect(ep, ec)` succeeds.]

[function_returns `typename Protocol::endpoint()` if no such element is found,
otherwise `ep`.]

[function_error_conditions\n
[mdash] `socket_errc::not_found` [mdash] if `endpoints.empty()` or if the
function object `c` returned `false` for all elements in the sequence.]

  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last);
  template<class Protocol, class InputIterator>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          error_code& ec);

[function_returns `connect(s, first, last, __empty_capture__(auto, auto){
return true; }, ec)`.]

  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          ConnectCondition c);
  template<class Protocol, class InputIterator, class ConnectCondition>
    InputIterator connect(basic_socket<Protocol>& s,
                          InputIterator first, InputIterator last,
                          ConnectCondition c, error_code& ec);

[function_effects Performs `ec.clear()`, then finds the first iterator `i` in
the range [half_open_range `first`,`last`] for which:\n
[mdash] `c(ec, *i)` yields `true`;\n
[mdash] `s.close(ec)` succeeds;\n
[mdash] `s.open(typename Protocol::endpoint(*i).protocol(), ec)` succeeds; and\n
[mdash] `s.connect(*i, ec)` succeeds.]

[function_returns `last` if no such iterator is found, otherwise `i`.]

[function_error_conditions\n
[mdash] `socket_errc::not_found` [mdash] if `first == last` or if the function
object `c` returned `false` for all iterators in the range.]

[endsect]
