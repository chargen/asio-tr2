[section:dispatch_at Function [^dispatch_at]]
[xrefid async.dispatch.at]

  template<class Clock, class Duration, class... CompletionTokens>
    __ifr__ dispatch_at(const chrono::time_point<Clock, Duration>& abs_time,
                     CompletionTokens&&... tokens);

[function_block Let the type `Handler` be the handler function object type
determined by performing `handler_type_t<CompletionToken, void()>`.]

[function_requires The type `Handler` must satisfy the `MoveConstructible`
requirements (C++ Std, \[moveconstructible\]) and be callable with zero
arguments.]

[function_effects\n
[mdash] Constructs a function object `handler` of type `Handler`, initialized
with `handler(forward<CompletionToken>(token))`.\n
[mdash] Constructs an object `result` of type `async_result<Handler>`,
initializing the object as `result(handler)`.\n
[mdash] Obtains the handler's associated executor object `ex` by performing
`get_associated_executor(handler)`.\n
[mdash] Creates a work object `w` by performing `make_work(ex)`.\n
[mdash] Obtains the handler's associated allocator object `alloc` by performing
`get_associated_allocator(handler)`.\n
[mdash] Without blocking the current thread of execution, on expiration of the
absolute timeout specified by `abs_time` performs
`ex.dispatch(std::move(handler), alloc)` followed by `w.reset()`.]

[function_returns `result.get()`.]

  template<class Clock, class Duration, class Executor, class... CompletionTokens>
    __ifr__ dispatch_at(const chrono::time_point<Clock, Duration>& abs_time,
                     const Executor& ex, CompletionTokens&&... tokens);

[function_block Let the type `Handler` be the handler function object type
determined by performing `handler_type_t<CompletionToken, void()>`.]

[function_requires The type `Handler` must satisfy the `MoveConstructible`
requirements (C++ Std, \[moveconstructible\]) and be callable with zero
arguments.]

[function_effects\n
[mdash] Constructs a function object `handler` of type `Handler`,
initialized with `handler(forward<CompletionToken>(token))`.\n
[mdash] Constructs an object `result` of type `async_result<Handler>`,
initializing the object as `result(handler)`.\n
[mdash] Creates a work object `w` by performing `make_work(ex)`.\n
[mdash] Obtains the handler's associated executor object `ex1` by performing
`get_associated_executor(handler)`.\n
[mdash] Creates a work object `w1` by performing `make_work(ex1)`.\n
[mdash] Obtains the handler's associated allocator object `alloc` by performing
`get_associated_allocator(handler)`.\n
[mdash] Constructs a function object `f` with a function call operator that
performs `ex1.dispatch(std::move(handler), alloc)` followed by `w1.reset()`.\n
[mdash] Without blocking the current thread of execution, on expiration of the
absolute timeout specified by `abs_time` performs `ex.dispatch(std::move(f),
alloc)` followed by `w.reset()`.]

[function_returns `result.get()`.]

[function_remarks This function shall not participate in overload resolution
unless `is_executor<Executor>::value` is `true`.]

  template<class Clock, class Duration, class ExecutionContext, class... CompletionTokens>
    __ifr__ dispatch_at(const chrono::time_point<Clock, Duration>& abs_time,
                     ExecutionContext& ctx, CompletionTokens&&... tokens);

[function_returns
`std::experimental::dispatch_at(ctx.get_executor(),
forward<CompletionToken>(token))`.]

[function_remarks This function shall not participate in overload resolution
unless `is_convertible<ExecutionContext&, execution_context&>::value` is `true`.]

[endsect]
